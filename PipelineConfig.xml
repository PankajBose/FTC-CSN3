<?xml version="1.0" encoding="utf-8"?>

<!-- Generated by Config Server - edit with caution -->

<config>

  <processors>

    <processor name="ACLEncoder" type="general" hidden="0">
      <load module="processors.ACLEncoder" class="ACLEncoder"/>
      <config>
        <param name="DisableAttr" value="docaclisencoded" type="str"/>
        <param name="EncodeUpperCase" value="0" type="int"/>
        <param name="SecurityAttr" value="docacl" type="str"/>
        <param name="SpacesPermitted" value="0" type="int"/>
      </config>
      <description><![CDATA[Encodes entries in document ACLs
The ACL Encoder processor is used (instead of the Document Security
document processor) when connectors retrieve the Access Control List
(ACL) for the documents and (some of) the connectors don't apply the 
encoding.  The encoding is necessary because each entry (user or group name) 
must be a single, valid token, which may not contain non-alphabetic, 
non-numeric characters.
If a connector itself does produce encoded ACLs, it must set the 
document attribute identified by DisableAttr to true.  This causes the 
ACL Encoder to leave the ACL in this document unchanged.
Space characters are normally used as delimiters in the ACL string.  
If it is necessary to handle ACL entries with spaces, SpacesPermitted 
can be set to true.  This will cause the ACL encoder to separate tokens 
based on the system identifier prefix.  This will only work if all ACL 
entries are known to have the same system identifier, and is only intended
as a workaround for existing connectors that are unable to encode names.
Parameters:
SecurityAttr - Document attribute used to store ACL.
DisableAttr  - Document attribute used to signify that ACL already is encoded.
SpacesPermitted - If true, spaces in user/group names are permitted.
EncodeUppperCase - If true, group names with upper or mixed case are encoded, such that case-sensitive matching is enabled.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="AccessPermissionEncoder" type="general" hidden="0">
      <load module="processors.sam.AccessPermissionEncoder" class="AccessPermissionEncoder"/>
      <config>
        <param name="version" value="0" type="int"/>
      </config>
      <description><![CDATA[Parse docaclxml field to generate docacl, docaclsystemid and docsiggroups fields
Parse docaclxml field to generate docacl, docaclsystemid and docsiggroups fields.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="AddPrefixSuffix" type="general" hidden="0">
      <load module="processors.AddPrefixSuffix" class="AddPrefixSuffix"/>
      <config>
        <param name="AttributeName" value="from" type="str"/>
        <param name="Prefix" value="to" type="str"/>
        <param name="Suffix" value="to" type="str"/>
      </config>
      <description><![CDATA[Add static prefix and suffix text to attribute value. Pankaj Bose
]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="AddSentenceNode" type="general" hidden="0">
      <load module="processors.AddPrefixSuffix" class="AddPrefixSuffix"/>
      <config>
        <param name="AttributeName" value="commentxml" type="str"/>
        <param name="Prefix" value="&lt;comment&gt;&lt;sentence&gt;" type="str"/>
        <param name="Suffix" value="&lt;/sentence&gt;&lt;/comment&gt;" type="str"/>
      </config>
      <description><![CDATA[Add static prefix and suffix text to attribute value. Pankaj Bose]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="AnchorTextCompleteness" type="general" hidden="0">
      <load module="processors.AnchorTextCompleteness" class="AnchorTextCompleteness"/>
      <config>
        <param name="AnchorsInput" value="anchordict" type="str"/>
        <param name="AnchorsOutput" value="anchordict" type="str"/>
        <param name="MaxN" value="3" type="int"/>
      </config>
      <description><![CDATA[Extracts common n-grams from the anchor texts to emulate completeness.
]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="AnchorTextFormatter" type="general" hidden="0">
      <load module="processors.AnchorTextFormatter" class="AnchorTextFormatter"/>
      <config>
        <param name="AuthorityScale" value="50" type="int"/>
        <param name="CompletenessOutput" value="canchortext" type="str"/>
        <param name="LocalAuthorityExponent" value="0.4" type="str"/>
        <param name="LocalAuthorityFraction" value="0.65" type="str"/>
        <param name="LocalAuthorityScale" value="100000" type="int"/>
        <param name="LogAuthorityStats" value="no" type="str"/>
        <param name="MinGlobalFreq" value="1" type="int"/>
        <param name="RecallOutput" value="anchortext" type="str"/>
        <param name="RecallScale" value="16" type="int"/>
        <param name="StopWordFile" value="" type="str"/>
        <param name="SummaryOutput" value="" type="str"/>
      </config>
      <description><![CDATA[
      Assigns weights to the anchor texts and formats them for presentation.
    
]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="AnchorTextRetriever" type="general" hidden="0">
      <load module="processors.AnchorTextRetriever" class="AnchorTextRetriever"/>
      <config>
        <param name="AnchorServerName" value="fds/anchorserver/node0" type="str"/>
        <param name="LinkCardinalityFactor" value="0.4" type="str"/>
        <param name="LinkCardinalityOutput" value="hwboost" type="str"/>
        <param name="LogReduceLinkCardinality" value="yes" type="str"/>
        <param name="ORBCallTimeout" value="2520" type="int"/>
      </config>
      <description><![CDATA[
      Retrieves the inbound anchor texts and link cardinality of a document
      from the AnchorServer.
    
]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="AttributeAdd" type="general" hidden="0">
      <load module="processors.Basic" class="AttributeAdd"/>
      <config>
        <param name="Attributes" value="" type="str"/>
        <param name="Input" value="" type="str"/>
        <param name="Output" value="" type="str"/>
      </config>
      <description><![CDATA[Add document attributes
The document attribute named by the Input configuration parameter
is copied to the attribute named by the Output parameter if that 
attribute does not already exist. If the input attribute does not exist, 
the operation is ignored
Several attributes can be copied using the Attributes parameter. It
has the form "a:b c:d", where a is copied to b and c is copied to d. Any
number of such mappings can be declared. The Attributes copy is performed
first, then the Input to Output copy.
From attributes starting with a '*' are looked up in the routing 
attributes (excluding the leading '*'), allowing routing attributes 
to be copied to normal document attributes.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="AttributeAssigner" type="general" hidden="0">
      <load module="processors.Basic" class="AttributeAssigner"/>
      <config>
        <param name="Attribute" value="" type="str"/>
        <param name="Value" value="" type="str"/>
      </config>
      <description><![CDATA[Assign a constant value to a document attribute
The attribute name and value are defined in configuration parameters.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="ConceptSuppressor" type="general" hidden="0">
      <load module="processors.Basic" class="AttributeAssigner"/>
      <config>
        <param name="Attribute" value="docvector_navigator" type="str"/>
        <param name="Value" value="" type="str"/>
      </config>
      <description><![CDATA[Suppresses the set of concept strings, to avoid excessive memory usage for very large document collections.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOPublicDocACLAssigner" type="general" hidden="0">
      <load module="processors.Basic" class="AttributeAssigner"/>
      <config>
        <param name="Attribute" value="docacl" type="str"/>
        <param name="Value" value="all" type="str"/>
      </config>
      <description><![CDATA[Assign a constant value to a document attribute
The attribute name and value are defined in configuration parameters.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOSystemIDAssigner" type="general" hidden="0">
      <load module="processors.Basic" class="AttributeAssigner"/>
      <config>
        <param name="Attribute" value="docaclsystemid" type="str"/>
        <param name="Value" value="pri" type="str"/>
      </config>
      <description><![CDATA[Assign a constant value to a document attribute
The attribute name and value are defined in configuration parameters.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="AttributeCopy" type="general" hidden="0">
      <load module="processors.Basic" class="AttributeCopy"/>
      <config>
        <param name="Attributes" value="" type="str"/>
        <param name="Input" value="" type="str"/>
        <param name="Output" value="" type="str"/>
      </config>
      <description><![CDATA[Copy document attributes
The document attribute named by the Input configuration parameter
is copied to the attribute named by the Output parameter. Any existing
values in the output is lost. If the input attribute does not exist, 
the operation is ignored
Several attributes can be copied using the Attributes parameter. It
has the form "a:b c:d", where a is copied to b and c is copied to d. Any
number of such mappings can be declared. The Attributes copy is performed
first, then the Input to Output copy.
From attributes starting with a '*' are looked up in the routing attributes (excluding the leading '*'), allowing routing attributes to be copied to normal document attributes.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="DataToHTML" type="general" hidden="0">
      <load module="processors.Basic" class="AttributeCopy"/>
      <config>
        <param name="Attributes" value="" type="str"/>
        <param name="Input" value="data" type="str"/>
        <param name="Output" value="html" type="str"/>
      </config>
      <description><![CDATA[]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMAssociatedCompanyNameNavCopy" type="general" hidden="0">
      <load module="processors.Basic" class="AttributeCopy"/>
      <config>
        <param name="Attributes" value="" type="str"/>
        <param name="Input" value="associatedcompanynamenav" type="str"/>
        <param name="Output" value="associatedcompanybasenamenav" type="str"/>
      </config>
      <description><![CDATA[Copy document attributes
The document attribute named by the Input configuration parameter
is copied to the attribute named by the Output parameter. Any existing
values in the output is lost. If the input attribute does not exist, 
the operation is ignored
Several attributes can be copied using the Attributes parameter. It
has the form "a:b c:d", where a is copied to b and c is copied to d. Any
number of such mappings can be declared. The Attributes copy is performed
first, then the Input to Output copy.
From attributes starting with a '*' are looked up in the routing attributes (excluding the leading '*'), allowing routing attributes to be copied to normal document attributes.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMAssociatedCompanyNameToNavCopy" type="general" hidden="0">
      <load module="processors.Basic" class="AttributeCopy"/>
      <config>
        <param name="Attributes" value="" type="str"/>
        <param name="Input" value="associatedcompanyname" type="str"/>
        <param name="Output" value="associatedcompanynamenav" type="str"/>
      </config>
      <description><![CDATA[Copy document attributes
The document attribute named by the Input configuration parameter
is copied to the attribute named by the Output parameter. Any existing
values in the output is lost. If the input attribute does not exist, 
the operation is ignored
Several attributes can be copied using the Attributes parameter. It
has the form &quot;a:b c:d&quot;, where a is copied to b and c is copied to d. Any
number of such mappings can be declared. The Attributes copy is performed
first, then the Input to Output copy.
From attributes starting with a &#039;*&#039; are looked up in the routing attributes (excluding the leading &#039;*&#039;), allowing routing attributes to be copied to normal document attributes.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOAssociatedCompanyNameCopy" type="general" hidden="0">
      <load module="processors.Basic" class="AttributeCopy"/>
      <config>
        <param name="Attributes" value="" type="str"/>
        <param name="Input" value="associatedcompanyname" type="str"/>
        <param name="Output" value="associatedcompanybasenamenav" type="str"/>
      </config>
      <description><![CDATA[Copy document attributes
The document attribute named by the Input configuration parameter
is copied to the attribute named by the Output parameter. Any existing
values in the output is lost. If the input attribute does not exist, 
the operation is ignored
Several attributes can be copied using the Attributes parameter. It
has the form &quot;a:b c:d&quot;, where a is copied to b and c is copied to d. Any
number of such mappings can be declared. The Attributes copy is performed
first, then the Input to Output copy.
From attributes starting with a &#039;*&#039; are looked up in the routing attributes (excluding the leading &#039;*&#039;), allowing routing attributes to be copied to normal document attributes.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOCollectionNameCopy" type="general" hidden="0">
      <load module="processors.Basic" class="AttributeCopy"/>
      <config>
        <param name="Attributes" value="" type="str"/>
        <param name="Input" value="*collection:fast_collection" type="str"/>
        <param name="Output" value="generic1" type="str"/>
      </config>
      <description><![CDATA[Copy document attributes
The document attribute named by the Input configuration parameter
is copied to the attribute named by the Output parameter. Any existing
values in the output is lost. If the input attribute does not exist, 
the operation is ignored
Several attributes can be copied using the Attributes parameter. It
has the form "a:b c:d", where a is copied to b and c is copied to d. Any
number of such mappings can be declared. The Attributes copy is performed
first, then the Input to Output copy.
From attributes starting with a '*' are looked up in the routing attributes (excluding the leading '*'), allowing routing attributes to be copied to normal document attributes.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOCopyAIProdServCode" type="general" hidden="0">
      <load module="processors.Basic" class="AttributeCopy"/>
      <config>
        <param name="Attributes" value="institutionpsc:institutionpscnav institutionvc:institutionvcnav" type="str"/>
        <param name="Input" value="" type="str"/>
        <param name="Output" value="" type="str"/>
      </config>
      <description><![CDATA[Copy document attributes
The document attribute named by the Input configuration parameter
is copied to the attribute named by the Output parameter. Any existing
values in the output is lost. If the input attribute does not exist, 
the operation is ignored
Several attributes can be copied using the Attributes parameter. It
has the form "a:b c:d", where a is copied to b and c is copied to d. Any
number of such mappings can be declared. The Attributes copy is performed
first, then the Input to Output copy.
From attributes starting with a '*' are looked up in the routing attributes (excluding the leading '*'), allowing routing attributes to be copied to normal document attributes.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOCopyBodyTeaser" type="general" hidden="0">
      <load module="processors.Basic" class="AttributeCopy"/>
      <config>
        <param name="Attributes" value="" type="str"/>
        <param name="Input" value="body" type="str"/>
        <param name="Output" value="teaser" type="str"/>
      </config>
      <description><![CDATA[Copy document attributes
The document attribute named by the Input configuration parameter
is copied to the attribute named by the Output parameter. Any existing
values in the output is lost. If the input attribute does not exist, 
the operation is ignored
Several attributes can be copied using the Attributes parameter. It
has the form "a:b c:d", where a is copied to b and c is copied to d. Any
number of such mappings can be declared. The Attributes copy is performed
first, then the Input to Output copy.
From attributes starting with a '*' are looked up in the routing attributes (excluding the leading '*'), allowing routing attributes to be copied to normal document attributes.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOCopyCity" type="general" hidden="0">
      <load module="processors.Basic" class="AttributeCopy"/>
      <config>
        <param name="Attributes" value="" type="str"/>
        <param name="Input" value="primarycompanycity" type="str"/>
        <param name="Output" value="subjectcity" type="str"/>
      </config>
      <description><![CDATA[Copy document attributes
The document attribute named by the Input configuration parameter
is copied to the attribute named by the Output parameter. Any existing
values in the output is lost. If the input attribute does not exist, 
the operation is ignored
Several attributes can be copied using the Attributes parameter. It
has the form "a:b c:d", where a is copied to b and c is copied to d. Any
number of such mappings can be declared. The Attributes copy is performed
first, then the Input to Output copy.
From attributes starting with a '*' are looked up in the routing attributes (excluding the leading '*'), allowing routing attributes to be copied to normal document attributes.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOCopyCommentsTeaser" type="general" hidden="0">
      <load module="processors.Basic" class="AttributeCopy"/>
      <config>
        <param name="Attributes" value="" type="str"/>
        <param name="Input" value="comments" type="str"/>
        <param name="Output" value="commentsteaser" type="str"/>
      </config>
      <description><![CDATA[Copy document attributes
The document attribute named by the Input configuration parameter
is copied to the attribute named by the Output parameter. Any existing
values in the output is lost. If the input attribute does not exist, 
the operation is ignored
Several attributes can be copied using the Attributes parameter. It
has the form "a:b c:d", where a is copied to b and c is copied to d. Any
number of such mappings can be declared. The Attributes copy is performed
first, then the Input to Output copy.
From attributes starting with a '*' are looked up in the routing attributes (excluding the leading '*'), allowing routing attributes to be copied to normal document attributes.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOCopyFAQTeaser" type="general" hidden="0">
      <load module="processors.Basic" class="AttributeCopy"/>
      <config>
        <param name="Attributes" value="" type="str"/>
        <param name="Input" value="faqanswer" type="str"/>
        <param name="Output" value="faqteaser" type="str"/>
      </config>
      <description><![CDATA[Copy document attributes
The document attribute named by the Input configuration parameter
is copied to the attribute named by the Output parameter. Any existing
values in the output is lost. If the input attribute does not exist, 
the operation is ignored
Several attributes can be copied using the Attributes parameter. It
has the form "a:b c:d", where a is copied to b and c is copied to d. Any
number of such mappings can be declared. The Attributes copy is performed
first, then the Input to Output copy.
From attributes starting with a '*' are looked up in the routing attributes (excluding the leading '*'), allowing routing attributes to be copied to normal document attributes.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOCopyName" type="general" hidden="0">
      <load module="processors.Basic" class="AttributeCopy"/>
      <config>
        <param name="Attributes" value="" type="str"/>
        <param name="Input" value="primarycompanyname" type="str"/>
        <param name="Output" value="subjectname" type="str"/>
      </config>
      <description><![CDATA[Copy document attributes
The document attribute named by the Input configuration parameter
is copied to the attribute named by the Output parameter. Any existing
values in the output is lost. If the input attribute does not exist, 
the operation is ignored
Several attributes can be copied using the Attributes parameter. It
has the form "a:b c:d", where a is copied to b and c is copied to d. Any
number of such mappings can be declared. The Attributes copy is performed
first, then the Input to Output copy.
From attributes starting with a '*' are looked up in the routing attributes (excluding the leading '*'), allowing routing attributes to be copied to normal document attributes.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOCopyRecordType" type="general" hidden="0">
      <load module="processors.Basic" class="AttributeCopy"/>
      <config>
        <param name="Attributes" value="" type="str"/>
        <param name="Input" value="*collection:fast_collection" type="str"/>
        <param name="Output" value="recordtype" type="str"/>
      </config>
      <description><![CDATA[Copy document attributes
The document attribute named by the Input configuration parameter
is copied to the attribute named by the Output parameter. Any existing
values in the output is lost. If the input attribute does not exist, 
the operation is ignored
Several attributes can be copied using the Attributes parameter. It
has the form "a:b c:d", where a is copied to b and c is copied to d. Any
number of such mappings can be declared. The Attributes copy is performed
first, then the Input to Output copy.
From attributes starting with a '*' are looked up in the routing attributes (excluding the leading '*'), allowing routing attributes to be copied to normal document attributes.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOCopyRedactedTeaser" type="general" hidden="0">
      <load module="processors.Basic" class="AttributeCopy"/>
      <config>
        <param name="Attributes" value="" type="str"/>
        <param name="Input" value="redactedcomments" type="str"/>
        <param name="Output" value="redactedcommentsteaser" type="str"/>
      </config>
      <description><![CDATA[Copy document attributes
The document attribute named by the Input configuration parameter
is copied to the attribute named by the Output parameter. Any existing
values in the output is lost. If the input attribute does not exist, 
the operation is ignored
Several attributes can be copied using the Attributes parameter. It
has the form "a:b c:d", where a is copied to b and c is copied to d. Any
number of such mappings can be declared. The Attributes copy is performed
first, then the Input to Output copy.
From attributes starting with a '*' are looked up in the routing attributes (excluding the leading '*'), allowing routing attributes to be copied to normal document attributes.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOCopyState" type="general" hidden="0">
      <load module="processors.Basic" class="AttributeCopy"/>
      <config>
        <param name="Attributes" value="" type="str"/>
        <param name="Input" value="primarycompanystate" type="str"/>
        <param name="Output" value="subjectstate" type="str"/>
      </config>
      <description><![CDATA[Copy document attributes
The document attribute named by the Input configuration parameter
is copied to the attribute named by the Output parameter. Any existing
values in the output is lost. If the input attribute does not exist, 
the operation is ignored
Several attributes can be copied using the Attributes parameter. It
has the form "a:b c:d", where a is copied to b and c is copied to d. Any
number of such mappings can be declared. The Attributes copy is performed
first, then the Input to Output copy.
From attributes starting with a '*' are looked up in the routing attributes (excluding the leading '*'), allowing routing attributes to be copied to normal document attributes.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOCopyToSubjectBaseNameStrippedPhonetic" type="general" hidden="0">
      <load module="processors.Basic" class="AttributeCopy"/>
      <config>
        <param name="Attributes" value="" type="str"/>
        <param name="Input" value="subjectbasenamestripped" type="str"/>
        <param name="Output" value="subjectbasenamestrippedphonetic" type="str"/>
      </config>
      <description><![CDATA[Copy document attributes
The document attribute named by the Input configuration parameter
is copied to the attribute named by the Output parameter. Any existing
values in the output is lost. If the input attribute does not exist, 
the operation is ignored
Several attributes can be copied using the Attributes parameter. It
has the form &quot;a:b c:d&quot;, where a is copied to b and c is copied to d. Any
number of such mappings can be declared. The Attributes copy is performed
first, then the Input to Output copy.
From attributes starting with a &#039;*&#039; are looked up in the routing attributes (excluding the leading &#039;*&#039;), allowing routing attributes to be copied to normal document attributes.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="Stan3NewsAttributeCopy" type="general" hidden="0">
      <load module="processors.Basic" class="AttributeCopy"/>
      <config>
        <param name="Attributes" value="stantitle:title stantext:body" type="str"/>
        <param name="Input" value="" type="str"/>
        <param name="Output" value="" type="str"/>
      </config>
      <description><![CDATA[Copies 'stantitle' to 'title' and 'stantext' to 'body'.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="AttributeDeleter" type="general" hidden="0">
      <load module="processors.Basic" class="AttributeDeleter"/>
      <config>
        <param name="Attributes" value="" type="str"/>
      </config>
      <description><![CDATA[Delete attributes from a document
The attributes named in the configuration parameter Attributes are deleted 
from the document, ignoring missing attributes.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="AttributeFilter" type="general" hidden="0">
      <load module="processors.Basic" class="AttributeFilter"/>
      <config>
        <param name="Attribute" value="" type="str"/>
        <param name="DropSilently" value="0" type="int"/>
        <param name="Separator" value=";" type="str"/>
        <param name="Values" value="" type="str"/>
      </config>
      <description><![CDATA[Drop documents based on attribute values
Drop document if the configured attribute doesn't have any of the configured values.
The 'Attribute' parameter should contain the name of the attribute to act on. Example: 'languages'.
The 'Separator' parameter should contain the string that separates different values in the attribute. Example: ';'.
The 'Values' parameters should contain a list of required values (one of which must be present in the configured attribute), separated by space characters. Example: 'es pt'.
The 'DropSilently' boolean parameter should be set to '0' to get a log message for dropped documents or '1' to drop documents silently.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="AttributeLookup" type="general" hidden="0">
      <load module="processors.AttributeLookup" class="AttributeLookup"/>
      <config>
        <param name="BatchLookup" value="1" type="int"/>
      </config>
      <description><![CDATA[Lookup anchor text and link based static rank (DocRank and SiteRank)
]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="WAAttributeLookup" type="general" hidden="0">
      <load module="processors.AttributeLookup" class="AttributeLookup"/>
      <config>
        <param name="BatchLookup" value="1" type="int"/>
      </config>
      <description><![CDATA[Lookup anchor text and link based static rank (DocRank and SiteRank)]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="AttributeMapper" type="general" hidden="0">
      <load module="processors.AttributeMapper" class="AttributeMapper"/>
      <config>
        <param name="FromAttribute" value="" type="str"/>
        <param name="MappingFileUrl" value="" type="str"/>
        <param name="ToAttribute" value="" type="str"/>
      </config>
      <description><![CDATA[Applies predefined mappings on configurable attributes
This document processing stage performs a conditional assignment of a target element based on the full content of a given source element. It enables a custom mapping of elements from one element to another. This to/from mapping requires a match with the entire input element, which can be a word or a string. 
It uses the value from the attribute defined in FromAttribute and inserts the result of the mapping to the attribute defined in ToAttribute.
The external mapping file is a XML file with a <attribute-mapping> element containing several <map> elements with a "from" and a "to" attribute. The mapping file must recide in the $FASTSEARCH/etc/config_data/AttributeMapper/ directory.
A path/file specification may also be used, where the path must be relative to this directory.
The mapping file has the format of the following example:
          <attribute-mapping>
            <map from="penguin" to="birds computer.os"/>
            <map from="saab" to="car"/>
          </attribute-mapping>
Multiple entries with the same from value are joined with a space in the ToAttribute. If the ToAttribute is set, it is not changed.
All special characters need to be escaped in the mapping file.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="AttributeMapperRe" type="general" hidden="0">
      <load module="processors.AttributeMapper" class="AttributeMapperRe"/>
      <config>
        <param name="FromAttribute" value="" type="str"/>
        <param name="MappingFileUrl" value="" type="str"/>
        <param name="Separator" value=" " type="str"/>
        <param name="ToAttribute" value="" type="str"/>
      </config>
      <description><![CDATA[Applies predefined mappings on configurable attributes
This document processing stage performs a conditional assignment of a target element based on the result og give regular expressions applied to a given source element.
It uses the value from the attribute defined in FromAttribute and inserts the result of the mapping to the attribute defined in ToAttribute.
The from mapping value is a regular expression. If it matches the content of the FromAttribute, the ToAttribute will be assigned the to value of the mapping.
The external mapping file is a XML file with a <attribute-mapping> element containing several <map> elements with a "from" and a "to" attribute.
A path/file specification may also be used, where the path must be relative to this directory.
The mapping file has the format of the following example:
        <attribute-mapping-re>
          <map from=".*www\.heritage\.*" to="egypt"/>
          <map from="saab" to="car"/>
        </attribute-mapping-re>
Multiple entries with the same from value are joined with the value of the Separator configuration parameter in the ToAttribute. If the ToAttribute is already set, it is not changed.
All special characters need to be escaped in the mapping file.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="AttributeMerger" type="general" hidden="0">
      <load module="processors.Basic" class="AttributeMerger"/>
      <config>
        <param name="Input" value="" type="str"/>
        <param name="Output" value="" type="str"/>
        <param name="Separator" value=";" type="str"/>
      </config>
      <description><![CDATA[Merge Several Document Attributes
The document attributes named in the Input parameter, in the form of 
  "a b c", are merged together and placed in the Output attribute. The 
  values of a, b, and c are merged together in the order specified and are
  separated by the separator given]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="AttributeMergerMultivalue" type="general" hidden="0">
      <load module="processors.AttributeMergerMultivalue" class="AttributeMergerMultivalue"/>
      <config>
        <param name="Input" value="" type="str"/>
        <param name="Output" value="" type="str"/>
        <param name="Separator" value="|" type="str"/>
      </config>
      <description><![CDATA[Merge Several Document Multivalue Attributes
The document attributes named in the Input parameter, in the form of "a b c", are merged together and placed in the Output attribute.
The values of a, b, and c are merged together in the order specified and are seperated by the Separator parameter.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOMergeSubjectCity" type="general" hidden="0">
      <load module="processors.AttributeMergerMultivalue" class="AttributeMergerMultivalue"/>
      <config>
        <param name="Input" value="primarycompanycity associatedcompanycity" type="str"/>
        <param name="Output" value="subjectcity" type="str"/>
        <param name="Separator" value="|" type="str"/>
      </config>
      <description><![CDATA[Merge Several Document Multivalue Attributes
The document attributes named in the Input parameter, in the form of "a b c", are merged together and placed in the Output attribute.
The values of a, b, and c are merged together in the order specified and are seperated by the Separator parameter.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOMergeSubjectCityIDT" type="general" hidden="0">
      <load module="processors.AttributeMergerMultivalue" class="AttributeMergerMultivalue"/>
      <config>
        <param name="Input" value="primarycompanycity " type="str"/>
        <param name="Output" value="subjectcity" type="str"/>
        <param name="Separator" value="|" type="str"/>
      </config>
      <description><![CDATA[Merge Several Document Multivalue Attributes
The document attributes named in the Input parameter, in the form of "a b c", are merged together and placed in the Output attribute.
The values of a, b, and c are merged together in the order specified and are seperated by the Separator parameter.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOMergeSubjectCountry" type="general" hidden="0">
      <load module="processors.AttributeMergerMultivalue" class="AttributeMergerMultivalue"/>
      <config>
        <param name="Input" value="primarycompanycountry associatedcompanycountry" type="str"/>
        <param name="Output" value="subjectcountry" type="str"/>
        <param name="Separator" value="|" type="str"/>
      </config>
      <description><![CDATA[Merge Several Document Multivalue Attributes
The document attributes named in the Input parameter, in the form of "a b c", are merged together and placed in the Output attribute.
The values of a, b, and c are merged together in the order specified and are seperated by the Separator parameter.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOMergeSubjectCountryIDT" type="general" hidden="0">
      <load module="processors.AttributeMergerMultivalue" class="AttributeMergerMultivalue"/>
      <config>
        <param name="Input" value="primarycompanycountry" type="str"/>
        <param name="Output" value="subjectcountry" type="str"/>
        <param name="Separator" value="|" type="str"/>
      </config>
      <description><![CDATA[Merge Several Document Multivalue Attributes
The document attributes named in the Input parameter, in the form of "a b c", are merged together and placed in the Output attribute.
The values of a, b, and c are merged together in the order specified and are seperated by the Separator parameter.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOMergeSubjectEmails" type="general" hidden="0">
      <load module="processors.AttributeMergerMultivalue" class="AttributeMergerMultivalue"/>
      <config>
        <param name="Input" value="primarycompanyemail associatedcompanyemail" type="str"/>
        <param name="Output" value="subjectemail" type="str"/>
        <param name="Separator" value="|" type="str"/>
      </config>
      <description><![CDATA[Merge Several Document Multivalue Attributes
The document attributes named in the Input parameter, in the form of &amp;amp;amp;quot;a b c&amp;amp;amp;quot;, are merged together and placed in the Output attribute.
The values of a, b, and c are merged together in the order specified and are seperated by the Separator parameter.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOMergeSubjectName" type="general" hidden="0">
      <load module="processors.AttributeMergerMultivalue" class="AttributeMergerMultivalue"/>
      <config>
        <param name="Input" value="primarycompanyname associatedcompanyname" type="str"/>
        <param name="Output" value="subjectname" type="str"/>
        <param name="Separator" value="|" type="str"/>
      </config>
      <description><![CDATA[Merge Several Document Multivalue Attributes
The document attributes named in the Input parameter, in the form of "a b c", are merged together and placed in the Output attribute.
The values of a, b, and c are merged together in the order specified and are seperated by the Separator parameter.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOMergeSubjectNameIDT" type="general" hidden="0">
      <load module="processors.AttributeMergerMultivalue" class="AttributeMergerMultivalue"/>
      <config>
        <param name="Input" value="primarycompanyname " type="str"/>
        <param name="Output" value="subjectname" type="str"/>
        <param name="Separator" value="|" type="str"/>
      </config>
      <description><![CDATA[Merge Several Document Multivalue Attributes
The document attributes named in the Input parameter, in the form of "a b c", are merged together and placed in the Output attribute.
The values of a, b, and c are merged together in the order specified and are seperated by the Separator parameter.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOMergeSubjectPhone" type="general" hidden="0">
      <load module="processors.AttributeMergerMultivalue" class="AttributeMergerMultivalue"/>
      <config>
        <param name="Input" value="primarycompanyareacode primarycompanyphonenumber" type="str"/>
        <param name="Output" value="subjectphone" type="str"/>
        <param name="Separator" value="-" type="str"/>
      </config>
      <description><![CDATA[Merge Several Document Multivalue Attributes
The document attributes named in the Input parameter, in the form of &quot;a b c&quot;, are merged together and placed in the Output attribute.
The values of a, b, and c are merged together in the order specified and are seperated by the Separator parameter.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOMergeSubjectPhoneIDT" type="general" hidden="0">
      <load module="processors.AttributeMergerMultivalue" class="AttributeMergerMultivalue"/>
      <config>
        <param name="Input" value="primarycompanyphonenumber" type="str"/>
        <param name="Output" value="subjectphone" type="str"/>
        <param name="Separator" value="|" type="str"/>
      </config>
      <description><![CDATA[Merge Several Document Multivalue Attributes
The document attributes named in the Input parameter, in the form of "a b c", are merged together and placed in the Output attribute.
The values of a, b, and c are merged together in the order specified and are seperated by the Separator parameter.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOMergeSubjectState" type="general" hidden="0">
      <load module="processors.AttributeMergerMultivalue" class="AttributeMergerMultivalue"/>
      <config>
        <param name="Input" value="primarycompanystate associatedcompanystate" type="str"/>
        <param name="Output" value="subjectstate" type="str"/>
        <param name="Separator" value="|" type="str"/>
      </config>
      <description><![CDATA[Merge Several Document Multivalue Attributes
The document attributes named in the Input parameter, in the form of "a b c", are merged together and placed in the Output attribute.
The values of a, b, and c are merged together in the order specified and are seperated by the Separator parameter.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOMergeSubjectStateIDT" type="general" hidden="0">
      <load module="processors.AttributeMergerMultivalue" class="AttributeMergerMultivalue"/>
      <config>
        <param name="Input" value="primarycompanystate " type="str"/>
        <param name="Output" value="subjectstate" type="str"/>
        <param name="Separator" value="|" type="str"/>
      </config>
      <description><![CDATA[Merge Several Document Multivalue Attributes
The document attributes named in the Input parameter, in the form of "a b c", are merged together and placed in the Output attribute.
The values of a, b, and c are merged together in the order specified and are seperated by the Separator parameter.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOMergeSuspectName" type="general" hidden="0">
      <load module="processors.AttributeMergerMultivalue" class="AttributeMergerMultivalue"/>
      <config>
        <param name="Input" value="primarycompanyname associatedcompanyname suspectfname suspectlname" type="str"/>
        <param name="Output" value="subjectname" type="str"/>
        <param name="Separator" value="|" type="str"/>
      </config>
      <description><![CDATA[Merge Several Document Multivalue Attributes
The document attributes named in the Input parameter, in the form of "a b c", are merged together and placed in the Output attribute.
The values of a, b, and c are merged together in the order specified and are seperated by the Separator parameter.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOMergeSuspectNameIDT" type="general" hidden="0">
      <load module="processors.AttributeMergerMultivalue" class="AttributeMergerMultivalue"/>
      <config>
        <param name="Input" value="primarycompanyname suspectfname suspectlname" type="str"/>
        <param name="Output" value="subjectname" type="str"/>
        <param name="Separator" value="|" type="str"/>
      </config>
      <description><![CDATA[Merge Several Document Multivalue Attributes
The document attributes named in the Input parameter, in the form of "a b c", are merged together and placed in the Output attribute.
The values of a, b, and c are merged together in the order specified and are seperated by the Separator parameter.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOSubjectEmailMerger" type="general" hidden="0">
      <load module="processors.AttributeMergerMultivalue" class="AttributeMergerMultivalue"/>
      <config>
        <param name="Input" value="primarycompanyemail associatedcompanyemail" type="str"/>
        <param name="Output" value="subjectemaildomain" type="str"/>
        <param name="Separator" value="|" type="str"/>
      </config>
      <description><![CDATA[Merge Several Document Multivalue Attributes
The document attributes named in the Input parameter, in the form of &quot;a b c&quot;, are merged together and placed in the Output attribute.
The values of a, b, and c are merged together in the order specified and are seperated by the Separator parameter.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOSubjectURLMerger" type="general" hidden="0">
      <load module="processors.AttributeMergerMultivalue" class="AttributeMergerMultivalue"/>
      <config>
        <param name="Input" value="primarycompanyurl associatedcompanyurl" type="str"/>
        <param name="Output" value="subjecturl" type="str"/>
        <param name="Separator" value="|" type="str"/>
      </config>
      <description><![CDATA[Merge Several Document Multivalue Attributes
The document attributes named in the Input parameter, in the form of &quot;a b c&quot;, are merged together and placed in the Output attribute.
The values of a, b, and c are merged together in the order specified and are seperated by the Separator parameter.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="AttributeSplitter" type="general" hidden="0">
      <load module="processors.Basic" class="AttributeSplitter"/>
      <config>
        <param name="Attributes" value="" type="str"/>
        <param name="Separator" value=";" type="str"/>
      </config>
      <description><![CDATA[Split document attributes into lists
The mapping defined by the Attributes parameter has the form "a:b:int c:d:float e:f:str g:h", where a is split at each Separator and copied to b. The third part of each mapping is optional and defines a type conversion on each value in the list. The default is string (no conversion).]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="Base64Decoder" type="general" hidden="0">
      <load module="processors.Base64" class="Base64Decoder"/>
      <config>
        <param name="dst" value="data" type="str"/>
        <param name="src" value="base64data" type="str"/>
      </config>
      <description><![CDATA[Decodes a document attribute that has been Base64-encoded.
]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="Capitalizer" type="general" hidden="0">
      <load module="processors.Capitalizer" class="Capitalizer"/>
      <config>
        <param name="Input" value="" type="str"/>
        <param name="Output" value="" type="str"/>
      </config>
      <description><![CDATA[
Capitalize values specified in the Input field.
and stores capitalized value into Output field
Examples: LONG BEACH --> Long Beach
          long beach --> Long Beach
    
]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="CapitalizerMultivalue" type="general" hidden="0">
      <load module="processors.CapitalizerMultivalue" class="CapitalizerMultivalue"/>
      <config>
        <param name="Input" value="" type="str"/>
        <param name="Output" value="" type="str"/>
        <param name="Separator" value="" type="str"/>
      </config>
      <description><![CDATA[
Capitalize values in multivalue fields
Capitalize values specified in the Input field.
and stores capitalized value into Output field
Examples: LONG BEACH||BOSTON|new york  --> Long Beach||Boston|New York
    
]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOCapitalizerMultivalue" type="general" hidden="0">
      <load module="processors.CapitalizerMultivalue" class="CapitalizerMultivalue"/>
      <config>
        <param name="Input" value="primarycompanyname primarycompanycity primarycompanystate primarycompanycountry associatedcompanyname associatedcompanycity associatedcompanystate associatedcompanycountry" type="str"/>
        <param name="Output" value="primarycompanyname primarycompanycity primarycompanystate primarycompanycountry associatedcompanyname associatedcompanycity associatedcompanystate associatedcompanycountry" type="str"/>
        <param name="Separator" value="|" type="str"/>
      </config>
      <description><![CDATA[Capitalize values in multivalue fields
Capitalize values specified in the Input field.
and stores capitalized value into Output field
Examples: LONG BEACH||BOSTON|new york  --> Long Beach||Boston|New York]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOCapitalizerMultivalueAlerts" type="general" hidden="0">
      <load module="processors.CapitalizerMultivalue" class="CapitalizerMultivalue"/>
      <config>
        <param name="Input" value="primarycompanyname primarycompanycity primarycompanystate primarycompanycountry associatedcompanyname associatedcompanycity associatedcompanystate associatedcompanycountry consumercity consumerstate consumercountry" type="str"/>
        <param name="Output" value="primarycompanyname primarycompanycity primarycompanystate primarycompanycountry associatedcompanyname associatedcompanycity associatedcompanystate associatedcompanycountry consumercity consumerstate consumercountry" type="str"/>
        <param name="Separator" value="|" type="str"/>
      </config>
      <description><![CDATA[Capitalize values in multivalue fields
Capitalize values specified in the Input field.
and stores capitalized value into Output field
Examples: LONG BEACH||BOSTON|new york  --> Long Beach||Boston|New York]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOCapitalizerMultivalueDNC" type="general" hidden="0">
      <load module="processors.CapitalizerMultivalue" class="CapitalizerMultivalue"/>
      <config>
        <param name="Input" value="primarycompanyname primarycompanystate" type="str"/>
        <param name="Output" value="primarycompanyname primarycompanystate" type="str"/>
        <param name="Separator" value="|" type="str"/>
      </config>
      <description><![CDATA[Capitalize values in multivalue fields
Capitalize values specified in the Input field.
and stores capitalized value into Output field
Examples: LONG BEACH||BOSTON|new york  --> Long Beach||Boston|New York]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOCapitalizerMultivalueNTL" type="general" hidden="0">
      <load module="processors.CapitalizerMultivalue" class="CapitalizerMultivalue"/>
      <config>
        <param name="Input" value="primarycompanyname primarycompanycity primarycompanystate" type="str"/>
        <param name="Output" value="primarycompanyname primarycompanycity primarycompanystate primarycompanycountry associatedcompanyname associatedcompanycity associatedcompanystate" type="str"/>
        <param name="Separator" value="|" type="str"/>
      </config>
      <description><![CDATA[Capitalize values in multivalue fields
Capitalize values specified in the Input field.
and stores capitalized value into Output field
Examples: LONG BEACH||BOSTON|new york  --> Long Beach||Boston|New York]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="CharacterNormalizer" type="general" hidden="0">
      <load module="processors.linguistics.CharacterNormalization" class="CharacterNormalizer"/>
      <config>
        <param name="attributes" value="elemtitle elemheadings elembody xml" type="str"/>
        <param name="configfile" value="etc/character_normalization.xml" type="str"/>
        <param name="lemma_attributes" value="" type="str"/>
      </config>
      <description><![CDATA[Character Normalizer for deaccentuation and character replacement
Will deaccent accented characters in western scripts and also replace some other characters, such as German sharp s or Russian yo, by normalized characters or character sequences.
           The characters to be normalized can be specified in the configuration file.
attributes: A list of fields for which character normalization should be carried out
lemma_attributes: a list of fields where normalized lemma variants should be added (scope fields only)]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="CheckNavigator" type="general" hidden="0">
      <load module="processors.CheckNavigator" class="CheckNavigator"/>
      <config>
        <param name="BlankValue" value="" type="str"/>
        <param name="ExtractionSourceAttribute" value="companyname" type="str"/>
        <param name="FallbackAttribute" value="companyfallback" type="str"/>
        <param name="NavigatorFieldReferanceAttribute" value="companies" type="str"/>
      </config>
      <description><![CDATA[Sets the value of a navigator field reference when entity extraction fails to set it.
ExtractionSourceAttribute: Attribute that is used as the input of the entity extraction.
NavigatorFieldReferanceAttribute: Attribute that is the output of the entity extraction.
FallbackAttribute: the Attribute that holds a value generated by a second entity extraction using another an alternative input.
BlankValue: (Optional value) When set it would be used as a defulat value when no value can be set to the navigator's field refrence.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="Checksummer" type="general" hidden="0">
      <load module="processors.Checksum" class="Checksummer"/>
      <config>
        <param name="attributes" value="tokbody:checksum_tokbody" type="str"/>
      </config>
      <description><![CDATA[Takes checkums over document attributes.
]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="ConditionalCopy" type="general" hidden="0">
      <load module="processors.ConditionalCopy" class="ConditionalCopy"/>
      <config>
        <param name="fromField" value="from" type="str"/>
        <param name="toField" value="to" type="str"/>
      </config>
      <description><![CDATA[Copy the value from the From field to To field (usually both are &apos;data&apos;) where To Field doesn't have already set value. Pankaj Bose
]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOConditionalCopy" type="general" hidden="0">
      <load module="processors.ConditionalCopy" class="ConditionalCopy"/>
      <config>
        <param name="fromField" value="subjectname" type="str"/>
        <param name="toField" value="subjectbasename" type="str"/>
      </config>
      <description><![CDATA[Copy the value from the From field to To field (usually both are &apos;data&apos;) where To Field doesn't have already set value. Pankaj Bose]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="CopyCollectionName" type="general" hidden="0">
      <load module="processors.CopyCollectionName" class="CopyCollectionName"/>
      <config>
        <param name="outputField" value="recordtype" type="str"/>
      </config>
      <description><![CDATA[Copies the collection name to output parameter
]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOCopyCollectionName" type="general" hidden="0">
      <load module="processors.CopyCollectionName" class="CopyCollectionName"/>
      <config>
        <param name="outputField" value="recordtype" type="str"/>
      </config>
      <description><![CDATA[Copies the collection name to output parameter]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="CopyRouting" type="general" hidden="0">
      <load module="processors.CopyRouting" class="CopyRouting"/>
      <config>
        <param name="outputField" value="recordtype" type="str"/>
        <param name="routingField" value="collection" type="str"/>
      </config>
      <description><![CDATA[Copies the collection name to output parameter
]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOCopyAlertID" type="general" hidden="0">
      <load module="processors.CopyRouting" class="CopyRouting"/>
      <config>
        <param name="outputField" value="alertid" type="str"/>
        <param name="routingField" value="contentid" type="str"/>
      </config>
      <description><![CDATA[Copies the routing contentid to alertid field]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="CopyUri" type="general" hidden="0">
      <load module="processors.CopyUri" class="CopyUri"/>
      <config>
        <param name="target" value="url" type="str"/>
      </config>
      <description><![CDATA[Copies uri into a specified document attribute
]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="CrawlerDemarshaller" type="general" hidden="0">
      <load module="processors.Crawler" class="CrawlerDemarshaller"/>
      <config>
      </config>
      <description><![CDATA[Demarshal extra_data from crawler
Checks for the attribute 'extra_data'. If this attribute exists, then the extra_data attribute is demarshalled and replaced with the demarshalled verison.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="CrawlerLinkFilter" type="general" hidden="0">
      <load module="processors.CrawlerLinkFilter" class="CrawlerLinkFilter"/>
      <config>
        <param name="CollectionConfigFile" value="CollectionConfig.txt" type="str"/>
        <param name="CrawlerVersion" value="6.3" type="str"/>
        <param name="UseLocalCollectionConfigFile" value="no" type="str"/>
      </config>
      <description><![CDATA[Filters out links based on the Collection config from the crawler.
]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="CrawlerRSSProcessor" type="general" hidden="0">
      <load module="processors.Crawler" class="CrawlerRSSProcessor"/>
      <config>
        <param name="FieldMapping" value="title:title description:meta_description parents:generic1" type="str"/>
        <param name="NormalizeEncoding" value="big5-hkscs" type="str"/>
        <param name="separator" value=":" type="str"/>
      </config>
      <description><![CDATA[Handle meta data from RSS feeds
If RSS support is enabled in the Crawler, the crawler will send meta data from RSS feeds to the pipeline together with the articles the feeds link to. Example. FeedA.rss has a link to ArticleB.html; when ArticleB is sent to the processing pipeline, the 'extra_data' attribute of the document will contain data from the feed, describing the article.
This is an example document processor which does the following:
The titles and descriptions of all referring RSS feeds will be extracted from the extra_data attribute and put into the specified fields. Default is title:title and description:description. The URLs of the referring feeds will be put into generic1.
An alternate separator character may be specified, if the input fields from extra_data contains the default separator (:).
The CrawlerDemarshaller stage needs to run before this stage
Specify charsets (seperated by :) to the NormalizeEncoding parameter for which the values of Fields get garbled. Only to be used in special charsets like in CJK]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="CrawlerSitemapProcessor" type="general" hidden="0">
      <load module="processors.Crawler" class="CrawlerSitemapProcessor"/>
      <config>
        <param name="FieldMapping" value="title:title description:meta_description" type="str"/>
        <param name="separator" value=":" type="str"/>
      </config>
      <description><![CDATA[Handle meta data from Sitemaps
If sitemap support is enabled in the Crawler, the crawler attaches relevant metadata found in sitemaps with the documents. This stage maps this metadata to given fields. 
This is an example document processor which does the following:
The titles and descriptions of all referring sitemaps will be extracted from the extra_data attribute and put into the specified fields. Default is title:title and description:description.
An alternate separator character may be specified, if the input fields from extra_data contain the default separator (:).
The CrawlerDemarshaller stage needs to run before this stage]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="CreateNgrams" type="general" hidden="0">
      <load module="processors.CreateNgrams" class="CreateNgrams"/>
      <config>
        <param name="Input" value="" type="str"/>
        <param name="N" value="0" type="int"/>
        <param name="Output" value="" type="str"/>
        <param name="Separator" value="; " type="str"/>
      </config>
      <description><![CDATA[Create Ngrams using some field contents.

Extracts given field contents and creates Ngrams, then stores them in a output field.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="CreateNgrams10" type="general" hidden="0">
      <load module="processors.CreateNgrams" class="CreateNgrams"/>
      <config>
        <param name="Input" value="subjectaddress" type="str"/>
        <param name="N" value="10" type="int"/>
        <param name="Output" value="addressngramfield10" type="str"/>
        <param name="Separator" value="; " type="str"/>
      </config>
      <description><![CDATA[Create Ngrams using some field contents.
Extracts given field contents and creates Ngrams, then stores them in a output field.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="CreateNgrams11" type="general" hidden="0">
      <load module="processors.CreateNgrams" class="CreateNgrams"/>
      <config>
        <param name="Input" value="subjectaddress" type="str"/>
        <param name="N" value="11" type="int"/>
        <param name="Output" value="addressngramfield11" type="str"/>
        <param name="Separator" value="; " type="str"/>
      </config>
      <description><![CDATA[Create Ngrams using some field contents.
Extracts given field contents and creates Ngrams, then stores them in a output field.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="CreateNgrams12" type="general" hidden="0">
      <load module="processors.CreateNgrams" class="CreateNgrams"/>
      <config>
        <param name="Input" value="subjectaddress" type="str"/>
        <param name="N" value="12" type="int"/>
        <param name="Output" value="addressngramfield12" type="str"/>
        <param name="Separator" value="; " type="str"/>
      </config>
      <description><![CDATA[Create Ngrams using some field contents.
Extracts given field contents and creates Ngrams, then stores them in a output field.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="CreateNgrams13" type="general" hidden="0">
      <load module="processors.CreateNgrams" class="CreateNgrams"/>
      <config>
        <param name="Input" value="subjectaddress" type="str"/>
        <param name="N" value="13" type="int"/>
        <param name="Output" value="addressngramfield13" type="str"/>
        <param name="Separator" value="; " type="str"/>
      </config>
      <description><![CDATA[Create Ngrams using some field contents.
Extracts given field contents and creates Ngrams, then stores them in a output field.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="CreateNgrams14" type="general" hidden="0">
      <load module="processors.CreateNgrams" class="CreateNgrams"/>
      <config>
        <param name="Input" value="subjectaddress" type="str"/>
        <param name="N" value="14" type="int"/>
        <param name="Output" value="addressngramfield14" type="str"/>
        <param name="Separator" value="; " type="str"/>
      </config>
      <description><![CDATA[Create Ngrams using some field contents.
Extracts given field contents and creates Ngrams, then stores them in a output field.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="CreateNgrams4" type="general" hidden="0">
      <load module="processors.CreateNgrams" class="CreateNgrams"/>
      <config>
        <param name="Input" value="subjectaddress" type="str"/>
        <param name="N" value="4" type="int"/>
        <param name="Output" value="addressngramfield4" type="str"/>
        <param name="Separator" value="; " type="str"/>
      </config>
      <description><![CDATA[Create Ngrams using some field contents.
Extracts given field contents and creates Ngrams, then stores them in a output field.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="CreateNgrams6" type="general" hidden="0">
      <load module="processors.CreateNgrams" class="CreateNgrams"/>
      <config>
        <param name="Input" value="subjectaddress" type="str"/>
        <param name="N" value="6" type="int"/>
        <param name="Output" value="addressngramfield6" type="str"/>
        <param name="Separator" value="; " type="str"/>
      </config>
      <description><![CDATA[Create Ngrams using some field contents.
Extracts given field contents and creates Ngrams, then stores them in a output field.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="CreateNgrams8" type="general" hidden="0">
      <load module="processors.CreateNgrams" class="CreateNgrams"/>
      <config>
        <param name="Input" value="subjectaddress" type="str"/>
        <param name="N" value="8" type="int"/>
        <param name="Output" value="addressngramfield8" type="str"/>
        <param name="Separator" value="; " type="str"/>
      </config>
      <description><![CDATA[Create Ngrams using some field contents.
Extracts given field contents and creates Ngrams, then stores them in a output field.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="CreateNgramsSubjectName10" type="general" hidden="0">
      <load module="processors.CreateNgrams" class="CreateNgrams"/>
      <config>
        <param name="Input" value="subjectbasenamestripped" type="str"/>
        <param name="N" value="10" type="int"/>
        <param name="Output" value="subjectngramfield10" type="str"/>
        <param name="Separator" value="; " type="str"/>
      </config>
      <description><![CDATA[Create Ngrams using some field contents.
Extracts given field contents and creates Ngrams, then stores them in a output field.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="CreateNgramsSubjectName11" type="general" hidden="0">
      <load module="processors.CreateNgrams" class="CreateNgrams"/>
      <config>
        <param name="Input" value="subjectbasenamestripped" type="str"/>
        <param name="N" value="11" type="int"/>
        <param name="Output" value="subjectngramfield11" type="str"/>
        <param name="Separator" value="; " type="str"/>
      </config>
      <description><![CDATA[Create Ngrams using some field contents.
Extracts given field contents and creates Ngrams, then stores them in a output field.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="CreateNgramsSubjectName12" type="general" hidden="0">
      <load module="processors.CreateNgrams" class="CreateNgrams"/>
      <config>
        <param name="Input" value="subjectbasenamestripped" type="str"/>
        <param name="N" value="12" type="int"/>
        <param name="Output" value="subjectngramfield12" type="str"/>
        <param name="Separator" value="; " type="str"/>
      </config>
      <description><![CDATA[Create Ngrams using some field contents.
Extracts given field contents and creates Ngrams, then stores them in a output field.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="CreateNgramsSubjectName13" type="general" hidden="0">
      <load module="processors.CreateNgrams" class="CreateNgrams"/>
      <config>
        <param name="Input" value="subjectbasenamestripped" type="str"/>
        <param name="N" value="13" type="int"/>
        <param name="Output" value="subjectngramfield13" type="str"/>
        <param name="Separator" value="; " type="str"/>
      </config>
      <description><![CDATA[Create Ngrams using some field contents.
Extracts given field contents and creates Ngrams, then stores them in a output field.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="CreateNgramsSubjectName14" type="general" hidden="0">
      <load module="processors.CreateNgrams" class="CreateNgrams"/>
      <config>
        <param name="Input" value="subjectbasenamestripped" type="str"/>
        <param name="N" value="14" type="int"/>
        <param name="Output" value="subjectngramfield14" type="str"/>
        <param name="Separator" value="; " type="str"/>
      </config>
      <description><![CDATA[Create Ngrams using some field contents.
Extracts given field contents and creates Ngrams, then stores them in a output field.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="CreateNgramsSubjectName6" type="general" hidden="0">
      <load module="processors.CreateNgrams" class="CreateNgrams"/>
      <config>
        <param name="Input" value="subjectbasenamestripped" type="str"/>
        <param name="N" value="6" type="int"/>
        <param name="Output" value="subjectngramfield6" type="str"/>
        <param name="Separator" value="; " type="str"/>
      </config>
      <description><![CDATA[Create Ngrams using some field contents.
Extracts given field contents and creates Ngrams, then stores them in a output field.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="CreateNgramsSubjectName7" type="general" hidden="0">
      <load module="processors.CreateNgrams" class="CreateNgrams"/>
      <config>
        <param name="Input" value="subjectbasenamestripped" type="str"/>
        <param name="N" value="7" type="int"/>
        <param name="Output" value="subjectngramfield7" type="str"/>
        <param name="Separator" value="; " type="str"/>
      </config>
      <description><![CDATA[Create Ngrams using some field contents.
Extracts given field contents and creates Ngrams, then stores them in a output field.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="CreateNgramsSubjectName8" type="general" hidden="0">
      <load module="processors.CreateNgrams" class="CreateNgrams"/>
      <config>
        <param name="Input" value="subjectbasenamestripped" type="str"/>
        <param name="N" value="8" type="int"/>
        <param name="Output" value="subjectngramfield8" type="str"/>
        <param name="Separator" value="; " type="str"/>
      </config>
      <description><![CDATA[Create Ngrams using some field contents.
Extracts given field contents and creates Ngrams, then stores them in a output field.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="CreateNgramsSubjectName9" type="general" hidden="0">
      <load module="processors.CreateNgrams" class="CreateNgrams"/>
      <config>
        <param name="Input" value="subjectbasenamestripped" type="str"/>
        <param name="N" value="9" type="int"/>
        <param name="Output" value="subjectngramfield9" type="str"/>
        <param name="Separator" value="; " type="str"/>
      </config>
      <description><![CDATA[Create Ngrams using some field contents.
Extracts given field contents and creates Ngrams, then stores them in a output field.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="DatabaseInsert" type="general" hidden="0">
      <load module="processors.DatabaseInsert" class="DatabaseInsert"/>
      <config>
        <param name="DatabaseName" value="" type="str"/>
        <param name="DocFields" value="" type="str"/>
        <param name="Password" value="" type="str"/>
        <param name="SQLquery" value="" type="str"/>
        <param name="ServerName" value="" type="str"/>
        <param name="Username" value="" type="str"/>
      </config>
      <description><![CDATA[
         	
         		Insert or updates into a SQL Server table. The SQL parameter shall provide a valid
         		SQL query. 
         	
         
]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="DatabaseInsertForObfuscation" type="general" hidden="0">
      <load module="processors.DatabaseInsert" class="DatabaseInsert"/>
      <config>
        <param name="DatabaseName" value="cisbeta" type="str"/>
        <param name="DocFields" value="referencenumber comments personnames" type="str"/>
        <param name="Password" value="cis4ftc" type="str"/>
        <param name="SQLquery" value="INSERT INTO redactedrecords_new(ReferenceNumber,Comments, ConsumerName) VALUES( %s, %s, %s)" type="str"/>
        <param name="ServerName" value="ftcdevsql801" type="str"/>
        <param name="Username" value="cis_fast_user" type="str"/>
      </config>
      <description><![CDATA[Insert or updates into a SQL Server table. The SQL parameter shall provide a valid
         		SQL query.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="DateTimeModifier" type="general" hidden="0">
      <load module="processors.DateTimeModifier" class="DateTimeModifier"/>
      <config>
        <param name="Input" value="" type="str"/>
        <param name="Output" value="" type="str"/>
      </config>
      <description><![CDATA[
This stage remove the "z" from the date
to make it look like local time
Example:
createddate:2008-03-28T18:00:39Z --> 2008-03-28T18:00:39
    
]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCODateTimeModifier" type="general" hidden="0">
      <load module="processors.DateTimeModifier" class="DateTimeModifier"/>
      <config>
        <param name="Input" value="createddate updateddate occurreddate noticeddate complaintdate transactiondate consumerdateofbirth reportedbydateofbirth dateoftape processingtime" type="str"/>
        <param name="Output" value="createddate updateddate occurreddate noticeddate complaintdate transactiondate consumerdateofbirth reportedbydateofbirth dateoftape processingtime" type="str"/>
      </config>
      <description><![CDATA[This stage remove the "z" from the date
to make it look like local time
Example:
createddate:2008-03-28T18:00:39Z --> 2008-03-28T18:00:39]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="DateTimeNormalizer" type="general" hidden="0">
      <load module="processors.DateTime" class="DateTimeNormalizer"/>
      <config>
        <param name="InputOutputAttributeList" value="docdatetime:docdatetime" type="str"/>
      </config>
      <description><![CDATA[Normalizes datetime attributes to ISO 8601 (UTC)
The 'InputOutputAttributeList' parameter defines an ordered list of input/output attributes on the form "inputattributename:outputattributename inputattributename:outputattributename ...". For each input attribute in the list, the documentprocessor will normalize the value found to ISO 8601 format using UTC (Coordinated Universal Time, previously known as GMT): 'YYYY-MM-DDThh:mm:ssZ'. The normalized value will be written to the output attribute. Existing output attribute values are overwritten.
Valid input formats are 'UTC' 'D' and 'S'. Format 'UTC' is Coordinated Universal Time (previously known as GMT) written as 'YYYY-MM-DDThh:mm:ss' or 'YYYY-MM-DDThh:mm:ssZ' (e.g. '2003-09-24T23:59:00' or '2003-09-24T23:59:00Z'). Format 'D' is a date value written as 'YYYY-MM-DD'. Format 'S' is "seconds since 1970-01-01T00:00:00"]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="DateTimeNormalizer(template)" type="general" hidden="0">
      <load module="processors.DateTime" class="DateTimeNormalizer"/>
      <config>
        <param name="InputOutputAttributeList" value="dtgeneric1:dtgeneric1 dtgeneric2:dtgeneric2 crawltime:crawltime" type="str"/>
      </config>
      <description><![CDATA[Stage template of processor, used to dynamically configure a cluster based processor based upon the index-profile.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="DateTimeNormalizer(webcluster)" type="general" hidden="0">
      <load module="processors.DateTime" class="DateTimeNormalizer"/>
      <config>
        <param name="InputOutputAttributeList" value="dtgeneric1:dtgeneric1 dtgeneric2:dtgeneric2 crawltime:crawltime crawltime:crawltime docdatetime:docdatetime createddate:createddate updateddate:updateddate occurreddate:occurreddate noticeddate:noticeddate complaintdate:complaintdate transactiondate:transactiondate incidentoccurreddate:incidentoccurreddate alertexpirationdate:alertexpirationdate alertmaxduraton:alertmaxduraton processingtime:processingtime dtgeneric1:dtgeneric1 dtgeneric2:dtgeneric2 genericdt1:genericdt1 genericdt2:genericdt2" type="str"/>
      </config>
      <description><![CDATA[Automatically configured for cluster]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="DateTimeSelector" type="general" hidden="0">
      <load module="processors.DateTime" class="DateTimeSelector"/>
      <config>
        <param name="DefaultToProcessingDateTimeList" value="0" type="str"/>
        <param name="DocumentDateTimeList" value="docdatetime" type="str"/>
        <param name="InputAttributeListList" value="docdatetime" type="str"/>
      </config>
      <description><![CDATA[Selects a datetime for a document
The 'InputAttributeListList' parameter defines a list of ordered list of attributes on the form "list1attributename:list1attributename list2attributename:list2attributename ...". For each list, Li, the document processor will search through the attributes in Li for a valid datetime value, which must be encoded on ISO 8601 format using UTC (Coordinated Universal Time, previously known as GMT): 'YYYY-MM-DDThh:mm:ssZ' (e.g. '2003-09-24T23:59:00Z'). The first datetime value found will be selected as the i'th datetime of the document, and written to the i'th attribute in the 'DocumentDateTimeList'. The attributes in 'DocumentDateTimeList' will typically be interpreted as (variants of) the document's age or last-modified-date. Existing output attributes are overwritten
'DocumentDateTimeList' is a white-space separated list of attribute names. 'DefaultToProcessingDateTimeList' is a white-space separted list of '0' and '1'. If no valid datetime is found for the i'th input attribute list and the i'th 'DefaultToProcessingDateTimeList' is '0', then no value will be written to the i'th 'DocumentDateTimeList' attribute. If no valid datetime is found for the i'th input attribute list and the i'th 'DefaultToProcessingDateTime' is '1', then the current time on the document processing node is used as the i'th document datetime.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="DateTimeSelector(template)" type="general" hidden="0">
      <load module="processors.DateTime" class="DateTimeSelector"/>
      <config>
        <param name="DefaultToProcessingDateTimeList" value="" type="str"/>
        <param name="DocumentDateTimeList" value="" type="str"/>
        <param name="InputAttributeListList" value="dtgeneric1:dtgeneric2:crawltime" type="str"/>
      </config>
      <description><![CDATA[Stage template of processor, used to dynamically configure a cluster based processor based upon the index-profile.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="DateTimeSelector(webcluster)" type="general" hidden="0">
      <load module="processors.DateTime" class="DateTimeSelector"/>
      <config>
        <param name="DefaultToProcessingDateTimeList" value="0" type="str"/>
        <param name="DocumentDateTimeList" value="docdatetime" type="str"/>
        <param name="InputAttributeListList" value="docdatetime:dtgeneric1:dtgeneric2:crawltime" type="str"/>
      </config>
      <description><![CDATA[Automatically configured for cluster]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="DateTimeToEpoch" type="general" hidden="0">
      <load module="processors.DateTime" class="DateTimeToEpoch"/>
      <config>
        <param name="AbortOnError" value="1" type="int"/>
        <param name="Formats" value="" type="str"/>
        <param name="InputAttribute" value="docdatetime" type="str"/>
        <param name="OutputAttribute" value="docepoch" type="str"/>
      </config>
      <description><![CDATA[Converts a datetime value from a UTC string to an integer representing the same time in seconds since the epoch.
The 'InputAttribute' parameter names the attribute that contains the UTC input.
The 'OutputAttribute' parameter names the output attribute, which will contain an integer seconds-since-the-epoch value.
The 'Formats' parameter should be a list of alternative datetime string formats, separated by '|'. It defaults to the ISO 8601 format as produced by the DateTimeNormalizer stage. See Python's time.strptime() documentation for a list of formatting codes.
The 'AbortOnError' parameter specifies whether the stage should abort with a DocumentException or log a warning in the doclog when datetime parsing fails.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="ParseHTTPLastModified" type="general" hidden="0">
      <load module="processors.DateTime" class="DateTimeToEpoch"/>
      <config>
        <param name="AbortOnError" value="0" type="int"/>
        <param name="Formats" value="%a, %d %b %Y %H:%M:%S GMT|%A, %d-%b-%y %H:%M:%S GMT|%a %b %d %H:%M:%S %Y" type="str"/>
        <param name="InputAttribute" value="http_lastmodified" type="str"/>
        <param name="OutputAttribute" value="docdatetime" type="str"/>
      </config>
      <description><![CDATA[Convert the Last-Modified HTTP header to a seconds-since-the-epoch value and place result in the 'docdatetime' attribute.
Supports all three datetime formats allowed by RFC 2616 (RFC 822/1123/2822, RFC 850/1036 and asctime()).]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="Decompressor" type="general" hidden="0">
      <load module="processors.Crawler" class="Decompressor"/>
      <config>
      </config>
      <description><![CDATA[Decompress zlib compressed data
Checks for the attribute 'encoding'. If this attribute exists and is set to 'deflate' then the data attribute is decompressed and replaced with the decompressed verison.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="DefaultValue" type="general" hidden="0">
      <load module="processors.Basic" class="DefaultValue"/>
      <config>
        <param name="Attributes" value="" type="str"/>
        <param name="Value" value="" type="str"/>
      </config>
      <description><![CDATA[Insert default value for missing attributes
Check that all 'Attributes' have a value. Missing attributes, or attributes having the value '' (the empty string), are assigned 'Value']]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="DocumentSecurityPublic" type="general" hidden="0">
      <load module="processors.Basic" class="DefaultValue"/>
      <config>
        <param name="Attributes" value="docacl docaclsystemid" type="str"/>
        <param name="Value" value="all" type="str"/>
      </config>
      <description><![CDATA[Initializes the document security information to
all meaning everyone has rights to view.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="DocumentSecurityUnknown" type="general" hidden="0">
      <load module="processors.Basic" class="DefaultValue"/>
      <config>
        <param name="Attributes" value="docacl docaclsystemid" type="str"/>
        <param name="Value" value="unknown" type="str"/>
      </config>
      <description><![CDATA[Initializes the document security information to
unknown thereby initialy denying access until either the correct
document security information can be retrieved or you configure the
security manager to grant access to these documents.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="DictServiceOutput" type="general" hidden="0">
      <load module="processors.Persistence" class="DictServiceOutput"/>
      <config>
        <param name="Attributes" value="personnames:eh_personnames:1 locations:eh_locations:1" type="str"/>
        <param name="Enabled" value="0" type="int"/>
        <param name="Service" value="datamanager/cache" type="str"/>
      </config>
      <description><![CDATA[Store entities and similar into the cache manager
The entities are stored in the cache manager and can later be retrieved
      from the dictionary service in order to create spellcheck or
      phrase dictionaries or similar.
The service name can be specified so that the output can go to alternative 
      cache managers handling e.g. only document analysis output.
The Attributes parameter specifies, which fields to store in the cache
      manager. The format is fieldname:prefix:keep_language where
fieldname is the name of the document field that contains the entries
prefix is the prefix with which the storage table will show up in
      dictionary management
keep_language is 0 if the entities are language independent and 1 if
      language information shall be kept.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="DictionaryTokenizer" type="general" hidden="0">
      <load module="processors.linguistics.Tokenization" class="DictionaryTokenizer"/>
      <config>
        <param name="Attributes" value="title:toktitle headings:tokheadings body:tokbody keywords:tokkeywords" type="str"/>
        <param name="Dictionary" value="linguistics/tokendictionary.txt" type="str"/>
      </config>
      <description><![CDATA[Change tokens by mapping via dictionary
The 'Attributes' is a set of from:to mappings. The input attributes are white-space tokenized and mapped via the dictionary to the output attributes. If the dictionary does not contain a token, the token remains unchanged.
The dictionary file has two lines per entry, the first for the input and the second for the output value.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="DocInit" type="general" hidden="0">
      <load module="processors.Basic" class="DocInit"/>
      <config>
      </config>
      <description><![CDATA[Initialize document attributes
Does not overwrite existing values, except processingtime
The values are: 
  processingtime = int(time.time())
  if data exists: 
     size = len(data)
]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="DocOutput" type="general" hidden="0">
      <load module="processors.DocOutput" class="DocOutput"/>
      <config>
        <param name="AttributeFileUrl" value="" type="str"/>
      </config>
      <description><![CDATA[Prepares a document for alerting.
Extracts information and creates necessary fields for
      alerting.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="DocumentRetriever" type="general" hidden="0">
      <load module="processors.DocumentRetriever" class="DocumentRetriever"/>
      <config>
        <param name="FollowLocation" value="1" type="int"/>
        <param name="Input" value="getpath" type="str"/>
        <param name="MaxRedirects" value="5" type="int"/>
        <param name="Output" value="data" type="str"/>
        <param name="Proxy" value="" type="str"/>
        <param name="Timeout" value="300" type="int"/>
        <param name="UserAgent" value="" type="str"/>
      </config>
      <description><![CDATA[Get the 'data' attribute from the URL in 'getpath'
If the 'data' attribute does not exist, retrieve it from the URL in 
'getpath' and update 'size' to be the number of bytes in 'data'.
The Timeout parameter specifies the maximum number of seconds allowed for a 
transfer. If exceeded, the stage will abort the pipeline with an error.
The FollowLocation parameter is a boolean (1 or 0) specifying whether HTTP 
Location based redirection should be allowed.
The MaxRedirects parameter is only valid if FollowLocation is enabled. It 
specifies the maximum number of HTTP Location redirects to follow.
The UserAgent parameter allows you to override the default 
"FAST ESP Document Retriever" HTTP User-Agent with a 
string of your own choosing.
The Proxy parameter allows you to specify the address of an HTTP proxy server, the format is 'proxyhost:proxyport' and the default is not to use a proxy.
The Input and Output parameters allows you to override the default 'getpath' 
and 'data' attribute names for custom pipelines with special configuration.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="DocumentSecurity" type="general" hidden="0">
      <load module="processors.DocumentSecurity" class="DocumentSecurity"/>
      <config>
        <param name="DefaultSid" value="999failed" type="str"/>
        <param name="SecurityAttr" value="docacl" type="str"/>
        <param name="SecurityDocId" value="" type="str"/>
        <param name="SecuritySystemAttr" value="docaclsystemid" type="str"/>
        <param name="SecuritySystemID" value="" type="str"/>
        <param name="SecuritySystemIdField" value="" type="str"/>
      </config>
      <description><![CDATA[Adds document level access permissions
The Security Document Processor retrieves the Access Control List
(ACL) for the document and adds it as a document attribute. At search time
the groups that the searching user is a member of is applied as a filter,
and this til be matched against the ACL for this document.
DefaultSid - Default ACL to use if ACL extraction failed
SecurityAttr - Document attribute used to store ACL.
SecuritySystemID - Prefix used to identify the input source.
SystemAttr - Document attribute used to store system id.
SecuritySystemIdField - Document field to get the system ID from. 
Lets the system ID be specified on a per-document basis. Only used if
SecuritySystemID is not set
SecurityDocId - FDS document attribute used as object id in the content storage used
to identify the document the ACL is to be extracted for (using url if nothing specified).]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="DocumentSecurityWin" type="general" hidden="0">
      <load module="processors.DocumentSecurity" class="DocumentSecurity"/>
      <config>
        <param name="DefaultSid" value="999failed" type="str"/>
        <param name="SecurityAttr" value="docacl" type="str"/>
        <param name="SecurityDocId" value="" type="str"/>
        <param name="SecuritySystemAttr" value="docaclsystemid" type="str"/>
        <param name="SecuritySystemID" value="win" type="str"/>
      </config>
      <description><![CDATA[Adds document related security info
The security document processor accesses the security information
stored related to each document with collection using the security
API (Fast_SECAPI). The document related security info retrieved
from the security API is stored and indexed with the index. Search
front-ends implemented with security can the filter the search
result based on the access rights of the searching user.
DefaultSid - Default protection level for the document
SecurityAttr - Document attribute used to keep security info.
SecuritySystemID - Prefix used to identify the input source (three letter code as 'ora' (oracle), 'dmt' (documentum).
SystemAttr - Document attribute used to store system id.
SecurityDocId - Document attribute used as key to identify document (default URL).]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="DocumentStorer" type="general" hidden="0">
      <load module="processors.Persistence" class="DocumentStorer"/>
      <config>
        <param name="Attributes" value="" type="str"/>
        <param name="Replace" value="0" type="int"/>
        <param name="Service" value="datamanager/cache" type="str"/>
        <param name="Table" value="documents" type="str"/>
        <param name="TimeStamp" value="timestamp" type="str"/>
      </config>
      <description><![CDATA[Store documents in global storage
The document is stored in the Data Management system on a Cache Manager. The key of the record set is 'docid - collection'. If Attributes is empty, the document is stored as DocML in the 'document' string field. Otherwise, the named attributes are stored in the same named fields for the attributes present per document. Integer and string values are stored in respectively typed record fields. Other value types are converted to a string and stored as a string field. If the string conversion fails, the attribute is silently ignored.
If TimeStamp is set, the value names a record field that will get the current time (integer field, seconds since the epoch). The time stamp is also recorded in the document log, thus enabling the tracing from a document log to the stored document. The time stamp appears before an attribute with the same name, if any.
The service name can be specified so that the output can go to alternative cache managers handling e.g. only document analysis output.
If Replace is 0 (default), the record is appended to previous records in the cache manager. Otherwise, if Replace != 0, the new record replaces the old record.
The attributes can be extracted from the table at some later stage
for off-line cross-document (global) analysis.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="DukeInspector" type="general" hidden="0">
      <load module="processors.DukeInspector" class="DukeInspector"/>
      <config>
        <param name="fixml-sink" value="fixml_sink" type="str"/>
        <param name="input" value="title body xml" type="str"/>
      </config>
      <description><![CDATA[Prints the content of a document field's dukes
]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="DumpAttr" type="general" hidden="0">
      <load module="processors.DumpAttr" class="DumpAttr"/>
      <config>
        <param name="Attribute" value="companycity" type="str"/>
        <param name="LogFile" value="www/DumpAttr.txt" type="str"/>
      </config>
      <description><![CDATA[
        Custom Stage to dump html attribute to a file log.
    
]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="DumpHtmlAttr" type="general" hidden="0">
      <load module="processors.DumpHtmlAttr" class="DumpHtmlAttr"/>
      <config>
        <param name="LogFile" value="www/DumpHtmlAttr.html" type="str"/>
      </config>
      <description><![CDATA[
        Custom Stage to dump html attribute to a file log.
    
]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="DuplicatesDeleterMultivalue" type="general" hidden="0">
      <load module="processors.DuplicatesDeleterMultivalue" class="DuplicatesDeleterMultivalue"/>
      <config>
        <param name="Input" value="" type="str"/>
        <param name="Output" value="" type="str"/>
        <param name="Separator" value="|" type="str"/>
      </config>
      <description><![CDATA[Delete duplicates values from a multivalue field
Also removes additional separators for empty values]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCODuplicateDeleterIDT" type="general" hidden="0">
      <load module="processors.DuplicatesDeleterMultivalue" class="DuplicatesDeleterMultivalue"/>
      <config>
        <param name="Input" value="subjectname subjectcity subjectstate subjectcountry prodservicedesc statute topic violation institutiontype consumeragerange associatedcompanycity associatedcompanycountry associatedcompanynamenav associatedcompanystate associatedcompanytype institutionpsc institutionvc institutionsc consumercity consumerstate consumerzip thefttype primarycompanyzip subjecturl subjectemaildomain subjectbasename associatedcompanybasenamenav" type="str"/>
        <param name="Output" value="subjectname subjectcity subjectstate subjectcountry prodservicedescnav statutenav topicnav violationnav institutiontypenav consumeragerangenav associatedcompanycitynav associatedcompanycountrynav associatedcompanynamenav associatedcompanystatenav associatedcompanytypenav institutionpscnav institutionvcnav institutionscnav consumercitynav consumerstatenav consumerzipnav thefttypenav primarycompanyzipnav subjecturl subjectemaildomain subjectbasename associatedcompanybasenamenav" type="str"/>
        <param name="Separator" value="|" type="str"/>
      </config>
      <description><![CDATA[Delete duplicates values from a multivalue field
Also removes additional separators for empty values]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCODuplicateDeleterIDT2" type="general" hidden="0">
      <load module="processors.DuplicatesDeleterMultivalue" class="DuplicatesDeleterMultivalue"/>
      <config>
        <param name="Input" value="prodservicedescnav statutenav topicnav violationnav institutiontypenav consumeragerangenav associatedcompanycitynav associatedcompanycountrynav associatedcompanynamenav associatedcompanystatenav associatedcompanytypenav institutionpscnav institutionvcnav institutionscnav consumercitynav consumerstatenav consumerzipnav thefttypenav primarycompanyzipnav  " type="str"/>
        <param name="Output" value="prodservicedescnav statutenav topicnav violationnav institutiontypenav consumeragerangenav associatedcompanycitynav associatedcompanycountrynav associatedcompanynamenav associatedcompanystatenav associatedcompanytypenav institutionpscnav institutionvcnav institutionscnav consumercitynav consumerstatenav consumerzipnav thefttypenav primarycompanyzipnav  " type="str"/>
        <param name="Separator" value="|" type="str"/>
      </config>
      <description><![CDATA[Delete duplicates values from a multivalue field
Also removes additional separators for empty values]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCODuplicatesDeleter" type="general" hidden="0">
      <load module="processors.DuplicatesDeleterMultivalue" class="DuplicatesDeleterMultivalue"/>
      <config>
        <param name="Input" value="subjectname subjectcity subjectstate subjectcountry prodservicedesc statute topic violation institutiontype consumeragerange subjectphonenav consumerstate subjecturl subjectemaildomain subjectbasename" type="str"/>
        <param name="Output" value="subjectname subjectcity subjectstate subjectcountry prodservicedescnav statutenav topicnav violationnav institutiontypenav consumeragerangenav subjectphonenav consumerstatenav subjecturl subjectemaildomain subjectbasename" type="str"/>
        <param name="Separator" value="|" type="str"/>
      </config>
      <description><![CDATA[Delete duplicates values from a multivalue field
Also removes additional separators for empty values]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCODuplicatesDeleterDNC" type="general" hidden="0">
      <load module="processors.DuplicatesDeleterMultivalue" class="DuplicatesDeleterMultivalue"/>
      <config>
        <param name="Input" value="prodservicedesc subjectbasename" type="str"/>
        <param name="Output" value="prodservicedescnav subjectbasename" type="str"/>
        <param name="Separator" value="|" type="str"/>
      </config>
      <description><![CDATA[Delete duplicates values from a multivalue field
Also removes additional separators for empty values]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCODuplicatesDeleterNTL" type="general" hidden="0">
      <load module="processors.DuplicatesDeleterMultivalue" class="DuplicatesDeleterMultivalue"/>
      <config>
        <param name="Input" value="prodservicedesc" type="str"/>
        <param name="Output" value="prodservicedescnav" type="str"/>
        <param name="Separator" value="|" type="str"/>
      </config>
      <description><![CDATA[Delete duplicates values from a multivalue field
Also removes additional separators for empty values]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="EncodingNormalizer" type="general" hidden="0">
      <load module="processors.HTML" class="EncodingNormalizer"/>
      <config>
        <param name="Encoding" value="charset" type="str"/>
        <param name="FallbackEncoding" value="iso-8859-1" type="str"/>
        <param name="FallbackInputOutput" value="data:data" type="str"/>
        <param name="Input" value="html" type="str"/>
        <param name="Output" value="html" type="str"/>
        <param name="StrictUTF8Checking" value="1" type="int"/>
      </config>
      <description><![CDATA[Convert encoding for the attribute configured in Input to Output in UTF-8
Encoding is the field that holds the encoding information for a document.
Input is the attribute used as Input for encoding conversion.
Output is the attribute used as Output for the converted content.
FallbackInputOutput is used instead of Input and Output if the attribute defined in Input is not set. Format of this parameter is inputattribute:outputattribute
If conversion fails for the encoding defined in the attribute referenced by Encoding, the processor will assume that the input is encoded in the encoding configured as FallbackEncoding.
If the input is declared as utf-8 and the input contains invalid UTF-8 characters, the input is considered as being FallbackEncoding if StrictUTF8Checking is 1. If this parameter is 0, UTF-8 is accepted and invalid characters are replaced by the replacement character U+FFFD.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="EncodingSubjectngramfield6" type="general" hidden="0">
      <load module="processors.HTML" class="EncodingNormalizer"/>
      <config>
        <param name="Encoding" value="UTF-8" type="str"/>
        <param name="FallbackEncoding" value="iso-8859-1" type="str"/>
        <param name="FallbackInputOutput" value="" type="str"/>
        <param name="Input" value="subjectngramfield6" type="str"/>
        <param name="Output" value="subjectngramfield6" type="str"/>
        <param name="StrictUTF8Checking" value="1" type="int"/>
      </config>
      <description><![CDATA[Convert encoding for the attribute configured in Input to Output in UTF-8
Encoding is the field that holds the encoding information for a document.
Input is the attribute used as Input for encoding conversion.
Output is the attribute used as Output for the converted content.
FallbackInputOutput is used instead of Input and Output if the attribute defined in Input is not set. Format of this parameter is inputattribute:outputattribute
If conversion fails for the encoding defined in the attribute referenced by Encoding, the processor will assume that the input is encoded in the encoding configured as FallbackEncoding.
If the input is declared as utf-8 and the input contains invalid UTF-8 characters, the input is considered as being FallbackEncoding if StrictUTF8Checking is 1. If this parameter is 0, UTF-8 is accepted and invalid characters are replaced by the replacement character U+FFFD.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="EncodingnormalizerSubjectngramfield10" type="general" hidden="0">
      <load module="processors.HTML" class="EncodingNormalizer"/>
      <config>
        <param name="Encoding" value="UTF-8" type="str"/>
        <param name="FallbackEncoding" value="iso-8859-1" type="str"/>
        <param name="FallbackInputOutput" value="" type="str"/>
        <param name="Input" value="subjectngramfield10" type="str"/>
        <param name="Output" value="subjectngramfield10" type="str"/>
        <param name="StrictUTF8Checking" value="1" type="int"/>
      </config>
      <description><![CDATA[Convert encoding for the attribute configured in Input to Output in UTF-8
Encoding is the field that holds the encoding information for a document.
Input is the attribute used as Input for encoding conversion.
Output is the attribute used as Output for the converted content.
FallbackInputOutput is used instead of Input and Output if the attribute defined in Input is not set. Format of this parameter is inputattribute:outputattribute
If conversion fails for the encoding defined in the attribute referenced by Encoding, the processor will assume that the input is encoded in the encoding configured as FallbackEncoding.
If the input is declared as utf-8 and the input contains invalid UTF-8 characters, the input is considered as being FallbackEncoding if StrictUTF8Checking is 1. If this parameter is 0, UTF-8 is accepted and invalid characters are replaced by the replacement character U+FFFD.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="EncodingnormalizerSubjectngramfield12" type="general" hidden="0">
      <load module="processors.HTML" class="EncodingNormalizer"/>
      <config>
        <param name="Encoding" value="UTF-8" type="str"/>
        <param name="FallbackEncoding" value="iso-8859-1" type="str"/>
        <param name="FallbackInputOutput" value="" type="str"/>
        <param name="Input" value="subjectngramfield12" type="str"/>
        <param name="Output" value="subjectngramfield12" type="str"/>
        <param name="StrictUTF8Checking" value="1" type="int"/>
      </config>
      <description><![CDATA[Convert encoding for the attribute configured in Input to Output in UTF-8
Encoding is the field that holds the encoding information for a document.
Input is the attribute used as Input for encoding conversion.
Output is the attribute used as Output for the converted content.
FallbackInputOutput is used instead of Input and Output if the attribute defined in Input is not set. Format of this parameter is inputattribute:outputattribute
If conversion fails for the encoding defined in the attribute referenced by Encoding, the processor will assume that the input is encoded in the encoding configured as FallbackEncoding.
If the input is declared as utf-8 and the input contains invalid UTF-8 characters, the input is considered as being FallbackEncoding if StrictUTF8Checking is 1. If this parameter is 0, UTF-8 is accepted and invalid characters are replaced by the replacement character U+FFFD.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="EncodingnormalizerSubjectngramfield14" type="general" hidden="0">
      <load module="processors.HTML" class="EncodingNormalizer"/>
      <config>
        <param name="Encoding" value="UTF-8" type="str"/>
        <param name="FallbackEncoding" value="iso-8859-1" type="str"/>
        <param name="FallbackInputOutput" value="" type="str"/>
        <param name="Input" value="subjectngramfield14" type="str"/>
        <param name="Output" value="subjectngramfield14" type="str"/>
        <param name="StrictUTF8Checking" value="1" type="int"/>
      </config>
      <description><![CDATA[Convert encoding for the attribute configured in Input to Output in UTF-8
Encoding is the field that holds the encoding information for a document.
Input is the attribute used as Input for encoding conversion.
Output is the attribute used as Output for the converted content.
FallbackInputOutput is used instead of Input and Output if the attribute defined in Input is not set. Format of this parameter is inputattribute:outputattribute
If conversion fails for the encoding defined in the attribute referenced by Encoding, the processor will assume that the input is encoded in the encoding configured as FallbackEncoding.
If the input is declared as utf-8 and the input contains invalid UTF-8 characters, the input is considered as being FallbackEncoding if StrictUTF8Checking is 1. If this parameter is 0, UTF-8 is accepted and invalid characters are replaced by the replacement character U+FFFD.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="EncodingnormalizerSubjectngramfield8" type="general" hidden="0">
      <load module="processors.HTML" class="EncodingNormalizer"/>
      <config>
        <param name="Encoding" value="UTF-8" type="str"/>
        <param name="FallbackEncoding" value="iso-8859-1" type="str"/>
        <param name="FallbackInputOutput" value="" type="str"/>
        <param name="Input" value="subjectngramfield8" type="str"/>
        <param name="Output" value="subjectngramfield8" type="str"/>
        <param name="StrictUTF8Checking" value="1" type="int"/>
      </config>
      <description><![CDATA[Convert encoding for the attribute configured in Input to Output in UTF-8
Encoding is the field that holds the encoding information for a document.
Input is the attribute used as Input for encoding conversion.
Output is the attribute used as Output for the converted content.
FallbackInputOutput is used instead of Input and Output if the attribute defined in Input is not set. Format of this parameter is inputattribute:outputattribute
If conversion fails for the encoding defined in the attribute referenced by Encoding, the processor will assume that the input is encoded in the encoding configured as FallbackEncoding.
If the input is declared as utf-8 and the input contains invalid UTF-8 characters, the input is considered as being FallbackEncoding if StrictUTF8Checking is 1. If this parameter is 0, UTF-8 is accepted and invalid characters are replaced by the replacement character U+FFFD.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOEncodingNormalizer" type="general" hidden="0">
      <load module="processors.HTML" class="EncodingNormalizer"/>
      <config>
        <param name="Encoding" value="charset" type="str"/>
        <param name="FallbackEncoding" value="iso-8859-1" type="str"/>
        <param name="FallbackInputOutput" value="" type="str"/>
        <param name="Input" value="primarycompanyname" type="str"/>
        <param name="Output" value="primarycompanyname" type="str"/>
        <param name="StrictUTF8Checking" value="0" type="int"/>
      </config>
      <description><![CDATA[Convert encoding for the attribute configured in Input to Output in UTF-8
Encoding is the field that holds the encoding information for a document.
Input is the attribute used as Input for encoding conversion.
Output is the attribute used as Output for the converted content.
FallbackInputOutput is used instead of Input and Output if the attribute defined in Input is not set. Format of this parameter is inputattribute:outputattribute
If conversion fails for the encoding defined in the attribute referenced by Encoding, the processor will assume that the input is encoded in the encoding configured as FallbackEncoding.
If the input is declared as utf-8 and the input contains invalid UTF-8 characters, the input is considered as being FallbackEncoding if StrictUTF8Checking is 1. If this parameter is 0, UTF-8 is accepted and invalid characters are replaced by the replacement character U+FFFD.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="EntityNormalizer" type="general" hidden="0">
      <load module="processors.EntityNormalizer" class="EntityNormalizer"/>
      <config>
        <param name="Attribute" value="companies locations people" type="str"/>
        <param name="Separator" value=";" type="str"/>
      </config>
      <description><![CDATA[EntityNormalizer

               Normalizes the <Separator>-separated entities in <Attribute>. Mostly it is used 
               for cleansing navigators, e.g. the companies navigator. 
               A cleansed companies navigator should only contain "Procter & Gamble Corp.;
               Microsoft". This will be done along all processed documents.
               You can cleanse as many attributes as you want. Join multiple entries 
               with a space in <Attribute>.
               Entities are separated by <Separator>
            

               You can determine stopwords (like 'inc', 'AG', 'Corp', ... in companies) in 
               $FASTSEARCH/resources/entitynormalizer/ENstopwords. Stopwords are case insensitive. If 
               you start the line with '@' then you can use Python-style regular expressions.
            

               Additionally you can map keywords to phrases in the form "<keyword,...> <phrase>" 
               like 'fast,search,transfer FAST Search & Transfer' 
               which means, that each entity that contains 'fast' and 'search' and 'transfer' in this order will
               end up to 'FAST Search & Transfer'. The mappings are stored in 
               $FASTSEARCH/resources/entitynormalizer/ENmappings. Keywords are case insensitive. If 
               you start the line with '@' then you can use Python-style regular expressions.
            

               Entities which don't match to that rules will be catched in the way that the first occurrence will 
               be the one which is taken for all other matches. Two entity match to each other if their tokens match
               (solely word characters, lowercased). Example: 'Colgate-Palmolive' matches to 'Colgate Palmolive'. 
               If 'Corp' is defined as a stop word then it matches to 'Colgate Palmolive Corp.' as well.
            

               All entities are stored by the Cache Manager. If you want to clear the entity table and start from 
               scratch, just remove the values at the command line with "$FASTSEARCH/bin/cmctrl remove ENentities".
            ]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOEntityNormalizer" type="general" hidden="0">
      <load module="processors.EntityNormalizer" class="EntityNormalizer"/>
      <config>
        <param name="Attribute" value="companies subjectname" type="str"/>
        <param name="Separator" value="|" type="str"/>
      </config>
      <description><![CDATA[EntityNormalizer
               Normalizes the &amp;amp;lt;Separator&amp;amp;gt;-separated entities in &amp;amp;lt;Attribute&amp;amp;gt;. Mostly it is used 
               for cleansing navigators, e.g. the companies navigator. 
               A cleansed companies navigator should only contain &amp;amp;quot;Procter &amp;amp;amp; Gamble Corp.;
               Microsoft&amp;amp;quot;. This will be done along all processed documents.
               You can cleanse as many attributes as you want. Join multiple entries 
               with a space in &amp;amp;lt;Attribute&amp;amp;gt;.
               Entities are separated by &amp;amp;lt;Separator&amp;amp;gt;
               You can determine stopwords (like &amp;amp;#039;inc&amp;amp;#039;, &amp;amp;#039;AG&amp;amp;#039;, &amp;amp;#039;Corp&amp;amp;#039;, ... in companies) in 
               $FASTSEARCH/resources/entitynormalizer/ENstopwords. Stopwords are case insensitive. If 
               you start the line with &amp;amp;#039;@&amp;amp;#039; then you can use Python-style regular expressions.
               Additionally you can map keywords to phrases in the form &amp;amp;quot;&amp;amp;lt;keyword,...&amp;amp;gt; &amp;amp;lt;phrase&amp;amp;gt;&amp;amp;quot; 
               like &amp;amp;#039;fast,search,transfer FAST Search &amp;amp;amp; Transfer&amp;amp;#039; 
               which means, that each entity that contains &amp;amp;#039;fast&amp;amp;#039; and &amp;amp;#039;search&amp;amp;#039; and &amp;amp;#039;transfer&amp;amp;#039; in this order will
               end up to &amp;amp;#039;FAST Search &amp;amp;amp; Transfer&amp;amp;#039;. The mappings are stored in 
               $FASTSEARCH/resources/entitynormalizer/ENmappings. Keywords are case insensitive. If 
               you start the line with &amp;amp;#039;@&amp;amp;#039; then you can use Python-style regular expressions.
               Entities which don&amp;amp;#039;t match to that rules will be catched in the way that the first occurrence will 
               be the one which is taken for all other matches. Two entity match to each other if their tokens match
               (solely word characters, lowercased). Example: &amp;amp;#039;Colgate-Palmolive&amp;amp;#039; matches to &amp;amp;#039;Colgate Palmolive&amp;amp;#039;. 
               If &amp;amp;#039;Corp&amp;amp;#039; is defined as a stop word then it matches to &amp;amp;#039;Colgate Palmolive Corp.&amp;amp;#039; as well.
               All entities are stored by the Cache Manager. If you want to clear the entity table and start from 
               scratch, just remove the values at the command line with &amp;amp;quot;$FASTSEARCH/bin/cmctrl remove ENentities&amp;amp;quot;.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="EntityTeaserGenerator" type="general" hidden="0">
      <load module="processors.linguistics.EntityTeaserGeneration" class="EntityTeaserGenerator"/>
      <config>
        <param name="EntityType" value="company" type="str"/>
        <param name="NormalizeCase" value="1" type="int"/>
        <param name="OutField" value="companyteaser" type="str"/>
        <param name="TeaserEllipsis" value=" ..." type="str"/>
        <param name="TeaserMaxLength" value="120" type="int"/>
        <param name="input" value="title body" type="str"/>
      </config>
      <description><![CDATA[Generate Teaser text from entities

	This processor creates an index field (which can be used as a teaser by the frontend)
	from entity names that have been extracted by one of the "*Extractor" document processors,
	e.g. PersonExtractor, CompanyExtractor. IMPORTANT: This processor must be at a later stage
	in the pipeline than these processors, since it needs the information created by them.
      

	The "EntityType" paramter is the type of the entity to be extracted. This must be the
	same string as the value of the "type" attribute in the *Extractor processors, e.g.
	"company", "person", "location".
      

	The "OutField" paramter denotes the index field to which the results are written.
	Its content is a semicolon separated list of pairs "N S", where N is the normalized
	relevancy of the entity wrt. the document (a float between 0 and 1) and S is the
	name of the entity. For the entity types "company", "person" and "location", there
	exist the pre-defined index fields "companyteaser", "locationteaser" and "personnameteaser".
      

	The "NormalizeCase" paramter indicates whether entity names with different case
	(e.g. fast and FAST) should be mapped to a single entry (the most frequent one).
      

	The "TeaserMaxLength" paramter limits the length of the output string (counted
	in characters). If the string is longer than "TeaserMaxLength", it is truncated
	at the end of the next item, and "TeaserEllipsis" is appended.
      

	The "TeaserEllipsis" paramter denotes a string that is appended if the output string
	exceeds "TeaserMaxLength".
      

	The "input" paramter is a whitespace-separated list of document sections from which the
        teasers are extracted. This should be the same value as the 'input'
        attribute of the *Extractor document processors, e.g. 'title body'.
      ]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="ExternalDataFilterTimeout" type="general" hidden="0">
      <load module="processors.Basic" class="ExternalDataFilterTimeout"/>
      <config>
        <param name="Command" value="" type="str"/>
        <param name="Input" value="data" type="str"/>
        <param name="Output" value="data" type="str"/>
        <param name="Timeout" value="300" type="int"/>
      </config>
      <description><![CDATA[Process an attribute with an external program, subject to a timeout
The external program is run for each document, using the attribute named in the Input configuration parameter as input, and placing the program output in the attribute named in the Output configuration parameter.

The external program must terminate with a successfull exit code (0), within the number of seconds configured in the Timeout configuration parameter. If the configured timeout is exceeded, the program will be forcibly terminated (TerminateProcess()/SIGKILL) and the pipeline will be aborted.

Input and output to the external program will be provided through temporary files on disk. The formatting codes %(input)s and %(output)s must be present in the Command configuration parameter, and will be substituted with the names of the input and output temporary files.

If the external program requires a temporary working directory, one will be created and passed to the program if the %(tmpdir)s formatting code is present in the Command configuration parameter.

Standard Unix shell input and output redirection characters may be used in the Command configuration parameter, for example if the external program takes input from stdin and sends output to stdout.

Errors written to stderr will be picked up and logged if the process exits with an unsuccessfull (non-zero) exit code.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="ExtractEmailDomains" type="general" hidden="0">
      <load module="processors.ExtractEmailDomains" class="ExtractEmailDomains"/>
      <config>
        <param name="EmailDomainField" value="" type="str"/>
        <param name="EmailField" value="" type="str"/>
        <param name="Separator" value="" type="str"/>
      </config>
      <description><![CDATA[Extract email domains from email addresses and copy them to emaildomain field separated by ; 
         		EmailField is the name of the field where emails separated by the separator are stored]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="ExtractFileName" type="general" hidden="0">
      <load module="processors.ExtractFileName" class="ExtractFileName"/>
      <config>
        <param name="Input" value="" type="str"/>
        <param name="Output" value="" type="str"/>
      </config>
      <description><![CDATA[
Extract the file name from a URL.
Example: 
http://localhost/cust_suppt_01.html --> cust_suppt_01.html
    
]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOExtractFileName" type="general" hidden="0">
      <load module="processors.ExtractFileName" class="ExtractFileName"/>
      <config>
        <param name="Input" value="url" type="str"/>
        <param name="Output" value="filename" type="str"/>
      </config>
      <description><![CDATA[Extract the file name from a URL.
Example: 
http://localhost/cust_suppt_01.html --> cust_suppt_01.html]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="FIXMLCopy" type="general" hidden="0">
      <load module="processors.genFIXML" class="FIXMLCopy"/>
      <config>
      </config>
      <description><![CDATA[Copy already generated FIXML from the 'data' attribute to the 'fixml' attribute
Used when refeeding already generated FIXML. Assumes that there is compressed data in the 'data' attribute. Reads this attribute and uncompresses it. Then it copies the first line to 'docid', and the rest into the 'fixml' attribute.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="FIXMLGenerator" type="general" hidden="0">
      <load module="processors.genFIXML" class="FIXMLGenerator"/>
      <config>
        <param name="attributesFirst" value="0" type="int"/>
        <param name="truncateLongFields" value="no" type="str"/>
        <param name="truncateSilently" value="no" type="str"/>
      </config>
      <description><![CDATA[Generate FIXML data and store the result in the 'fixml' attribute.
truncateLongFields paramater: If "yes" then truncate fields that exceeds the max-index-size limit (se "field" element in index-profile DTD). Otherwise drop the document if a field exceeds the max-index-size limit and generate a document processing callback message. 
truncateSilently parameter: If "yes" then truncate fields without any document processing callback message. Otherwise generate a document processing callback message. This parameter is relevant only if truncateLongFields has value "yes".]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="FIXMLReplicator" type="general" hidden="0">
      <load module="processors.FIXMLReplicator" class="FIXMLReplicator"/>
      <config>
        <param name="FeedingProxy" value="" type="str"/>
      </config>
      <description><![CDATA[Replicate processed operations to a remote proxy.
	      
]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="FSAClassifier" type="general" hidden="0">
      <load module="processors.classification.FSAClassification" class="FSAClassifier"/>
      <config>
        <param name="categories" value="linguistics/classification/categories.fsaclassifier.xml" type="str"/>
        <param name="categorylimit" value="10" type="int"/>
        <param name="crossnormalization" value="maximum" type="str"/>
        <param name="input" value="title body" type="str"/>
        <param name="lengthexponent" value="0.0" type="real"/>
        <param name="logfile" value="" type="str"/>
        <param name="lowercase" value="1" type="int"/>
        <param name="output" value="categories" type="str"/>
        <param name="separator" value="#" type="str"/>
        <param name="vocabulary" value="linguistics/classification/vocabulary.fsaclassifier.aut" type="str"/>
      </config>
      <description><![CDATA[Classifies documents using a dictionary-based classifier.
Classifies a document using a dictionary-based classifier. The parameter 'vocabulary' specifies the location of the finite state automaton holding the classification vocabulary, while the parameter 'categories' specifies the location of an XML file holding meta-data about all categories encoded into the automaton.
      
The 'input' parameter lists the textual document fields that should be fed into the classifier, while the 'output' parameter specifies the document field where the set of computed categories should be placed. Categories are listed sorted according to their scores, separated by whatever is specified by the parameter 'separator'. For example, if the classifier computes the list [('sports', 0.75), ('news', 0.5), ('football', 0.45), ('foo', 0.45)] and the separator string is '#', then the output field would be filled with the string 'sports#news#football#foo'.
      
If you want the computed list of (category, score) pairs, the document will be updated with this list, too. The name of the document field holding this list is automatically determined by appending the name '_raw' to the value of the 'output' parameter. If the 'logfile' parameter specifies a filename, the list of (category, score) pairs will be logged to that file. Otherwise, no logging will take place.
      
The parameter 'categorylimit' controls how many categories that are allowed to be listed in the string placed in the document output field. For example, continuing the previous example, a value of 2 would have resulted in the string 'sports#news'. In the case of ties, note that this value is a limit on relative rank and not a limit on the number of categories listed. For example, a value of 3 would have resulted in the string 'sports#news#football#foo', since categories 'football' and 'foo' are tied.
      
The parameter 'lowercase' is a Boolean flag telling whether tokens in the input text should be folded to lowercase before they are compared against the strings in the classification vocabulary. This parameter should have the value 1, unless you have a very specialized application where matching must be done in a case-sensitive manner.
      
After all scores for all categories have been accumulated, the scores can be normalized by the length of the document. This may make the scores more interpretable across documents. All scores are divided by the length of the document raised to a given real-valued exponent. The length of a document is measured as the number of tokens it contains, and the real-valued exponent is given by the parameter 'lengthexponent'. Note than an exponent of 0.0 amount to no length normalization. Also note that mathematically, length normalization only influences the final scores if the parameter 'crossnormalization' described below has the value 'none', since cross-category normalization is done after length normalization.
      
After all scores for all categories have been accumulated, the scores can be normalized across categories. This is controlled by the parameter 'crossnormalization'. Possible values are 'none' (indicating no normalization at all), 'sum' (indicating that the score for a category is divided by the sum of scores over all categories), and 'maximum' (indicating that the score for a category is divided by the maximum score for any category.)
      ]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="FTreeOutput" type="general" hidden="0">
      <load module="processors.FTreeOutput" class="FTreeOutput"/>
      <config>
        <param name="AttributeFileUrl" value="" type="str"/>
        <param name="DefaultRankValue" value="0" type="int"/>
        <param name="PayloadField" value="" type="str"/>
        <param name="RankFieldName" value="hwboost" type="str"/>
      </config>
      <description><![CDATA[Prepares a document for alerting.
Extracts information and creates an FTree, the document
      structure recognized by alerting.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="FastHTMLParser" type="general" hidden="0">
      <load module="processors.FastHTMLParser" class="FastHTMLParser"/>
      <config>
        <param name="HandleBRTag" value="" type="str"/>
        <param name="Handletags" value="" type="str"/>
        <param name="Input" value="html" type="str"/>
        <param name="MaxChunks" value="10000" type="int"/>
        <param name="MaxJoinChunkLen" value="1000" type="int"/>
        <param name="MaxTitleLen" value="100" type="int"/>
        <param name="MergeTableRows" value="off" type="str"/>
        <param name="URL" value="url" type="str"/>
      </config>
      <description><![CDATA[Parse the HTML and extract title, body, headings, links, and metadata.
Extracts document attributes from HTML content.
       After processing, the document will contain the fields
       'title', 'headings', and 'body'.
       It will also contain one field per meta tag extracted
       from the input as well as a 'links' field containing a
       a TextChunks object with anchor text blocks as chunks
       and the corresponding href stored in their meta dictionary.

       If 'HandleBRTag' is set to 'sentence', the parser will not
       consider BR tags to be paragraph-separating (unless there are
       two or more consecutive). The 'Handletags' parameter (if set)
       should contain a string representation of a python dictionary.
       A key in the dictionary specifies a tag, and the corresponding
       string value what the parser should output to the body field
       when such a tag is encountered. E.g {'i': ' '} would cause
       a single space to be printed when a <i> tag is encountered.
       Please note that you might override the parser's handling (though
       not everything can be overrided) of the tags, so use with caution.
       'MergeTableRows' controls whether cells in a table row
       should be merged together into a single paragraph or remain as
       individual paragraphs. Possible values are 'off' and 'on'. 
       NOTE: If a cell contains paragraph breaking markup and not just
       text (e.g. a <div> or <p> tag), that markup will still
       cause a paragraph break between the cells even if merging is enabled.
       'MaxChunks' sets an upper bound for the number of  chunks a document might
       contain before chunks are joined to larger chunks

       'MaxJoinChunkLen' is the maximum size of a chunk that can be joined with another chunk.
       Larger chunks will not be joined with others.

    ]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="FastXMLReader" type="general" hidden="0">
      <load module="processors.FastXMLReader" class="FastXMLReader"/>
      <config>
        <param name="Separator" value="
" type="str"/>
        <param name="XMLSource" value="xml" type="str"/>
      </config>
      <description><![CDATA[Parses key/value xml format
]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="FastXMLReaderData" type="general" hidden="0">
      <load module="processors.FastXMLReader" class="FastXMLReader"/>
      <config>
        <param name="Separator" value=" " type="str"/>
        <param name="XMLSource" value="data" type="str"/>
      </config>
      <description><![CDATA[Parses XML from data attribute]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="Feeder" type="general" hidden="0">
      <load module="processors.Feeder" class="Feeder"/>
      <config>
        <param name="BatchSize" value="200" type="int"/>
        <param name="FeedingProxy" value="" type="str"/>
      </config>
      <description><![CDATA[Send operations to a feeding proxy.
	      
]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="FieldMapper" type="general" hidden="0">
      <load module="processors.FieldMapper" class="FieldMapper"/>
      <config>
        <param name="ConfigFile" value="" type="str"/>
      </config>
      <description><![CDATA[Makes field mapping defined in configuration file
]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="FlashConverter" type="general" hidden="0">
      <load module="processors.FlashConverter" class="FlashConverter"/>
      <config>
        <param name="ExtractLinks" value="0" type="int"/>
      </config>
      <description><![CDATA[Converts the 'data' attribute to HTML for Macromedia Flash (SWF) docs
The ExtractLinks parameter indicates whether hyperlinks should be extracted as anchor tags. It is off by default, because the anchortext is identical to the hyperlink address and of little value for searching.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="FormatDetector" type="general" hidden="0">
      <load module="processors.Format" class="FormatDetector"/>
      <config>
        <param name="ControlCharLimit" value="2" type="int"/>
        <param name="InputMimetype" value="ignore" type="str"/>
        <param name="MaxDetectionBytes" value="1024" type="int"/>
        <param name="NormalizeFormatDescription" value="1" type="int"/>
      </config>
      <description><![CDATA[Detects the format of the 'data' attribute
The format should be correctly identified for all common document types. The 'mime' attribute will be set to the mime-type (for example 'application/vnd.ms-powerpoint'), and the 'format' attribute will be set to a textual description (for example 'Microsoft PowerPoint 97-2003').
For rare document formats which do not have a commonly used mime-type, the 'mime' attribute will be set to 'application/x-stellent-XXXX', where XXXX is a unique four digit ID. The mapping can be changed by adding 'id: mime-type' lines to the optional etc/mimemapping.cfg configuration file.
Documents with an unknown format will get a mime-type of 'application/octet-stream'.
By default, the mime-type set by the Data Source (Crawler, document API, etc) is ignored. If the InputMimetype configuration value is set to 'override', then the Data Source mime-type will be used when present. If it is set to 'fallback', then the Data Source mime-type will be used when the FormatDetector fails to identify the document.
The MaxDetectionBytes configuration value controls the number of bytes checked for binary characters when we check whether an unknown document should be classified as 'text/plain' or 'application/octet-stream'. Use '-1' to check the whole file.
Some plain text documents may contain a few control characters, but still primarily represent text. The ControlCharLimit configuration value decides the maximum number of control characters tolerated before a document is classified as 'application/octet-stream'.
The textual format descriptions output in the 'format' attribute are normally quite verbose, with version numbers of applications, etc. If the NormalizeFormatDescription configuration parameter is enabled, format descriptions will be normalized to more user-friendly variants. For example, 'Microsoft Word 2002', 'Microsoft Word 2003', etc will all be normalized to 'Microsoft Word'.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="GeoScaler" type="general" hidden="0">
      <load module="processors.GeoScaler" class="GeoScaler"/>
      <config>
        <param name="LatitudeAttributes" value="" type="str"/>
        <param name="LongitudeAttributes" value="" type="str"/>
      </config>
      <description><![CDATA[Scales latitude and longitude attributes for geo search.
]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="GeoScaler(template)" type="general" hidden="0">
      <load module="processors.GeoScaler" class="GeoScaler"/>
      <config>
        <param name="LatitudeAttributes" value="" type="str"/>
        <param name="LongitudeAttributes" value="" type="str"/>
      </config>
      <description><![CDATA[Stage template of processor, used to dynamically configure a cluster based processor based upon the index-profile.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="GeoScaler(webcluster)" type="general" hidden="0">
      <load module="processors.GeoScaler" class="GeoScaler"/>
      <config>
        <param name="LatitudeAttributes" value="companylatitude;consumerlatitude" type="str"/>
        <param name="LongitudeAttributes" value="companylongitude;consumerlongitude" type="str"/>
      </config>
      <description><![CDATA[Automatically configured for cluster]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="HTMLExportConverter" type="general" hidden="0">
      <load module="processors.HTMLExportConverter" class="HTMLExportConverter"/>
      <config>
        <param name="Config" value="htmlexport/htmlexport.cfg" type="str"/>
        <param name="OutputAttribute" value="htmlsource" type="str"/>
        <param name="Template" value="htmlexport/template.htm" type="str"/>
        <param name="Timeout" value="300" type="int"/>
      </config>
      <description><![CDATA[Converts the 'data' attribute in any format to HTML and places it in OutputAttribute
Converts the 'data' attribute in any supported file format (PDF, WORD, etc)
    to HTML in the output attribute specified by config parameter 'OutputAttribute'.
    See documentation for  supported formats. 
This processor must be placed somewhere after the FormatDetector
        processor and before ViewSourceEnabler if present.
Sets 'charset' to UTF-8 if not already set. 
if 'mime' is text/html, it simply copies 'data' to OutputAttribute. 
    If 'mime' is application/octet-stream, the document is dropped. 
The 'Template' file is used as a template for the html output.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="HTMLScopifier" type="general" hidden="0">
      <load module="processors.HTMLScopifier" class="HTMLScopifier"/>
      <config>
        <param name="Output" value="xml" type="str"/>
      </config>
      <description><![CDATA[Scopify parsed HTML
Creates a DOM tree from the output of the HTML parser in the Output attribute with the following structure:
<html>
  <meta>
    <title>title text...</title>
    <language>...</language>
    ...
  </meta>
  <body>
    <title>title text...</title>
    <heading>heading text...</heading> 
    ...
    <p>paragraph text...</p>
    ...
  </body> 
  <links>
    <link href="uri...">anchor text...</link>
    ...
  </links>
</html>
All meta data from the HTML corresponding to the meta_* document attributes are inserted in the meta element (without the meta_ prefix), in addition to language, languages, charset, mime, and format. These meta children are also automatically typed, i.e. the "fds_type" attribute is set to string, datetime, int32, or float according to the format of the metadata content. Thus, the XMLScopifier(2) can be configured with TypeAttribute=fds_type for getting typed scopes.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="Hasher" type="general" hidden="0">
      <load module="processors.Hasher" class="Hasher"/>
      <config>
        <param name="Input" value="" type="str"/>
        <param name="Output" value="" type="str"/>
      </config>
      <description><![CDATA[Computes the absolute hash value of an attribute.
]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="HebrewVisualToLogical" type="general" hidden="0">
      <load module="processors.linguistics.VisualToLogical" class="HebrewVisualToLogical"/>
      <config>
        <param name="Debug" value="no" type="str"/>
        <param name="attributes" value="body:body title:title" type="str"/>
        <param name="visual_encodings" value="iso-8859-8 windows-1255-reversed" type="str"/>
      </config>
      <description><![CDATA[Line reversal for Hebrew visual encodings
This processor is triggered by the encodings attribute. If it is set to 
       one of the encodings specified in the parameter 'visual_encodings' it will
       reverse all Hebrew lines in the fields defined in attributes.
       Non-Hebrew words will not be reversed
Note: The encoding windows-1255-reversed included in the default configuration
       is not an officially registered encoding at IANA.
       It is the standard windows encoding in visual order, which appears on some
       pages on the Web, tagged as "visual"
This processor assumes that lines in input are separated by '\n'. Must be placed
       before the tokenizer, but always after the EncodingNormalizer and FastHTMLParser.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="HexUrls" type="general" hidden="0">
      <load module="processors.HexUrls" class="HexUrls"/>
      <config>
        <param name="LinksInput" value="links" type="str"/>
        <param name="TargetUrlsOutput" value="hexlinks" type="str"/>
        <param name="UrlsOutput" value="hexurls" type="str"/>
      </config>
      <description><![CDATA[
      Hex-encodes all the URIs, and the outbound target URIs in the links 
      of the document. This allows exact matches to be done on the URIs,
      and can be used to restrict a search to documents linking to a 
      particular URI.
    
]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="HttpInterface" type="general" hidden="0">
      <load module="processors.HttpInterface" class="HttpInterface"/>
      <config>
      </config>
      <description><![CDATA[A processor that injects an http interface into the server (Do not put in pipeline)
]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="IDSpy" type="general" hidden="0">
      <load module="processors.IDSpy" class="IDSpy"/>
      <config>
        <param name="SpyDumpFile" value="var/log/procserver/idspy_" type="str"/>
      </config>
      <description><![CDATA[This spy stage writes the document id of every document passing
      through the stage to a file. Can be useful when troubleshooting a system,
      especially when running multiple Processor Servers. The filename you
      specify in the parameter 'SpyDumpFile' will be postfixed by the pid (and
      .txt) of the Processor Server process running the stage.
      
]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="ImageURLGenerator" type="general" hidden="0">
      <load module="processors.HTML" class="ImageURLGenerator"/>
      <config>
        <param name="area" value="8000" type="int"/>
        <param name="count" value="1" type="int"/>
        <param name="drop" value="0.25" type="real"/>
        <param name="filter" value="(?i)ad(tech|server|srv|image|banner|click|stream|vert)|/ads?[/.]|\.gif$|bannerfarm" type="str"/>
        <param name="html" value="html" type="str"/>
        <param name="meta" value="0" type="int"/>
        <param name="output" value="images" type="str"/>
        <param name="ratio" value="0.5" type="real"/>
        <param name="separator" value="; " type="str"/>
        <param name="url" value="url" type="str"/>
        <param name="verbose" value="0" type="int"/>
      </config>
      <description><![CDATA[Pulls out URLs of images referenced in IMG tags.
Locates IMG tags and extracts URL to images with verifiable dimensions. The URLs to the top few largest images are stored in the specified output field. Images that are too small or that are too stretched in either direction are filtered away.
    ]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="InformationExtraction" type="general" hidden="0">
      <load module="processors.linguistics.Infexion" class="InformationExtraction"/>
      <config>
        <param name="configfile" value="linguistics/extractors/configuration.nounphraseextractor.xml" type="str"/>
        <param name="input" value="title body" type="str"/>
      </config>
      <description><![CDATA[Linguistic information extraction sub-pipeline.
Linguistic information extraction sub-pipeline.
Extracts patterns by means of linguistic "local grammars".
If morpho-syntactic information is used in these grammars, the POSTagger
stage needs to run beforehand.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="IntegerChecksummer" type="general" hidden="0">
      <load module="processors.Checksum" class="IntegerChecksummer"/>
      <config>
        <param name="attributes" value="" type="str"/>
        <param name="random" value="1" type="int"/>
      </config>
      <description><![CDATA[Calculates checkums over document attributes
The 'attributes' mapping defines a space separated sequence of 
input:output pairs, where output is the MD5 checksum as a 32 bit integer of 
the input.
The 'random' flag determines whether the output attribute shall be set to a
  random number if the input attribute is missing.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="JapaneseVectorizer" type="general" hidden="0">
      <load module="processors.linguistics.JapaneseVectorization" class="JapaneseVectorizer"/>
      <config>
        <param name="boosters" value="linguistics/vectorizer/configuration.boosters.xml" type="str"/>
        <param name="byteguard" value="body:100" type="str"/>
        <param name="clear" value="1" type="int"/>
        <param name="conditional" value="1" type="int"/>
        <param name="deaccentuate" value="1" type="int"/>
        <param name="format" value="[%s, %g]" type="str"/>
        <param name="input" value="title:10:0 body:5:5" type="str"/>
        <param name="matcher" value="linguistics/vectorizer/configuration.matcher_medium_precision.ja.xml" type="str"/>
        <param name="output" value="docvector" type="str"/>
        <param name="stopwords" value="linguistics/vectorizer/configuration.stopwords.ja.xml" type="str"/>
        <param name="threshold" value="0.0" type="real"/>
        <param name="triggerlanguages" value="ja" type="str"/>
        <param name="vectorizer" value="linguistics/vectorizer/configuration.vectorizer.xml" type="str"/>
      </config>
      <description><![CDATA[Computes a document vector
Computes the document vector from the attributes defined in 'input', using
weights and capital letter boosts as defined in the 'input' parameter. The
'input' parameter has the format '[languages:]attribute:weight:boost', where the total
weight for the textual attribute 'attribute' is 'weight' for most words, and the sum of
'weight' and 'boost' for words that satisfy certain boosting criteria. The current boosting
criterion is based on word capitalization considerations: Boost a word that starts with an
uppercase letter, unless the word is in a boosting exception list or starts a sentence.
Boosting details are defined via the 'boosters' parameter, described below.
The attribute named with the 'output' parameter will contain the computed document vector. The document
vector is a string on the format "[foo, 1.0][bar baz, 0.6][zap, 0.12]", where "foo", "bar baz" and "zap" are
key terms in the document, and 1.0, 0.6 and 0.12 are their associated weights, respectively. Exactly
how the vectorizer extracts the key terms and computes their weights depends on how the
overall vectorization system is configured. How the overall vectorizer system is configured is
defined through the XML configuration files named by the 'vectorizer', 'stopwords' and 'boosters'
parameters.

Let X denote the value of the 'output' parameter. The vectorizer will also create a field
'X_navigator' which can be used as the basis for a navigator. The field 'X_navigator' contains
all the terms in X that have a high enough weight relative to the largest weight, separated by "; ".
The 'threshold' parameter defines the weight cutoff. For example, continuing the previous example,
with a threshold value set to 0.5, 'X_navigator' would contain "foo; bar baz".

The 'language' attribute is used to tell the vectorization system which language the text
to process is in. This information is needed by the vectorization system so that it makes use
of the correct stopword files and other language-specific configuration settings. Such
language-specific configuration settings are specified in the XML
configuration files named with 'stopwords' and 'boosters'.
The 'clear' flag signals whether or not the vectorizer's internal data structures
should be cleared between each document. This should be 1, unless the vectorizer
has been configured to be stateful.
The 'deaccentuate' flag signals whether or not accent normalization should be applied
to the tokens.

The 'format' parameter is an output format specification (expressed in C sprintf syntax),
and defines the string representation of the document vector. Note that the the format
specification must be synchronized with other parts of FDS, so that the string
representation can be properly parsed elsewhere when needed. The %s part (or some variant
thereof) must always come before the the %g part (or some variant thereof).

The 'conditional' flag signals whether or not vectorization should be done conditional
on the existence of prior data in the field named by the 'output' parameter. That is, if
this flag has the value 1 and the field named by the 'output' parameter exists and
contains data, then no vectorization is done. This flag is useful in the case where your
pipeline contains multiple vectorizer instances, each differently configured.

The 'byteguard' parameter enables one to specify minimum sizes (measured in bytes) of
text chunks to be fed into the vectorizer. Sizes can be specified on a per field basis,
e.g., "body:100 title:5". Fields listed in 'input' but not in 'byteguard' are assumed
having a minimum size of 0 bytes, i.e., they always get processed by the vectorizer.
]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="KansujiConverter" type="general" hidden="0">
      <load module="processors.linguistics.Kansuji" class="KansujiConverter"/>
      <config>
        <param name="attributes" value="title headings body" type="str"/>
        <param name="conversiontable" value="etc/resources/matching/japanese/kansuji_table.txt" type="str"/>
        <param name="exceptions" value="" type="str"/>
      </config>
      <description><![CDATA[Normalize numerals written in Chinese characters (including
   Japanese Kanji) to their Arabic counterparts.
Fields listed in 'attributes' will be subject to
   normalization.
The 'attributes' parameter specifies the fields to which
   synonyms are added. Field names are separated by blank. If a field
   name is in the form source:target, the synonyms are not added to
   the source field, but written into the field specified as target
   field.
The parameter 'conversiontable' specifies the file name of the
   normalization table. There is usually no need to modify that.
The parameter 'exceptions specifies the file name of an
   exception list in .aut format. Numerals that are substrings of
   strings listed as exceptions will not be normalized
Note that all file names are relative to $FASTSEARCH]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOLanguageAndEncodingDetector" type="general" hidden="0">
      <load module="processors.HTML" class="LanguageAndEncodingDetector"/>
      <config>
        <param name="ContentAttribute" value="subjectaddress" type="str"/>
        <param name="FallbackEncoding" value="iso-8859-1" type="str"/>
        <param name="FallbackLanguage" value="unknown" type="str"/>
        <param name="URLAttribute" value="url" type="str"/>
      </config>
      <description><![CDATA[Automatic language and encoding detection of HTML, plain text or XML in field defined in ContentAttribute
The order of preference is: explicit metadata, content, and URL. If any
of the language or charset attributes are preset, the values are used to sanitize
the detection.
The fields in ContentAttribute are a preference list; only the first field that has content is processed
The FallbackEncoding and FallbackLanguage values are used if none of the above strategies detects an encoding or language, respectively.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LanguageAndEncodingDetector" type="general" hidden="0">
      <load module="processors.HTML" class="LanguageAndEncodingDetector"/>
      <config>
        <param name="ContentAttribute" value="html data" type="str"/>
        <param name="FallbackEncoding" value="iso-8859-1" type="str"/>
        <param name="FallbackLanguage" value="unknown" type="str"/>
        <param name="URLAttribute" value="url" type="str"/>
      </config>
      <description><![CDATA[Automatic language and encoding detection of HTML, plain text or XML in field defined in ContentAttribute
The order of preference is: explicit metadata, content, and URL. If any
of the language or charset attributes are preset, the values are used to sanitize
the detection.
The fields in ContentAttribute are a preference list; only the first field that has content is processed
The FallbackEncoding and FallbackLanguage values are used if none of the above strategies detects an encoding or language, respectively.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LanguageDetectorTextParts" type="general" hidden="0">
      <load module="processors.linguistics.LanguageDetection" class="LanguageDetectorTextParts"/>
      <config>
        <param name="attributes" value="title headings body" type="str"/>
        <param name="configfile" value="etc/langid/config.txt" type="str"/>
        <param name="min_chars" value="60" type="int"/>
        <param name="overwrite_nodelang" value="1" type="int"/>
      </config>
      <description><![CDATA[Assign a language to the text chunks in selected attributes
This processor takes the text encoded in utf-8 and assigns a language to each text chunk.
Languages preset in the languages attribute receive a boost.
The 'attributes' parameter specifies the fields to operate on. Field names are separated by blank.
The 'configfile' parameter defines the name of the configuration file for the language identifier.
If the 'overwrite_nodelang' parameter is set, an existing node language is replaced by the detected language.
'min_chars' is the mininum number of bytes a chunk must contain in order for the detector to take action.
     Very low values lead to wrong language assignments.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LemmaNormalizer" type="general" hidden="0">
      <load module="processors.linguistics.LemmaNormalizer" class="LemmaNormalizer"/>
      <config>
        <param name="attributes" value="xml" type="str"/>
        <param name="configfile" value="" type="str"/>
        <param name="optimization" value="qps" type="str"/>
      </config>
      <description><![CDATA[Normalizer providing lemma forms for variants
Specify all attributes the normalization should be applied to as space-separated list in the attributes parameter. If an attribute is tokenized by a non-default tokenization mode, this mode has to be given in the form attribute:mode.
The parameter configfile should usually not be specified. Then the default tokenization configuration is used.
The parameter optimization can have the value 'indexsize' or 'qps'. It should be set to the same value as the value in the 
         lemmatizer configuration file (etc/LemmatizationConfig.xml)]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="Lemmatizer" type="general" hidden="0">
      <load module="processors.linguistics.Lemmatization" class="Lemmatizer"/>
      <config>
        <param name="attributes" value="title headings body" type="str"/>
        <param name="configfile" value="etc/LemmatizationConfig.xml" type="str"/>
        <param name="fds4compatibility" value="0" type="int"/>
      </config>
      <description><![CDATA[Lemmatize selected attributes
The lemmatization is configured in the 'configfile' for selected languages. Documents whose language(s) - specified in the 'languages' attribute - are in the set of configured languages will be subject to lemmatization. When there is more than one language for a document, the according language codes must be semicolon-separated.
The 'attributes' parameter specifies the fields to which lemmas are added. Field names are separated by blank. If a field name is in the form source:target, the lemmas are not added to the source field, but written into the field specified as target field.
The 'configfile' parameter defines the name of the configuration file for the mappings of languages on dictionary resources; see the comments in that file for further details.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="Lemmatizer(template)" type="general" hidden="0">
      <load module="processors.linguistics.Lemmatization" class="Lemmatizer"/>
      <config>
        <param name="attributes" value="" type="str"/>
        <param name="configfile" value="etc/LemmatizationConfig.xml" type="str"/>
      </config>
      <description><![CDATA[Stage template of processor, used to dynamically configure a cluster based processor based upon the index-profile.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="Lemmatizer(webcluster)" type="general" hidden="0">
      <load module="processors.linguistics.Lemmatization" class="Lemmatizer"/>
      <config>
        <param name="attributes" value="faqquestion faqanswer faqtopic" type="str"/>
        <param name="configfile" value="etc/LemmatizationConfig.xml" type="str"/>
      </config>
      <description><![CDATA[Automatically configured for cluster]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LinkFilter" type="general" hidden="0">
      <load module="processors.LinkFilter" class="LinkFilter"/>
      <config>
        <param name="AnchorTextBlacklistFile" value="AnchorTextBlacklist.txt" type="str"/>
        <param name="AnchorTextSizeLimit" value="500" type="int"/>
        <param name="ExcludeBlankAnchors" value="yes" type="str"/>
        <param name="ExcludeIntraSiteLinks" value="no" type="str"/>
        <param name="ExcludeLinksToSelf" value="yes" type="str"/>
        <param name="IncludeExcludeFile" value="DefaultIncludeExcludes.txt" type="str"/>
        <param name="MaxTermCount" value="6" type="int"/>
        <param name="TopLevelDomainsFile" value="TopLevelDomains.txt" type="str"/>
        <param name="UseAnchorTextBlacklist" value="no" type="str"/>
        <param name="UseAnchorTextSizeLimit" value="yes" type="str"/>
        <param name="UseIncludeExcludeFilter" value="no" type="str"/>
      </config>
      <description><![CDATA[Filters out links based on target URIs and anchor texts.
]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LinkNormalizer" type="general" hidden="0">
      <load module="processors.LinkNormalizer" class="LinkNormalizer"/>
      <config>
      </config>
      <description><![CDATA[Normalizes links, both target URI(href) and anchor text.
      
]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LinkOutput" type="general" hidden="0">
      <load module="processors.LinkOutput" class="LinkOutput"/>
      <config>
        <param name="AnchorServerName" value="fds/anchorserver/node0" type="str"/>
        <param name="ORBCallTimeout" value="2520" type="int"/>
      </config>
      <description><![CDATA[Outputs extracted links to the AnchorServer.
]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LinkRankAnchorTextFormatter" type="general" hidden="0">
      <load module="processors.LinkRankAnchorTextFormatter" class="LinkRankAnchorTextFormatter"/>
      <config>
        <param name="AuthorityScale" value="50" type="int"/>
        <param name="CompletenessOutput" value="canchortext" type="str"/>
        <param name="KeepMax" value="100" type="int"/>
        <param name="KeepMin" value="15" type="int"/>
        <param name="KeepPercentage" value="50" type="int"/>
        <param name="LocalAuthorityExponent" value="0.4" type="real"/>
        <param name="LocalAuthorityFraction" value="0.65" type="real"/>
        <param name="LocalAuthorityScale" value="10000" type="int"/>
        <param name="RecallOutput" value="anchortext" type="str"/>
        <param name="RecallScale" value="16" type="int"/>
      </config>
      <description><![CDATA[
          Assigns weights to the anchor texts and formats them for recall,
          completeness and presentation.
        
]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="WALinkRankAnchorTextFormatter" type="general" hidden="0">
      <load module="processors.LinkRankAnchorTextFormatter" class="LinkRankAnchorTextFormatter"/>
      <config>
        <param name="AuthorityScale" value="50" type="int"/>
        <param name="CompletenessOutput" value="canchortext" type="str"/>
        <param name="KeepMax" value="100" type="int"/>
        <param name="KeepMin" value="5" type="int"/>
        <param name="KeepPercentage" value="30" type="int"/>
        <param name="LocalAuthorityExponent" value="0.4" type="real"/>
        <param name="LocalAuthorityFraction" value="0.65" type="real"/>
        <param name="LocalAuthorityScale" value="10000" type="int"/>
        <param name="RecallOutput" value="anchortext" type="str"/>
        <param name="RecallScale" value="16" type="int"/>
      </config>
      <description><![CDATA[Assigns weights to the anchor texts and formats them for recall,
            completeness and presentation.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LinkStorer" type="general" hidden="0">
      <load module="processors.LinkStorer" class="LinkStorer"/>
      <config>
        <param name="AnchortextBlacklist" value="anchortext_blacklist.txt" type="str"/>
        <param name="LinksInput" value="walinks" type="str"/>
        <param name="RefeedMode" value="0" type="int"/>
        <param name="UseInternal" value="1" type="int"/>
      </config>
      <description><![CDATA[Write links to files. Include equivalence classes and hash map.
]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="WALinkStorer" type="general" hidden="0">
      <load module="processors.LinkStorer" class="LinkStorer"/>
      <config>
        <param name="AnchortextBlacklist" value="anchortext_blacklist.txt" type="str"/>
        <param name="LinksInput" value="walinks" type="str"/>
        <param name="RefeedMode" value="0" type="int"/>
        <param name="UseInternal" value="1" type="int"/>
      </config>
      <description><![CDATA[Write links to files. Include equivalence classes and hash map.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOLowercaseMultivalue" type="general" hidden="0">
      <load module="processors.LowercaseMultivalue" class="LowercaseMultivalue"/>
      <config>
        <param name="Input" value="subjectemaildomain subjecturl" type="str"/>
        <param name="Output" value="subjectemaildomain subjecturl" type="str"/>
        <param name="Separator" value="|" type="str"/>
      </config>
      <description><![CDATA[Lowercase values in multivalue fields
Lowercase values specified in the Input field.
and stores lowercased value into Output field
Examples: LONG BEACH||BOSTON|new york  --&gt; long beach||boston|new york]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LowercaseMultivalue" type="general" hidden="0">
      <load module="processors.LowercaseMultivalue" class="LowercaseMultivalue"/>
      <config>
        <param name="Input" value="" type="str"/>
        <param name="Output" value="" type="str"/>
        <param name="Separator" value="" type="str"/>
      </config>
      <description><![CDATA[
Lowercase values in multivalue fields
Lowercase values specified in the Input field.
and stores lowercased value into Output field
Examples: LONG BEACH||BOSTON|new york  --> long beach||boston|new york
    
]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="MSOfficeHTML" type="general" hidden="0">
      <load module="processors.MSOffice" class="MSOfficeHTML"/>
      <config>
        <param name="input" value="html" type="str"/>
        <param name="output" value="html" type="str"/>
        <param name="strict" value="0" type="int"/>
      </config>
      <description><![CDATA[Replaces embedded Office 2003 XML strings in HTML with extracted text
Currently supports Word and Excel. If strict is true, the document is dropped from the pipeline if the conversion fails.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="MSOfficeXML" type="general" hidden="0">
      <load module="processors.MSOffice" class="MSOfficeXML"/>
      <config>
        <param name="input" value="data" type="str"/>
        <param name="output" value="html" type="str"/>
        <param name="strict" value="1" type="int"/>
      </config>
      <description><![CDATA[Converts Microsoft Office 2003 XML docs to HTML
Currently supports Word and Excel. If strict is true, the document is dropped from the pipeline if the conversion fails.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="MapperTransformer" type="general" hidden="0">
      <load module="processors.MapperTransformer" class="MapperTransformer"/>
      <config>
        <param name="doctypefield" value="doctype" type="str"/>
        <param name="strict" value="1" type="int"/>
      </config>
      <description><![CDATA[Transform numeric attributes to an internal format.
This processor is automatically configured by the system.
The strict parameter determines whether any conversion errors make the
      document fail (strict=1) or logged as warnings in the document log and ignored (strict=0).]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="MatchAnnotator" type="general" hidden="0">
      <load module="processors.linguistics.Matching" class="MatchAnnotator"/>
      <config>
        <param name="attribute" value="search" type="str"/>
        <param name="expression" value="'http://www.google.com/search?q=' + match['base']" type="str"/>
        <param name="initialization" value="" type="str"/>
        <param name="input" value="title body" type="str"/>
        <param name="type" value="" type="str"/>
      </config>
      <description><![CDATA[Enables one to programmatically annotate a match.

Looks at matches of the specified entity type, and enables the match to be augmented with a meta data
attribute that is computed from the match's other meta data attributes. This is done by evaluating a specified
Python expression. The current match by be referenced to as a Python dictionary named 'match'.


The Python expression that computes the annotation may also refer to any modules imported in a given initialization
specification. For example, if the initialization specification is 'import mystuff', then the annotation
expression to evaluate could be, e.g., 'mystuff.mymethod(match)'.


If the expression evaluates to something logically equivalent to 0 (e.g., "" or None), then the meta data attribute
does not get set. The evaluation of the expression is allowed to have side-effects.
]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="AcronymExtractor1" type="general" hidden="0">
      <load module="processors.linguistics.Matching" class="Matcher"/>
      <config>
        <param name="byteguard" value="" type="str"/>
        <param name="dispatch" value="language" type="str"/>
        <param name="filter" value="*:illegal" type="str"/>
        <param name="guard" value="" type="str"/>
        <param name="input" value="title body xml" type="str"/>
        <param name="matcher" value="linguistics/extractors/configuration.acronymextractor.pass1.xml" type="str"/>
        <param name="meta" value="type:semantic" type="str"/>
        <param name="output" value="" type="str"/>
        <param name="phrases" value="0" type="str"/>
        <param name="rename" value="meta:definition" type="str"/>
        <param name="separator" value="; " type="str"/>
        <param name="separator2" value="" type="str"/>
        <param name="type" value="acronym" type="str"/>
      </config>
      <description><![CDATA[Detects acronym definitions.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="AirlineExtractor" type="general" hidden="0">
      <load module="processors.linguistics.Matching" class="Matcher"/>
      <config>
        <param name="byteguard" value="" type="str"/>
        <param name="dispatch" value="language" type="str"/>
        <param name="filter" value="person:intersects *:illegal" type="str"/>
        <param name="guard" value="" type="str"/>
        <param name="input" value="title body xml" type="str"/>
        <param name="matcher" value="linguistics/extractors/configuration.airlineextractor.xml" type="str"/>
        <param name="meta" value="type:semantic" type="str"/>
        <param name="output" value="" type="str"/>
        <param name="phrases" value="0" type="str"/>
        <param name="rename" value="" type="str"/>
        <param name="separator" value="; " type="str"/>
        <param name="separator2" value="" type="str"/>
        <param name="type" value="airline" type="str"/>
      </config>
      <description><![CDATA[Extracts names of airlines.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="CarExtractor" type="general" hidden="0">
      <load module="processors.linguistics.Matching" class="Matcher"/>
      <config>
        <param name="byteguard" value="" type="str"/>
        <param name="dispatch" value="language" type="str"/>
        <param name="filter" value="*:illegal" type="str"/>
        <param name="guard" value="" type="str"/>
        <param name="input" value="title body xml" type="str"/>
        <param name="matcher" value="linguistics/extractors/configuration.carextractor.xml" type="str"/>
        <param name="meta" value="type:semantic" type="str"/>
        <param name="output" value="" type="str"/>
        <param name="phrases" value="0" type="str"/>
        <param name="rename" value="" type="str"/>
        <param name="separator" value="; " type="str"/>
        <param name="separator2" value="" type="str"/>
        <param name="type" value="car" type="str"/>
      </config>
      <description><![CDATA[Extracts names of cars.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="CompanyExtractor1" type="general" hidden="0">
      <load module="processors.linguistics.Matching" class="Matcher"/>
      <config>
        <param name="byteguard" value="" type="str"/>
        <param name="dispatch" value="language" type="str"/>
        <param name="filter" value="airline:intersects company:intersects person:intersects *:illegal" type="str"/>
        <param name="guard" value="" type="str"/>
        <param name="input" value="title body xml" type="str"/>
        <param name="matcher" value="en:linguistics/extractors/configuration.companyextractor.pass1.en.xml de:linguistics/extractors/configuration.companyextractor.pass1.de.xml es:linguistics/extractors/configuration.companyextractor.pass1.es.xml fr:linguistics/extractors/configuration.companyextractor.pass1.fr.xml it:linguistics/extractors/configuration.companyextractor.pass1.it.xml nl:linguistics/extractors/configuration.companyextractor.pass1.nl.xml pt:linguistics/extractors/configuration.companyextractor.pass1.pt.xml ko:linguistics/extractors/configuration.companyextractor.pass1.ko.xml zh-simplified:linguistics/extractors/configuration.companyextractor.pass1.szh.xml no:linguistics/extractors/configuration.companyextractor.pass1.no.xml zh-traditional:linguistics/extractors/configuration.companyextractor.pass1.tzh.xml *:linguistics/extractors/configuration.companyextractor.pass1.en.xml" type="str"/>
        <param name="meta" value="type:semantic" type="str"/>
        <param name="output" value="companies" type="str"/>
        <param name="phrases" value="0" type="str"/>
        <param name="rename" value="meta:ticker" type="str"/>
        <param name="separator" value="; " type="str"/>
        <param name="separator2" value="/" type="str"/>
        <param name="type" value="company" type="str"/>
      </config>
      <description><![CDATA[Extracts names of companies, based on general patterns and dictionaries.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="CompanyExtractorWhiteListAny" type="general" hidden="1">
      <load module="processors.linguistics.Matching" class="Matcher"/>
      <config>
        <param name="byteguard" value="" type="str"/>
        <param name="dispatch" value="language" type="str"/>
        <param name="filter" value="company:intersects *:illegal" type="str"/>
        <param name="guard" value="" type="str"/>
        <param name="input" value="title body xml" type="str"/>
        <param name="matcher" value="*:linguistics/extractors/configuration.companyextractor.whitelist.any.xml" type="str"/>
        <param name="meta" value="type:semantic" type="str"/>
        <param name="output" value="companies" type="str"/>
        <param name="phrases" value="0" type="str"/>
        <param name="rename" value="meta:tobedeleted" type="str"/>
        <param name="separator" value="; " type="str"/>
        <param name="separator2" value="" type="str"/>
        <param name="type" value="company" type="str"/>
      </config>
      <description><![CDATA[Extracts names of companies, based on a whitelist dictionary (any language).]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="CompanyExtractorWhiteListSpecific" type="general" hidden="1">
      <load module="processors.linguistics.Matching" class="Matcher"/>
      <config>
        <param name="byteguard" value="" type="str"/>
        <param name="dispatch" value="language" type="str"/>
        <param name="filter" value="*:illegal" type="str"/>
        <param name="guard" value="" type="str"/>
        <param name="input" value="title body xml" type="str"/>
        <param name="matcher" value="en:linguistics/extractors/configuration.companyextractor.whitelist.en.xml de:linguistics/extractors/configuration.companyextractor.whitelist.de.xml es:linguistics/extractors/configuration.companyextractor.whitelist.es.xml fr:linguistics/extractors/configuration.companyextractor.whitelist.fr.xml it:linguistics/extractors/configuration.companyextractor.whitelist.it.xml nl:linguistics/extractors/configuration.companyextractor.whitelist.nl.xml pt:linguistics/extractors/configuration.companyextractor.whitelist.pt.xml ja:linguistics/extractors/configuration.companyextractor.whitelist.ja.xml ko:linguistics/extractors/configuration.companyextractor.whitelist.ko.xml no:linguistics/extractors/configuration.companyextractor.whitelist.no.xml zh-simplified:linguistics/extractors/configuration.companyextractor.whitelist.szh.xml zh-traditional:linguistics/extractors/configuration.companyextractor.whitelist.tzh.xml *:linguistics/extractors/configuration.companyextractor.whitelist.en.xml" type="str"/>
        <param name="meta" value="type:semantic" type="str"/>
        <param name="output" value="companies" type="str"/>
        <param name="phrases" value="0" type="str"/>
        <param name="rename" value="meta:tobedeleted" type="str"/>
        <param name="separator" value="; " type="str"/>
        <param name="separator2" value="" type="str"/>
        <param name="type" value="company" type="str"/>
      </config>
      <description><![CDATA[Extracts names of companies, based on a whitelist dictionary (language specific).]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="DateExtractor" type="general" hidden="0">
      <load module="processors.linguistics.Matching" class="Matcher"/>
      <config>
        <param name="byteguard" value="" type="str"/>
        <param name="dispatch" value="language" type="str"/>
        <param name="filter" value="*:illegal" type="str"/>
        <param name="guard" value="" type="str"/>
        <param name="input" value="title body xml" type="str"/>
        <param name="matcher" value="en:linguistics/extractors/configuration.dateextractor.en.xml de:linguistics/extractors/configuration.dateextractor.de.xml es:linguistics/extractors/configuration.dateextractor.es.xml fr:linguistics/extractors/configuration.dateextractor.fr.xml it:linguistics/extractors/configuration.dateextractor.it.xml nl:linguistics/extractors/configuration.dateextractor.nl.xml no:linguistics/extractors/configuration.dateextractor.no.xml pt:linguistics/extractors/configuration.dateextractor.pt.xml ja:linguistics/extractors/configuration.dateextractor.ja.xml ko:linguistics/extractors/configuration.dateextractor.ko.xml zh-traditional:linguistics/extractors/configuration.dateextractor.zh.xml zh-simplified:linguistics/extractors/configuration.dateextractor.zh.xml *:linguistics/extractors/configuration.dateextractor.en.xml" type="str"/>
        <param name="meta" value="type:semantic" type="str"/>
        <param name="output" value="" type="str"/>
        <param name="phrases" value="0" type="str"/>
        <param name="rename" value="" type="str"/>
        <param name="separator" value="; " type="str"/>
        <param name="separator2" value="/" type="str"/>
        <param name="type" value="date" type="str"/>
      </config>
      <description><![CDATA[Extracts dates.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="DegreeExtractor" type="general" hidden="0">
      <load module="processors.linguistics.Matching" class="Matcher"/>
      <config>
        <param name="byteguard" value="" type="str"/>
        <param name="dispatch" value="language" type="str"/>
        <param name="filter" value="location:inside2 *:illegal" type="str"/>
        <param name="guard" value="" type="str"/>
        <param name="input" value="title body xml" type="str"/>
        <param name="matcher" value="linguistics/extractors/configuration.degreeextractor.xml" type="str"/>
        <param name="meta" value="type:semantic" type="str"/>
        <param name="output" value="" type="str"/>
        <param name="phrases" value="0" type="str"/>
        <param name="rename" value="" type="str"/>
        <param name="separator" value="; " type="str"/>
        <param name="separator2" value="" type="str"/>
        <param name="type" value="degree" type="str"/>
      </config>
      <description><![CDATA[Extracts academic degrees.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="EmailExtractor" type="general" hidden="0">
      <load module="processors.linguistics.Matching" class="Matcher"/>
      <config>
        <param name="byteguard" value="" type="str"/>
        <param name="dispatch" value="language" type="str"/>
        <param name="filter" value="*:illegal" type="str"/>
        <param name="guard" value="" type="str"/>
        <param name="input" value="title body xml" type="str"/>
        <param name="matcher" value="linguistics/extractors/configuration.emailextractor.xml" type="str"/>
        <param name="meta" value="type:semantic" type="str"/>
        <param name="output" value="emails" type="str"/>
        <param name="phrases" value="0" type="str"/>
        <param name="rename" value="" type="str"/>
        <param name="separator" value="; " type="str"/>
        <param name="separator2" value="/" type="str"/>
        <param name="type" value="email" type="str"/>
      </config>
      <description><![CDATA[Extracts email addresses.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="FilenameExtractor" type="general" hidden="0">
      <load module="processors.linguistics.Matching" class="Matcher"/>
      <config>
        <param name="byteguard" value="" type="str"/>
        <param name="dispatch" value="language" type="str"/>
        <param name="filter" value="email:intersects url:intersects person:intersects acronym:intersects *:illegal" type="str"/>
        <param name="guard" value="" type="str"/>
        <param name="input" value="title body xml" type="str"/>
        <param name="matcher" value="linguistics/extractors/configuration.filenameextractor.xml" type="str"/>
        <param name="meta" value="type:semantic" type="str"/>
        <param name="output" value="" type="str"/>
        <param name="phrases" value="0" type="str"/>
        <param name="rename" value="extension1:extension extension2:extension extension3:extension extension4:extension" type="str"/>
        <param name="separator" value="; " type="str"/>
        <param name="separator2" value="/" type="str"/>
        <param name="type" value="filename" type="str"/>
      </config>
      <description><![CDATA[Extracts filenames.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="ISBNExtractor" type="general" hidden="0">
      <load module="processors.linguistics.Matching" class="Matcher"/>
      <config>
        <param name="byteguard" value="" type="str"/>
        <param name="dispatch" value="language" type="str"/>
        <param name="filter" value="*:illegal" type="str"/>
        <param name="guard" value="" type="str"/>
        <param name="input" value="title body xml" type="str"/>
        <param name="matcher" value="linguistics/extractors/configuration.isbnextractor.xml" type="str"/>
        <param name="meta" value="type:semantic" type="str"/>
        <param name="output" value="" type="str"/>
        <param name="phrases" value="0" type="str"/>
        <param name="rename" value="" type="str"/>
        <param name="separator" value="; " type="str"/>
        <param name="separator2" value="/" type="str"/>
        <param name="type" value="isbn" type="str"/>
      </config>
      <description><![CDATA[Extracts ISBN numbers.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="JobTitleExtractor" type="general" hidden="0">
      <load module="processors.linguistics.Matching" class="Matcher"/>
      <config>
        <param name="byteguard" value="" type="str"/>
        <param name="dispatch" value="language" type="str"/>
        <param name="filter" value="*:illegal" type="str"/>
        <param name="guard" value="" type="str"/>
        <param name="input" value="title body xml" type="str"/>
        <param name="matcher" value="linguistics/extractors/configuration.jobtitleextractor.en.xml" type="str"/>
        <param name="meta" value="type:semantic" type="str"/>
        <param name="output" value="" type="str"/>
        <param name="phrases" value="0" type="str"/>
        <param name="rename" value="" type="str"/>
        <param name="separator" value="; " type="str"/>
        <param name="separator2" value="" type="str"/>
        <param name="type" value="jobtitle" type="str"/>
      </config>
      <description><![CDATA[Extracts job titles, based on general patterns and dictionaries.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOCityExtractor" type="general" hidden="0">
      <load module="processors.linguistics.Matching" class="Matcher"/>
      <config>
        <param name="byteguard" value="" type="str"/>
        <param name="dispatch" value="language" type="str"/>
        <param name="filter" value="" type="str"/>
        <param name="guard" value="comments" type="str"/>
        <param name="input" value="comments" type="str"/>
        <param name="lazy" value="0" type="int"/>
        <param name="matcher" value="en:linguistics/extractors/configuration.locationextractor.pass1.en.xml de:linguistics/extractors/configuration.locationextractor.pass1.de.xml es:linguistics/extractors/configuration.locationextractor.pass1.es.xml fr:linguistics/extractors/configuration.locationextractor.pass1.fr.xml it:linguistics/extractors/configuration.locationextractor.pass1.it.xml nl:linguistics/extractors/configuration.locationextractor.pass1.nl.xml pt:linguistics/extractors/configuration.locationextractor.pass1.pt.xml *:linguistics/extractors/configuration.locationextractor.pass1.indep.xml" type="str"/>
        <param name="meta" value="type:semantic" type="str"/>
        <param name="output" value="locations" type="str"/>
        <param name="phrases" value="0" type="str"/>
        <param name="rename" value="a:country b:region c:subregion d:class g:coordinates" type="str"/>
        <param name="separator" value="|" type="str"/>
        <param name="separator2" value="/" type="str"/>
        <param name="type" value="location" type="str"/>
      </config>
      <description><![CDATA[Extracts names of geographical locations, based on general patterns and dictionaries.
LMCO NOTES: 
- No filter values since we are not extracting from an attribute from which companies or another entity has extracted entities.
- Input is companycity, we are focusing on this field to extract valid city names.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOCompanyExtractor" type="general" hidden="0">
      <load module="processors.linguistics.Matching" class="Matcher"/>
      <config>
        <param name="byteguard" value="" type="str"/>
        <param name="dispatch" value="language" type="str"/>
        <param name="filter" value="airline:intersects company:intersects person:intersects *:illegal" type="str"/>
        <param name="guard" value="comments" type="str"/>
        <param name="input" value="comments" type="str"/>
        <param name="lazy" value="0" type="int"/>
        <param name="matcher" value="en:linguistics/extractors/configuration.companyextractor.pass1.en.xml de:linguistics/extractors/configuration.companyextractor.pass1.de.xml es:linguistics/extractors/configuration.companyextractor.pass1.es.xml fr:linguistics/extractors/configuration.companyextractor.pass1.fr.xml it:linguistics/extractors/configuration.companyextractor.pass1.it.xml nl:linguistics/extractors/configuration.companyextractor.pass1.nl.xml pt:linguistics/extractors/configuration.companyextractor.pass1.pt.xml *:linguistics/extractors/configuration.companyextractor.pass1.en.xml" type="str"/>
        <param name="meta" value="type:semantic" type="str"/>
        <param name="output" value="companies" type="str"/>
        <param name="phrases" value="0" type="str"/>
        <param name="rename" value="meta:ticker" type="str"/>
        <param name="separator" value="|" type="str"/>
        <param name="separator2" value="/" type="str"/>
        <param name="type" value="company" type="str"/>
      </config>
      <description><![CDATA[Extracts names of companies, based on general patterns and dictionaries.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LocationExtractor1" type="general" hidden="0">
      <load module="processors.linguistics.Matching" class="Matcher"/>
      <config>
        <param name="byteguard" value="" type="str"/>
        <param name="dispatch" value="language" type="str"/>
        <param name="filter" value="airline:intersects company:intersects location:intersects person:intersects university:intersects *:illegal" type="str"/>
        <param name="guard" value="" type="str"/>
        <param name="input" value="title body xml" type="str"/>
        <param name="matcher" value="en:linguistics/extractors/configuration.locationextractor.pass1.en.xml de:linguistics/extractors/configuration.locationextractor.pass1.de.xml es:linguistics/extractors/configuration.locationextractor.pass1.es.xml fr:linguistics/extractors/configuration.locationextractor.pass1.fr.xml it:linguistics/extractors/configuration.locationextractor.pass1.it.xml nl:linguistics/extractors/configuration.locationextractor.pass1.nl.xml pt:linguistics/extractors/configuration.locationextractor.pass1.pt.xml ko:linguistics/extractors/configuration.locationextractor.pass1.ko.xml zh-traditional:linguistics/extractors/configuration.locationextractor.pass1.tzh.xml zh-simplified:linguistics/extractors/configuration.locationextractor.pass1.szh.xml ja:linguistics/extractors/configuration.locationextractor.pass1.ja.xml *:linguistics/extractors/configuration.locationextractor.pass1.indep.xml" type="str"/>
        <param name="meta" value="type:semantic" type="str"/>
        <param name="output" value="locations" type="str"/>
        <param name="phrases" value="0" type="str"/>
        <param name="rename" value="a:country b:region c:subregion d:class g:coordinates" type="str"/>
        <param name="separator" value="; " type="str"/>
        <param name="separator2" value="/" type="str"/>
        <param name="type" value="location" type="str"/>
      </config>
      <description><![CDATA[Extracts names of geographical locations, based on general patterns and dictionaries.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LocationExtractorWhiteListAny" type="general" hidden="0">
      <load module="processors.linguistics.Matching" class="Matcher"/>
      <config>
        <param name="byteguard" value="" type="str"/>
        <param name="dispatch" value="language" type="str"/>
        <param name="filter" value="location:intersects *:illegal" type="str"/>
        <param name="guard" value="" type="str"/>
        <param name="input" value="title body xml" type="str"/>
        <param name="matcher" value="*:linguistics/extractors/configuration.locationextractor.whitelist.any.xml" type="str"/>
        <param name="meta" value="type:semantic" type="str"/>
        <param name="output" value="locations" type="str"/>
        <param name="phrases" value="0" type="str"/>
        <param name="rename" value="meta:tobedeleted" type="str"/>
        <param name="separator" value="; " type="str"/>
        <param name="separator2" value="" type="str"/>
        <param name="type" value="location" type="str"/>
      </config>
      <description><![CDATA[Extracts names of geographical locations, based on a whitelist dictionary (any language).]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LocationExtractorWhiteListSpecific" type="general" hidden="0">
      <load module="processors.linguistics.Matching" class="Matcher"/>
      <config>
        <param name="byteguard" value="" type="str"/>
        <param name="dispatch" value="language" type="str"/>
        <param name="filter" value="*:illegal" type="str"/>
        <param name="guard" value="" type="str"/>
        <param name="input" value="title body xml" type="str"/>
        <param name="matcher" value="*:linguistics/extractors/configuration.locationextractor.whitelist.en.xml en:linguistics/extractors/configuration.locationextractor.whitelist.en.xml de:linguistics/extractors/configuration.locationextractor.whitelist.de.xml es:linguistics/extractors/configuration.locationextractor.whitelist.es.xml fr:linguistics/extractors/configuration.locationextractor.whitelist.fr.xml it:linguistics/extractors/configuration.locationextractor.whitelist.it.xml nl:linguistics/extractors/configuration.locationextractor.whitelist.nl.xml pt:linguistics/extractors/configuration.locationextractor.whitelist.pt.xml ko:linguistics/extractors/configuration.locationextractor.whitelist.ko.xml no:linguistics/extractors/configuration.locationextractor.whitelist.no.xml zh-traditional:linguistics/extractors/configuration.locationextractor.whitelist.tzh.xml zh-simplified:linguistics/extractors/configuration.locationextractor.whitelist.szh.xml" type="str"/>
        <param name="meta" value="type:semantic" type="str"/>
        <param name="output" value="locations" type="str"/>
        <param name="phrases" value="0" type="str"/>
        <param name="rename" value="meta:tobedeleted" type="str"/>
        <param name="separator" value="; " type="str"/>
        <param name="separator2" value="" type="str"/>
        <param name="type" value="location" type="str"/>
      </config>
      <description><![CDATA[Extracts names of geographical locations, based on a whitelist dictionary (language specific).]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="Matcher" type="general" hidden="0">
      <load module="processors.linguistics.Matching" class="Matcher"/>
      <config>
        <param name="byteguard" value="" type="str"/>
        <param name="context" value="language" type="str"/>
        <param name="dispatch" value="language" type="str"/>
        <param name="filter" value="*:illegal" type="str"/>
        <param name="guard" value="" type="str"/>
        <param name="input" value="title body" type="str"/>
        <param name="lazy" value="0" type="int"/>
        <param name="matcher" value="linguistics/extractors/configuration.matcher.xml" type="str"/>
        <param name="meta" value="type:semantic" type="str"/>
        <param name="output" value="matches" type="str"/>
        <param name="phrases" value="0" type="str"/>
        <param name="rename" value="" type="str"/>
        <param name="separator" value="; " type="str"/>
        <param name="separator2" value="" type="str"/>
        <param name="type" value="entity" type="str"/>
      </config>
      <description><![CDATA[Extracts stuff detected by a matcher object.
Given a matcher, extracts entities from the text attributes
defined in 'input'. The attribute named with the 'output' parameter will contain the
extracted entities, if any.

The 'output' parameter also serves as the base name for other attributes that the 
document will be updated with, and that contain various different views of the set
of extracted entities. If the 'output' parameter has the value 'X', then the document
will be updated to contain attributes 'X', 'X_raw' and 'X_counts'. The value of the 'separator'
parameter will be used to separate entities in 'X'. The flat field 'X' is used for
navigation or vectorization purposes, typically.

The 'matcher' parameter names an XML configuration file that defines the type of
matcher to use, and how the matcher is configured to operate. You can specify different
matcher configurations for different languages (or based on any other dispatch attribute), i.e., the
configurations may be provided on a per language basis, e.g., 'en:configuration.english.xml de:en:configuration.german.xml {ja,ko,zh}:configuration.asian.xml *:configuration.fallback.xml'.
Just specifying 'configuration.xml' is considered equivalent to '*:configuration.xml'.

Not all of the detected matches may be accepted, some matches may be rejected because
they somehow "collide" with previously detected matches. The 'filter' parameter lists a set
of types that detected matches needs to be checked against, and how "collisions" are defined
for these types. If a detected match "collides" with a previously identified match of any of the listed types,
then the detected match is rejected. This feature can be used to assign priorities
among matchers. For example, a processor that detects person names might precede a processor
that detects locations, and we may reject a naively detected location (e.g., 'Washington') if
it occurs in the context of a detected name (e.g., 'George Washington').


The 'type' parameter defines the name of the semantic type of the matches, e.g., 'person' or
'location'.  This name will be used in the position table that is consulted by the 'filter'
parameter.


The 'meta' parameter defines a dictionary of meta data that all extracted matches will be
annotated with in the position table.


Depending on the configuration of the underlying matcher object, matches may have extra meta data
associated with them on a per match basis. The default names of these meta data fields
may be overridden and assigned custom names by defining a name mapping in the 'rename' parameter.
Names that are not listed are not overridden, i.e., they are assumed to map to themselves.


Depending on the underlying matcher configuration, the meta data string associated with each returned match
may actually encode several individual pieces of meta data. If this is the case, the value of the
'separator2' parameter may specify a separator used to parse/split the returned meta data string into its
individual components. It is assumed that the returned meta data string encodes an alternating sequence
of key/value pairs, e.g., 'key1/value1/key2/value2'. In this example, the value '/' would be natural to
assign to the 'separator2' parameter.


If no value for the 'output' parameter is given, no output field will be created and only the
position table will be updated. If no value for the 'type' parameter is given, the position table
will neither be consulted nor updated.


If specified, the stage will only be run if the field listed in the 'guard' parameter has a value.

The 'byteguard' parameter enables one to specify minimum sizes (measured in bytes) of
text chunks to be fed into the underlying matcher. Optionally, maximum sizes can be listed, too.
Sizes can be specified on a per field basis, e.g., "body:100:1000 title:5". Fields listed in
'input' but not in 'byteguard' are assumed having a guard tuple of (0, 10000) bytes.


If the 'phrases' parameter is set to 1, then only matches that consist of at least two words will be
copied out into the 'output' field. The 'phrases' parameter can be specified on, e.g., a per
language basis, similar to the 'matcher' parameter.


If the 'lazy' parameter is set to 1, we do lazy loading of the matchers. That is, we don't actually
load the matcher configuration until we process a document that needs the matcher.
]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="MeasurementExtractor" type="general" hidden="0">
      <load module="processors.linguistics.Matching" class="Matcher"/>
      <config>
        <param name="byteguard" value="" type="str"/>
        <param name="dispatch" value="language" type="str"/>
        <param name="filter" value="email:intersects url:intersects filename:intersects ticker:intersects price:intersects *:illegal" type="str"/>
        <param name="guard" value="" type="str"/>
        <param name="input" value="title body xml" type="str"/>
        <param name="matcher" value="linguistics/extractors/configuration.measurementextractor.xml" type="str"/>
        <param name="meta" value="type:semantic" type="str"/>
        <param name="output" value="" type="str"/>
        <param name="phrases" value="0" type="str"/>
        <param name="rename" value="" type="str"/>
        <param name="separator" value="; " type="str"/>
        <param name="separator2" value="" type="str"/>
        <param name="type" value="measurement" type="str"/>
      </config>
      <description><![CDATA[Extracts stuff that is numerically quantified, e.g., technical specifications or other types of measurements.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="OSExtractor" type="general" hidden="0">
      <load module="processors.linguistics.Matching" class="Matcher"/>
      <config>
        <param name="byteguard" value="" type="str"/>
        <param name="dispatch" value="language" type="str"/>
        <param name="filter" value="*:illegal" type="str"/>
        <param name="guard" value="" type="str"/>
        <param name="input" value="title body xml" type="str"/>
        <param name="matcher" value="linguistics/extractors/configuration.osextractor.xml" type="str"/>
        <param name="meta" value="type:semantic" type="str"/>
        <param name="output" value="" type="str"/>
        <param name="phrases" value="0" type="str"/>
        <param name="rename" value="" type="str"/>
        <param name="separator" value="; " type="str"/>
        <param name="separator2" value="/" type="str"/>
        <param name="type" value="os" type="str"/>
      </config>
      <description><![CDATA[Extracts names of computer operating systems.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="ObfuscationPersonExtractor1" type="general" hidden="0">
      <load module="processors.linguistics.Matching" class="Matcher"/>
      <config>
        <param name="byteguard" value="" type="str"/>
        <param name="context" value="" type="str"/>
        <param name="dispatch" value="language" type="str"/>
        <param name="filter" value="person:intersects date:intersects jobtitle:intersects university:intersects *:illegal" type="str"/>
        <param name="guard" value="" type="str"/>
        <param name="input" value="comments" type="str"/>
        <param name="lazy" value="0" type="int"/>
        <param name="matcher" value="en:linguistics/extractors/configuration.personextractor.pass1.en.xml de:linguistics/extractors/configuration.personextractor.pass1.de.xml es:linguistics/extractors/configuration.personextractor.pass1.es.xml fr:linguistics/extractors/configuration.personextractor.pass1.fr.xml it:linguistics/extractors/configuration.personextractor.pass1.it.xml nl:linguistics/extractors/configuration.personextractor.pass1.nl.xml pt:linguistics/extractors/configuration.personextractor.pass1.pt.xml ko:linguistics/extractors/configuration.personextractor.pass1.ko.xml no:linguistics/extractors/configuration.personextractor.pass1.no.xml zh-simplified:linguistics/extractors/configuration.personextractor.pass1.szh.xml zh-traditional:linguistics/extractors/configuration.personextractor.pass1.tzh.xml ja:linguistics/extractors/configuration.personextractor.pass1.ja.xml *:linguistics/extractors/configuration.personextractor.pass1.en.xml" type="str"/>
        <param name="meta" value="type:semantic" type="str"/>
        <param name="output" value="personnames" type="str"/>
        <param name="phrases" value="{ja,ko,zh-traditional,zh-simplified}:0 *:1" type="str"/>
        <param name="rename" value="" type="str"/>
        <param name="separator" value="; " type="str"/>
        <param name="separator2" value="/" type="str"/>
        <param name="type" value="person" type="str"/>
      </config>
      <description><![CDATA[Extracts names of persons, based on general patterns and dictionaries.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="POSTagger" type="general" hidden="0">
      <load module="processors.linguistics.Matching" class="Matcher"/>
      <config>
        <param name="byteguard" value="" type="str"/>
        <param name="dispatch" value="language" type="str"/>
        <param name="filter" value="" type="str"/>
        <param name="guard" value="" type="str"/>
        <param name="input" value="title body xml" type="str"/>
        <param name="matcher" value="de:linguistics/extractors/configuration.postagger.de.xml en:linguistics/extractors/configuration.postagger.en.xml es:linguistics/extractors/configuration.postagger.es.xml fr:linguistics/extractors/configuration.postagger.fr.xml it:linguistics/extractors/configuration.postagger.it.xml nb:linguistics/extractors/configuration.postagger.nb.xml nn:linguistics/extractors/configuration.postagger.nn.xml sv:linguistics/extractors/configuration.postagger.sv.xml pt:linguistics/extractors/configuration.postagger.pt.xml" type="str"/>
      </config>
      <description><![CDATA[adds markup ("part-of-speech tags") for English words, like "V" for verbs and "N" for nouns. Requires that sentence boundary detector runs before. Used by subsequent stages like the npExtractor.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="PersonAffiliationExtractor" type="general" hidden="0">
      <load module="processors.linguistics.Matching" class="Matcher"/>
      <config>
        <param name="byteguard" value="" type="str"/>
        <param name="context" value="url" type="str"/>
        <param name="dispatch" value="language" type="str"/>
        <param name="filter" value="" type="str"/>
        <param name="guard" value="" type="str"/>
        <param name="input" value="body" type="str"/>
        <param name="lazy" value="0" type="int"/>
        <param name="matcher" value="en:linguistics/extractors/configuration.rext.personaffiliationextractor.en.xml" type="str"/>
        <param name="meta" value="type:semantic" type="str"/>
        <param name="output" value="personaffiliation" type="str"/>
        <param name="phrases" value="0" type="str"/>
        <param name="rename" value="" type="str"/>
        <param name="separator" value=";" type="str"/>
        <param name="separator2" value="/" type="str"/>
        <param name="type" value="entity" type="str"/>
      </config>
      <description><![CDATA[Extracts affiliation between a person and a company from text documents.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="PersonExtractor1" type="general" hidden="0">
      <load module="processors.linguistics.Matching" class="Matcher"/>
      <config>
        <param name="byteguard" value="" type="str"/>
        <param name="dispatch" value="language" type="str"/>
        <param name="filter" value="person:intersects date:intersects jobtitle:intersects university:intersects *:illegal" type="str"/>
        <param name="guard" value="" type="str"/>
        <param name="input" value="title body xml" type="str"/>
        <param name="matcher" value="en:linguistics/extractors/configuration.personextractor.pass1.en.xml de:linguistics/extractors/configuration.personextractor.pass1.de.xml es:linguistics/extractors/configuration.personextractor.pass1.es.xml fr:linguistics/extractors/configuration.personextractor.pass1.fr.xml it:linguistics/extractors/configuration.personextractor.pass1.it.xml nl:linguistics/extractors/configuration.personextractor.pass1.nl.xml pt:linguistics/extractors/configuration.personextractor.pass1.pt.xml ko:linguistics/extractors/configuration.personextractor.pass1.ko.xml no:linguistics/extractors/configuration.personextractor.pass1.no.xml zh-simplified:linguistics/extractors/configuration.personextractor.pass1.szh.xml zh-traditional:linguistics/extractors/configuration.personextractor.pass1.tzh.xml ja:linguistics/extractors/configuration.personextractor.pass1.ja.xml *:linguistics/extractors/configuration.personextractor.pass1.en.xml" type="str"/>
        <param name="meta" value="type:semantic" type="str"/>
        <param name="output" value="personnames" type="str"/>
        <param name="phrases" value="{ja,ko,zh-traditional,zh-simplified}:0 *:1" type="str"/>
        <param name="rename" value="" type="str"/>
        <param name="separator" value="; " type="str"/>
        <param name="separator2" value="/" type="str"/>
        <param name="type" value="person" type="str"/>
      </config>
      <description><![CDATA[Extracts names of persons, based on general patterns and dictionaries.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="PersonExtractorWhiteListAny" type="general" hidden="0">
      <load module="processors.linguistics.Matching" class="Matcher"/>
      <config>
        <param name="byteguard" value="" type="str"/>
        <param name="dispatch" value="language" type="str"/>
        <param name="filter" value="person:intersects *:illegal" type="str"/>
        <param name="guard" value="" type="str"/>
        <param name="input" value="title body xml" type="str"/>
        <param name="matcher" value="*:linguistics/extractors/configuration.personextractor.whitelist.any.xml" type="str"/>
        <param name="meta" value="type:semantic" type="str"/>
        <param name="output" value="personnames" type="str"/>
        <param name="phrases" value="0" type="str"/>
        <param name="rename" value="meta:tobedeleted" type="str"/>
        <param name="separator" value="; " type="str"/>
        <param name="separator2" value="" type="str"/>
        <param name="type" value="person" type="str"/>
      </config>
      <description><![CDATA[Extracts names of persons, based on a whitelist dictionary (any language).]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="PersonExtractorWhiteListSpecific" type="general" hidden="0">
      <load module="processors.linguistics.Matching" class="Matcher"/>
      <config>
        <param name="byteguard" value="" type="str"/>
        <param name="dispatch" value="language" type="str"/>
        <param name="filter" value="*:illegal" type="str"/>
        <param name="guard" value="" type="str"/>
        <param name="input" value="title body xml" type="str"/>
        <param name="matcher" value="en:linguistics/extractors/configuration.personextractor.whitelist.en.xml de:linguistics/extractors/configuration.personextractor.whitelist.de.xml es:linguistics/extractors/configuration.personextractor.whitelist.es.xml fr:linguistics/extractors/configuration.personextractor.whitelist.fr.xml it:linguistics/extractors/configuration.personextractor.whitelist.it.xml nl:linguistics/extractors/configuration.personextractor.whitelist.nl.xml pt:linguistics/extractors/configuration.personextractor.whitelist.pt.xml ko:linguistics/extractors/configuration.personextractor.whitelist.ko.xml no:linguistics/extractors/configuration.personextractor.whitelist.no.xml zh-simplified:linguistics/extractors/configuration.personextractor.whitelist.szh.xml zh-traditional:linguistics/extractors/configuration.personextractor.whitelist.tzh.xml  *:linguistics/extractors/configuration.personextractor.whitelist.en.xml" type="str"/>
        <param name="meta" value="type:semantic" type="str"/>
        <param name="output" value="personnames" type="str"/>
        <param name="phrases" value="0" type="str"/>
        <param name="rename" value="meta:tobedeleted" type="str"/>
        <param name="separator" value="; " type="str"/>
        <param name="separator2" value="" type="str"/>
        <param name="type" value="person" type="str"/>
      </config>
      <description><![CDATA[Extracts names of persons, based on a whitelist dictionary (language specific).]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="PersonQuotationExtractor" type="general" hidden="0">
      <load module="processors.linguistics.Matching" class="Matcher"/>
      <config>
        <param name="byteguard" value="" type="str"/>
        <param name="context" value="url" type="str"/>
        <param name="dispatch" value="language" type="str"/>
        <param name="filter" value="" type="str"/>
        <param name="guard" value="" type="str"/>
        <param name="input" value="body" type="str"/>
        <param name="lazy" value="0" type="int"/>
        <param name="matcher" value="en:linguistics/extractors/configuration.rext.personquotationextractor.en.xml" type="str"/>
        <param name="meta" value="type:semantic" type="str"/>
        <param name="output" value="personquotation" type="str"/>
        <param name="phrases" value="0" type="str"/>
        <param name="rename" value="" type="str"/>
        <param name="separator" value=";" type="str"/>
        <param name="separator2" value="/" type="str"/>
        <param name="type" value="entity" type="str"/>
      </config>
      <description><![CDATA[Extracts person quotation relations from text documents.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="PhoneNumberExtractor" type="general" hidden="0">
      <load module="processors.linguistics.Matching" class="Matcher"/>
      <config>
        <param name="byteguard" value="" type="str"/>
        <param name="dispatch" value="language" type="str"/>
        <param name="filter" value="*:illegal" type="str"/>
        <param name="guard" value="" type="str"/>
        <param name="input" value="title body xml" type="str"/>
        <param name="matcher" value="linguistics/extractors/configuration.phonenumberextractor.xml" type="str"/>
        <param name="meta" value="type:semantic" type="str"/>
        <param name="output" value="" type="str"/>
        <param name="phrases" value="0" type="str"/>
        <param name="rename" value="" type="str"/>
        <param name="separator" value="; " type="str"/>
        <param name="separator2" value="/" type="str"/>
        <param name="type" value="phone" type="str"/>
      </config>
      <description><![CDATA[Extracts phone numbers.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="PriceExtractor" type="general" hidden="0">
      <load module="processors.linguistics.Matching" class="Matcher"/>
      <config>
        <param name="byteguard" value="" type="str"/>
        <param name="dispatch" value="language" type="str"/>
        <param name="filter" value="*:illegal" type="str"/>
        <param name="guard" value="" type="str"/>
        <param name="input" value="title body xml" type="str"/>
        <param name="matcher" value="linguistics/extractors/configuration.priceextractor.xml" type="str"/>
        <param name="meta" value="type:semantic" type="str"/>
        <param name="output" value="" type="str"/>
        <param name="phrases" value="0" type="str"/>
        <param name="rename" value="" type="str"/>
        <param name="separator" value="; " type="str"/>
        <param name="separator2" value="" type="str"/>
        <param name="type" value="price" type="str"/>
      </config>
      <description><![CDATA[Extracts prices and monetary amounts.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="QuotationExtractor" type="general" hidden="0">
      <load module="processors.linguistics.Matching" class="Matcher"/>
      <config>
        <param name="byteguard" value="" type="str"/>
        <param name="dispatch" value="language" type="str"/>
        <param name="filter" value="*:illegal" type="str"/>
        <param name="guard" value="" type="str"/>
        <param name="input" value="title body xml" type="str"/>
        <param name="matcher" value="linguistics/extractors/configuration.quotationextractor.xml" type="str"/>
        <param name="meta" value="type:semantic" type="str"/>
        <param name="output" value="" type="str"/>
        <param name="phrases" value="0" type="str"/>
        <param name="rename" value="" type="str"/>
        <param name="separator" value="; " type="str"/>
        <param name="separator2" value="" type="str"/>
        <param name="type" value="quotation" type="str"/>
      </config>
      <description><![CDATA[Extracts direct quotations from written or spoken sources.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="SentenceBoundaryDetector" type="general" hidden="0">
      <load module="processors.linguistics.Matching" class="Matcher"/>
      <config>
        <param name="byteguard" value="" type="str"/>
        <param name="dispatch" value="language" type="str"/>
        <param name="filter" value="*:illegal" type="str"/>
        <param name="guard" value="" type="str"/>
        <param name="input" value="title body xml" type="str"/>
        <param name="matcher" value="en:linguistics/extractors/configuration.sentenceboundarydetector.en.xml de:linguistics/extractors/configuration.sentenceboundarydetector.de.xml es:linguistics/extractors/configuration.sentenceboundarydetector.es.xml fr:linguistics/extractors/configuration.sentenceboundarydetector.fr.xml it:linguistics/extractors/configuration.sentenceboundarydetector.it.xml nl:linguistics/extractors/configuration.sentenceboundarydetector.nl.xml pt:linguistics/extractors/configuration.sentenceboundarydetector.pt.xml ko:linguistics/extractors/configuration.sentenceboundarydetector.ko.xml zh-traditional:linguistics/extractors/configuration.sentenceboundarydetector.zh.xml zh-simplified:linguistics/extractors/configuration.sentenceboundarydetector.zh.xml *:linguistics/extractors/configuration.sentenceboundarydetector.en.xml" type="str"/>
        <param name="meta" value="type:structural" type="str"/>
        <param name="output" value="" type="str"/>
        <param name="phrases" value="0" type="str"/>
        <param name="rename" value="" type="str"/>
        <param name="separator" value="; " type="str"/>
        <param name="separator2" value="" type="str"/>
        <param name="type" value="sentence" type="str"/>
      </config>
      <description><![CDATA[Identifies sentence boundaries, so that these can be marked up as scopes.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="StatementExtractor" type="general" hidden="0">
      <load module="processors.linguistics.Matching" class="Matcher"/>
      <config>
        <param name="byteguard" value="" type="str"/>
        <param name="dispatch" value="language" type="str"/>
        <param name="filter" value="*:illegal" type="str"/>
        <param name="guard" value="" type="str"/>
        <param name="input" value="title body xml" type="str"/>
        <param name="matcher" value="linguistics/extractors/configuration.statementextractor.en.xml" type="str"/>
        <param name="meta" value="type:semantic" type="str"/>
        <param name="output" value="" type="str"/>
        <param name="phrases" value="0" type="str"/>
        <param name="rename" value="" type="str"/>
        <param name="separator" value="; " type="str"/>
        <param name="separator2" value="" type="str"/>
        <param name="type" value="statement" type="str"/>
      </config>
      <description><![CDATA[Extracts statements, e.g. quotations/reported speech).]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="StreetExtractor" type="general" hidden="0">
      <load module="processors.linguistics.Matching" class="Matcher"/>
      <config>
        <param name="byteguard" value="" type="str"/>
        <param name="dispatch" value="language" type="str"/>
        <param name="filter" value="*:illegal" type="str"/>
        <param name="guard" value="" type="str"/>
        <param name="input" value="title body xml" type="str"/>
        <param name="matcher" value="linguistics/extractors/configuration.streetextractor.xml" type="str"/>
        <param name="meta" value="type:semantic" type="str"/>
        <param name="output" value="" type="str"/>
        <param name="phrases" value="0" type="str"/>
        <param name="rename" value="" type="str"/>
        <param name="separator" value="; " type="str"/>
        <param name="separator2" value="/" type="str"/>
        <param name="type" value="street" type="str"/>
      </config>
      <description><![CDATA[Extracts names of streets and roads.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="SubstanceExtractor" type="general" hidden="0">
      <load module="processors.linguistics.Matching" class="Matcher"/>
      <config>
        <param name="byteguard" value="" type="str"/>
        <param name="dispatch" value="language" type="str"/>
        <param name="filter" value="*:illegal" type="str"/>
        <param name="guard" value="" type="str"/>
        <param name="input" value="title body xml" type="str"/>
        <param name="matcher" value="linguistics/extractors/configuration.substanceextractor.xml" type="str"/>
        <param name="meta" value="type:semantic" type="str"/>
        <param name="output" value="" type="str"/>
        <param name="phrases" value="0" type="str"/>
        <param name="rename" value="" type="str"/>
        <param name="separator" value="; " type="str"/>
        <param name="separator2" value="/" type="str"/>
        <param name="type" value="substance" type="str"/>
      </config>
      <description><![CDATA[Extracts names of chemicals, drugs and atomic elements.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="TeamExtractor1" type="general" hidden="0">
      <load module="processors.linguistics.Matching" class="Matcher"/>
      <config>
        <param name="byteguard" value="" type="str"/>
        <param name="dispatch" value="language" type="str"/>
        <param name="filter" value="*:illegal" type="str"/>
        <param name="guard" value="" type="str"/>
        <param name="input" value="title body xml" type="str"/>
        <param name="matcher" value="linguistics/extractors/configuration.teamextractor.xml" type="str"/>
        <param name="meta" value="type:semantic" type="str"/>
        <param name="output" value="" type="str"/>
        <param name="phrases" value="0" type="str"/>
        <param name="rename" value="" type="str"/>
        <param name="separator" value="; " type="str"/>
        <param name="separator2" value="/" type="str"/>
        <param name="type" value="team" type="str"/>
      </config>
      <description><![CDATA[Extracts names of US sports teams.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="TickerExtractor1" type="general" hidden="0">
      <load module="processors.linguistics.Matching" class="Matcher"/>
      <config>
        <param name="byteguard" value="" type="str"/>
        <param name="dispatch" value="language" type="str"/>
        <param name="filter" value="acronym:intersects *:illegal" type="str"/>
        <param name="guard" value="" type="str"/>
        <param name="input" value="title body xml" type="str"/>
        <param name="matcher" value="linguistics/extractors/configuration.tickerextractor.pass1.xml" type="str"/>
        <param name="meta" value="type:semantic" type="str"/>
        <param name="output" value="tickers" type="str"/>
        <param name="phrases" value="0" type="str"/>
        <param name="rename" value="" type="str"/>
        <param name="separator" value="; " type="str"/>
        <param name="separator2" value="/" type="str"/>
        <param name="type" value="ticker" type="str"/>
      </config>
      <description><![CDATA[Extracts stock ticker symbols.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="TickerExtractor2" type="general" hidden="0">
      <load module="processors.linguistics.Matching" class="Matcher"/>
      <config>
        <param name="byteguard" value="" type="str"/>
        <param name="dispatch" value="language" type="str"/>
        <param name="filter" value="ticker:intersects acronym:intersects *:illegal" type="str"/>
        <param name="guard" value="tickers" type="str"/>
        <param name="input" value="title body xml" type="str"/>
        <param name="matcher" value="linguistics/extractors/configuration.tickerextractor.pass2.xml" type="str"/>
        <param name="meta" value="type:semantic" type="str"/>
        <param name="output" value="tickers" type="str"/>
        <param name="phrases" value="0" type="str"/>
        <param name="rename" value="" type="str"/>
        <param name="separator" value="; " type="str"/>
        <param name="separator2" value="/" type="str"/>
        <param name="type" value="ticker" type="str"/>
      </config>
      <description><![CDATA[Extracts stock ticker symbols, given that at least one "safe" ticker was previously found.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="TimeExtractor" type="general" hidden="0">
      <load module="processors.linguistics.Matching" class="Matcher"/>
      <config>
        <param name="byteguard" value="" type="str"/>
        <param name="dispatch" value="language" type="str"/>
        <param name="filter" value="*:illegal" type="str"/>
        <param name="guard" value="" type="str"/>
        <param name="input" value="title body xml" type="str"/>
        <param name="matcher" value="linguistics/extractors/configuration.timeextractor.xml" type="str"/>
        <param name="meta" value="type:semantic" type="str"/>
        <param name="output" value="" type="str"/>
        <param name="phrases" value="0" type="str"/>
        <param name="rename" value="" type="str"/>
        <param name="separator" value="; " type="str"/>
        <param name="separator2" value="" type="str"/>
        <param name="type" value="time" type="str"/>
      </config>
      <description><![CDATA[Extracts times.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="URLExtractor" type="general" hidden="0">
      <load module="processors.linguistics.Matching" class="Matcher"/>
      <config>
        <param name="byteguard" value="" type="str"/>
        <param name="dispatch" value="language" type="str"/>
        <param name="filter" value="email:intersects *:illegal" type="str"/>
        <param name="guard" value="" type="str"/>
        <param name="input" value="title body xml" type="str"/>
        <param name="matcher" value="linguistics/extractors/configuration.urlextractor.xml" type="str"/>
        <param name="meta" value="type:semantic" type="str"/>
        <param name="output" value="" type="str"/>
        <param name="phrases" value="0" type="str"/>
        <param name="rename" value="" type="str"/>
        <param name="separator" value="; " type="str"/>
        <param name="separator2" value="" type="str"/>
        <param name="type" value="url" type="str"/>
      </config>
      <description><![CDATA[Extracts URL addresses of various type.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="USNewspaperExtractor" type="general" hidden="0">
      <load module="processors.linguistics.Matching" class="Matcher"/>
      <config>
        <param name="byteguard" value="" type="str"/>
        <param name="dispatch" value="language" type="str"/>
        <param name="filter" value="*:illegal" type="str"/>
        <param name="guard" value="" type="str"/>
        <param name="input" value="title body xml" type="str"/>
        <param name="matcher" value="linguistics/extractors/configuration.usnewspaperextractor.xml" type="str"/>
        <param name="meta" value="type:semantic" type="str"/>
        <param name="output" value="" type="str"/>
        <param name="phrases" value="0" type="str"/>
        <param name="rename" value="" type="str"/>
        <param name="separator" value="; " type="str"/>
        <param name="separator2" value="" type="str"/>
        <param name="type" value="newspaper" type="str"/>
      </config>
      <description><![CDATA[Extracts names of US newspapers.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="USZipCodeExtractor" type="general" hidden="0">
      <load module="processors.linguistics.Matching" class="Matcher"/>
      <config>
        <param name="byteguard" value="" type="str"/>
        <param name="dispatch" value="language" type="str"/>
        <param name="filter" value="*:illegal" type="str"/>
        <param name="guard" value="" type="str"/>
        <param name="input" value="title body xml" type="str"/>
        <param name="matcher" value="linguistics/extractors/configuration.uszipcodeextractor.xml" type="str"/>
        <param name="meta" value="type:semantic" type="str"/>
        <param name="output" value="" type="str"/>
        <param name="phrases" value="0" type="str"/>
        <param name="rename" value="state1:state state2:state" type="str"/>
        <param name="separator" value="; " type="str"/>
        <param name="separator2" value="/" type="str"/>
        <param name="type" value="zipcode" type="str"/>
      </config>
      <description><![CDATA[Extracts US zip codes and relates them to US states.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="UniversityExtractor" type="general" hidden="0">
      <load module="processors.linguistics.Matching" class="Matcher"/>
      <config>
        <param name="byteguard" value="" type="str"/>
        <param name="dispatch" value="language" type="str"/>
        <param name="filter" value="location:intersects company:intersects *:illegal" type="str"/>
        <param name="guard" value="" type="str"/>
        <param name="input" value="title body xml" type="str"/>
        <param name="matcher" value="linguistics/extractors/configuration.universityextractor.xml" type="str"/>
        <param name="meta" value="type:semantic" type="str"/>
        <param name="output" value="" type="str"/>
        <param name="phrases" value="0" type="str"/>
        <param name="rename" value="" type="str"/>
        <param name="separator" value="; " type="str"/>
        <param name="separator2" value="" type="str"/>
        <param name="type" value="university" type="str"/>
      </config>
      <description><![CDATA[Extracts names of universities, colleges and other bodies of higher education.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="UppercaseExtractor" type="general" hidden="0">
      <load module="processors.linguistics.Matching" class="Matcher"/>
      <config>
        <param name="byteguard" value="" type="str"/>
        <param name="dispatch" value="language" type="str"/>
        <param name="filter" value="" type="str"/>
        <param name="guard" value="" type="str"/>
        <param name="input" value="body" type="str"/>
        <param name="matcher" value="linguistics/extractors/configuration.uppercaseextractor.xml" type="str"/>
        <param name="meta" value="" type="str"/>
        <param name="output" value="uppercasedentities" type="str"/>
        <param name="phrases" value="0" type="str"/>
        <param name="rename" value="" type="str"/>
        <param name="separator" value="; " type="str"/>
        <param name="separator2" value="" type="str"/>
        <param name="type" value="" type="str"/>
      </config>
      <description><![CDATA[Extracts presumably interesting entities, based on simple capitalization/punctuation heuristics.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="UttererExtractor" type="general" hidden="0">
      <load module="processors.linguistics.Matching" class="Matcher"/>
      <config>
        <param name="byteguard" value="" type="str"/>
        <param name="dispatch" value="language" type="str"/>
        <param name="filter" value="*:illegal" type="str"/>
        <param name="guard" value="" type="str"/>
        <param name="input" value="title body xml" type="str"/>
        <param name="matcher" value="linguistics/extractors/configuration.uttererextractor.en.xml" type="str"/>
        <param name="meta" value="type:semantic" type="str"/>
        <param name="output" value="" type="str"/>
        <param name="phrases" value="0" type="str"/>
        <param name="rename" value="" type="str"/>
        <param name="separator" value="; " type="str"/>
        <param name="separator2" value="" type="str"/>
        <param name="type" value="utterer" type="str"/>
      </config>
      <description><![CDATA[Extracts utterers of a statement.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="npExtractor0" type="general" hidden="0">
      <load module="processors.linguistics.Matching" class="Matcher"/>
      <config>
        <param name="byteguard" value="" type="str"/>
        <param name="dispatch" value="language" type="str"/>
        <param name="filter" value="" type="str"/>
        <param name="guard" value="" type="str"/>
        <param name="input" value="title body xml" type="str"/>
        <param name="matcher" value="en:linguistics/extractors/configuration.npExtractor.pass0.en.xml de:linguistics/extractors/configuration.npExtractor.pass0.de.xml" type="str"/>
        <param name="meta" value="type:semantic" type="str"/>
        <param name="output" value="nounphrases" type="str"/>
        <param name="phrases" value="0" type="str"/>
        <param name="rename" value="meta:tobedeleted" type="str"/>
        <param name="separator" value="; " type="str"/>
        <param name="separator2" value="" type="str"/>
        <param name="type" value="" type="str"/>
      </config>
      <description><![CDATA[Extracts noun phrases based on a language specific whitelist.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="npExtractor1" type="general" hidden="0">
      <load module="processors.linguistics.Matching" class="Matcher"/>
      <config>
        <param name="byteguard" value="" type="str"/>
        <param name="dispatch" value="language" type="str"/>
        <param name="filter" value="nounphrases:intersects *:illegal" type="str"/>
        <param name="guard" value="" type="str"/>
        <param name="input" value="title body xml" type="str"/>
        <param name="lazy" value="0" type="int"/>
        <param name="matcher" value="en:linguistics/extractors/configuration.npExtractor.pass1.en.xml de:linguistics/extractors/configuration.npExtractor.pass1.de.xml ja:linguistics/extractors/configuration.npExtractor.pass1.ja.xml ko:linguistics/extractors/configuration.npExtractor.pass1.ko.xml pt:linguistics/extractors/configuration.rext.npExtractor.pt.xml" type="str"/>
        <param name="meta" value="type:semantic" type="str"/>
        <param name="output" value="nounphrases" type="str"/>
        <param name="phrases" value="0" type="str"/>
        <param name="rename" value="" type="str"/>
        <param name="separator" value="; " type="str"/>
        <param name="separator2" value="" type="str"/>
        <param name="type" value="" type="str"/>
      </config>
      <description><![CDATA[Extracts noun phrases using built-in grammars for various languages.
It includes stop words and stop phrases to improve the usefulness of the extracted
phrases. Requires that the POSTagger runs before.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="MatcherReplacer" type="general" hidden="0">
      <load module="processors.linguistics.Matching" class="MatcherReplacer"/>
      <config>
        <param name="dispatch" value="language" type="str"/>
        <param name="mappings" value="" type="str"/>
        <param name="matcher" value="linguistics/extractors/configuration.matcher.xml" type="str"/>
        <param name="meta" value="0" type="int"/>
        <param name="sorted" value="0" type="int"/>
      </config>
      <description><![CDATA[Enables one to do matcher-based search-and-replace operations.

Does a search-and-replace operation over a given set of fields, where the matcher dictates what we search for and replace with. The matcher must return non-overlapping matches. Note that this stage invalidates all extra information associated with the input fields, e.g., tokenization information.


The 'mappings' parameters specifies a set of (input, output) field pairs, e.g., "title:newtitle body:newbody". The output field will hold the result of applying the search-and-replace operation to the input field. The fields should not be hierarchical, i.e., DOM trees or scope fields are currently not supported.


We can pass along the value of the 'dispatch' field to the matcher as a context cue. Depending on the matcher type, this can aid the matcher in doing, e.g., language-specific processing.


If the 'sorted' parameter is 1, this means that we are telling the system that the matcher always returns matches sorted left-ro-right. Most matchers do this. If this is set, internal computations can be done a little more efficiently. Setting the parameter to 0 is a safe and conservative default value, as this should always work.


Usually, the detected surface form is replaced by the value of the match's match field. However, if the 'meta' parameter is 1, the detected surface form is replaced by the value of the match's meta field instead.
]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="MergeDocML" type="general" hidden="0">
      <load module="processors.Basic" class="MergeDocML"/>
      <config>
        <param name="Input" value="data" type="str"/>
      </config>
      <description><![CDATA[Merge in attributes from DocML
If the Input attribute is set, it's content is interpreted as DocML and merged with the current document.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="Migration" type="general" hidden="0">
      <load module="processors.Migration" class="Migration"/>
      <config>
        <param name="ConfigFile" value="Migration/MigrationConfig.xml" type="str"/>
        <param name="StackTrace" value="off" type="str"/>
      </config>
      <description><![CDATA[Detetects if data is being sent from the fixmlFeeder and if so, disables all stages not configured to support operation code 'migration'. It then performs FiXML conversion to each document according to the tasks specified in the provided configuration file. The stage can be placed anywhere in the pipeline as long as it comes before the stage RTSOutput
]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="OffensiveContentFilter" type="general" hidden="0">
      <load module="processors.classification.OffensiveContentFilter" class="OffensiveContentFilter"/>
      <config>
        <param name="autfile" value="resources/dictionaries/util/langid/ocf.aut" type="str"/>
        <param name="dropsilently" value="0" type="int"/>
        <param name="dropthreshold" value="30" type="int"/>
        <param name="inputattributes" value="title body" type="str"/>
        <param name="outputattribute" value="ocf_score" type="str"/>
      </config>
      <description><![CDATA[Tags or filters documents according to their offensive content score
The text in the attributes defined in the blank delimited attribute list 'inputattributes' is scanned for offensive content.
The processor computes a score and writes it to the attribute defined in 'outputattribute'.
The dictionary file is indicated by the parameter 'autfile'
If 'dropthreshold' is > 0, the document will be purged from the pipeline if its score exceeds the threshold. A typical value for this attribute is '30'. If 'dropthreshold' is set to '0', the document will not be removed.
The 'dropsilently' boolean parameter should be set to '0' to get a callback message for dropped documents or '1' to drop documents silently (only used if dropthreshold is greater than '0')]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="PDFConverter" type="general" hidden="0">
      <load module="processors.PDFConverter" class="PDFConverter"/>
      <config>
        <param name="Charset" value="" type="str"/>
        <param name="Command" value="" type="str"/>
        <param name="Internal" value="1" type="int"/>
        <param name="Raw" value="1" type="int"/>
        <param name="Timeout" value="300" type="int"/>
      </config>
      <description><![CDATA[Converts the 'data' attribute to HTML for PDF docs
If the 'Internal' parameter is true, the conversion is made inside
    the procserver. If not, the command specified in the 'Command' parameter
    is executed. 'Timeout' specifies how long to wait for the command
    to finish. The charset is set according to the configured value.
    The 'Raw' parameter is only valid in internal mode and specifies whether
    or not to extract text in the same order as it appears in the file.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="PDFConverter-pdftohtml" type="general" hidden="0">
      <load module="processors.PDFConverter" class="PDFConverter"/>
      <config>
        <param name="Charset" value="utf-8" type="str"/>
        <param name="Command" value="pdftohtml -q -stdout -hidden -i -noframes -enc UTF-8 %(input)s &gt; %(output)s" type="str"/>
        <param name="Internal" value="0" type="int"/>
        <param name="Timeout" value="300" type="int"/>
      </config>
      <description><![CDATA[PDF conversion using pdftohtml
The external command configured is used as a filter to convert PDF input to HTML. Sets the charset according to the configured value. This processor uses the pdftohtml program to do the conversion.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="PDFConverter-xpdf" type="general" hidden="0">
      <load module="processors.PDFConverter" class="PDFConverter"/>
      <config>
        <param name="Charset" value="utf-8" type="str"/>
        <param name="Command" value="pdftotext -raw -htmlmeta -nopgbrk -enc UTF-8 %(input)s %(output)s" type="str"/>
        <param name="Internal" value="0" type="int"/>
        <param name="Timeout" value="300" type="int"/>
      </config>
      <description><![CDATA[PDF conversion using pdftotext from the xpdf package
The external command configured is used as a filter to convert PDF input to HTML. Sets the charset according to the configured value. This processor uses the pdftotext program from the xpdf package to do the conversion.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="AcronymExtractor2" type="general" hidden="0">
      <load module="processors.linguistics.Matching" class="PartialMatcher"/>
      <config>
        <param name="base" value="definition" type="str"/>
        <param name="filter" value="acronym:intersects *:illegal" type="str"/>
        <param name="inherit" value="1" type="int"/>
        <param name="input" value="title body xml" type="str"/>
        <param name="meta" value="type:semantic" type="str"/>
        <param name="mode" value="strict" type="str"/>
        <param name="partial" value="base" type="str"/>
        <param name="rejector" value="etc/resources/matching/acronymextractor.rejector.partial.xml" type="str"/>
        <param name="type" value="acronym" type="str"/>
      </config>
      <description><![CDATA[Extracts acronyms, based on the base form of previously detected acronyms.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="CompanyExtractor2" type="general" hidden="0">
      <load module="processors.linguistics.Matching" class="PartialMatcher"/>
      <config>
        <param name="base" value="base" type="str"/>
        <param name="filter" value="company:intersects *:illegal" type="str"/>
        <param name="inherit" value="0" type="int"/>
        <param name="input" value="title body xml" type="str"/>
        <param name="meta" value="type:semantic" type="str"/>
        <param name="mode" value="strict" type="str"/>
        <param name="partial" value="partial" type="str"/>
        <param name="rejector" value="" type="str"/>
        <param name="type" value="company" type="str"/>
      </config>
      <description><![CDATA[Extracts names of companies, based on resolving partial forms.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOCompanyPartialExtractor" type="general" hidden="0">
      <load module="processors.linguistics.Matching" class="PartialMatcher"/>
      <config>
        <param name="base" value="base" type="str"/>
        <param name="filter" value="company:intersects *:illegal" type="str"/>
        <param name="inherit" value="0" type="int"/>
        <param name="input" value="comments" type="str"/>
        <param name="meta" value="type:semantic" type="str"/>
        <param name="mode" value="strict" type="str"/>
        <param name="partial" value="partial" type="str"/>
        <param name="regexlimit" value="" type="str"/>
        <param name="rejector" value="" type="str"/>
        <param name="type" value="company" type="str"/>
      </config>
      <description><![CDATA[Extracts names of companies, based on resolving partial forms.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="ObfuscationPersonExtractor2" type="general" hidden="0">
      <load module="processors.linguistics.Matching" class="PartialMatcher"/>
      <config>
        <param name="base" value="base" type="str"/>
        <param name="filter" value="date:intersects university:intersects person:inside2 *:illegal" type="str"/>
        <param name="inherit" value="0" type="int"/>
        <param name="input" value="comments" type="str"/>
        <param name="meta" value="type:semantic" type="str"/>
        <param name="mode" value="default" type="str"/>
        <param name="partial" value="partial" type="str"/>
        <param name="regexlimit" value="" type="str"/>
        <param name="rejector" value="" type="str"/>
        <param name="type" value="person" type="str"/>
      </config>
      <description><![CDATA[Extracts names of persons, based on resolving partial forms.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="PartialMatcher" type="general" hidden="0">
      <load module="processors.linguistics.Matching" class="PartialMatcher"/>
      <config>
        <param name="base" value="base" type="str"/>
        <param name="filter" value="*:illegal" type="str"/>
        <param name="inherit" value="0" type="int"/>
        <param name="input" value="title body" type="str"/>
        <param name="meta" value="type:semantic" type="str"/>
        <param name="mode" value="default" type="str"/>
        <param name="partial" value="partial" type="str"/>
        <param name="regexlimit" value="20" type="str"/>
        <param name="rejector" value="" type="str"/>
        <param name="type" value="entity" type="str"/>
      </config>
      <description><![CDATA[Resolves partial forms of stuff detected by a matcher object.

Some matchers are configured to detect "full forms", e.g., "John F. Kerry" in the case of a person name matcher.
However, it is often the case that the full form of an entity type is only mentioned once in the document, and that
the most common reference to the entity is a "partial form", e.g., just "Kerry". This class looks at the entries
for a given entity type found in the position table, and, assuming that these are full forms, does a second pass
through the text to also locate the corresponding partial forms.


The 'base' parameter specifies the key into the position table where the base form is kept. The 'partial' parameter
specifies a list of keys into the position table where known partial forms are kept. If no partial forms are
generated from the lookups specified by the 'partial' parameter, partial forms are unless otherwise specified attempted
constructed from the surface forms using a simple heuristic.


The 'rejector' parameter enables one to reference a matcher that can be used to reject or block out unwanted matches.


The 'regexlimit' parameter specifies the maximum size in kilobytes of the regular expression built by the partial matcher can be before it is split
into smaller parts.
]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="PersonExtractor2" type="general" hidden="0">
      <load module="processors.linguistics.Matching" class="PartialMatcher"/>
      <config>
        <param name="base" value="base" type="str"/>
        <param name="filter" value="date:intersects university:intersects person:inside2 *:illegal" type="str"/>
        <param name="inherit" value="0" type="int"/>
        <param name="input" value="title body xml" type="str"/>
        <param name="meta" value="type:semantic" type="str"/>
        <param name="mode" value="default" type="str"/>
        <param name="partial" value="partial" type="str"/>
        <param name="rejector" value="" type="str"/>
        <param name="type" value="person" type="str"/>
      </config>
      <description><![CDATA[Extracts names of persons, based on resolving partial forms.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="TeamExtractor2" type="general" hidden="0">
      <load module="processors.linguistics.Matching" class="PartialMatcher"/>
      <config>
        <param name="base" value="base" type="str"/>
        <param name="filter" value="team:intersects *:illegal" type="str"/>
        <param name="inherit" value="1" type="int"/>
        <param name="input" value="title body xml" type="str"/>
        <param name="meta" value="type:semantic" type="str"/>
        <param name="mode" value="strict" type="str"/>
        <param name="partial" value="partial" type="str"/>
        <param name="rejector" value="" type="str"/>
        <param name="type" value="team" type="str"/>
      </config>
      <description><![CDATA[Extracts partial forms of US sports teams, based on the base form of previously detected teams.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="TickerExtractor3" type="general" hidden="0">
      <load module="processors.linguistics.Matching" class="PartialMatcher"/>
      <config>
        <param name="base" value="base" type="str"/>
        <param name="filter" value="ticker:intersects acronym:intersects *:illegal" type="str"/>
        <param name="inherit" value="0" type="int"/>
        <param name="input" value="title body xml" type="str"/>
        <param name="meta" value="type:semantic" type="str"/>
        <param name="mode" value="default" type="str"/>
        <param name="partial" value="partial" type="str"/>
        <param name="rejector" value="" type="str"/>
        <param name="type" value="ticker" type="str"/>
      </config>
      <description><![CDATA[Extracts stock ticker symbols, given previously identified tickers from other places in the document.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOPhoneticNormalizer" type="general" hidden="0">
      <load module="processors.linguistics.PhoneticNormalizer" class="PhoneticNormalizer"/>
      <config>
        <param name="configuration" value="default:etc/phonetic/phonetic_aggressive.xml:subjectbasenamestrippedphonetic:phonetic4                    default:etc/phonetic/phonetic_medium.xml:subjectbasenamestrippedphonetic:phonetic3                    default:etc/phonetic/phonetic_mild.xml:subjectbasenamestrippedphonetic:phonetic2                   default:etc/phonetic/phonetic_exact.xml:subjectbasenamestrippedphonetic:phonetic1" type="str"/>
      </config>
      <description><![CDATA[Soundex-like phonetic normalizer
    Transforms the content of the fields it is applied to into a
    phonetically normalized representation, according to the rules
    defined in its configuration file. The idea is to map content to a
    canonical form which only preserves the most important phonetic
    information (such as the consonants and core vowels). The
    configuration can be adjusted to the needs of the language it is
    intended to be used on.
    A classical example of phonetic normalization is Soundex, others
    include Koelner Phonetik and Wiener Phonetik (both variants for
    the German language).
    Enter the paths to the configuration files into the
    &amp;amp;amp;amp;amp;amp;amp;quot;configuration&amp;amp;amp;amp;amp;amp;amp;quot; field below (path specifications should
    be relative to your FASTSEARCH root directory). The paths are
    entered as space-separated tuples, where each tuple consists of
    four things: language, path to the configuration file, source
    document field, target document field (these elements are
    separated by colon).]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOPhoneticNormalizerConsumerCity" type="general" hidden="0">
      <load module="processors.linguistics.PhoneticNormalizer" class="PhoneticNormalizer"/>
      <config>
        <param name="configuration" value="default:etc/phonetic/phonetic_aggressive.xml:consumercity:phonetic12                    default:etc/phonetic/phonetic_medium.xml:consumercity:phonetic11                    default:etc/phonetic/phonetic_mild.xml:consumercity:phonetic10                   default:etc/phonetic/phonetic_exact.xml:consumercity:phonetic9" type="str"/>
      </config>
      <description><![CDATA[Soundex-like phonetic normalizer
    Transforms the content of the fields it is applied to into a
    phonetically normalized representation, according to the rules
    defined in its configuration file. The idea is to map content to a
    canonical form which only preserves the most important phonetic
    information (such as the consonants and core vowels). The
    configuration can be adjusted to the needs of the language it is
    intended to be used on.
    A classical example of phonetic normalization is Soundex, others
    include Koelner Phonetik and Wiener Phonetik (both variants for
    the German language).
    Enter the paths to the configuration files into the
    &amp;amp;amp;amp;amp;amp;amp;amp;amp;quot;configuration&amp;amp;amp;amp;amp;amp;amp;amp;amp;quot; field below (path specifications should
    be relative to your FASTSEARCH root directory). The paths are
    entered as space-separated tuples, where each tuple consists of
    four things: language, path to the configuration file, source
    document field, target document field (these elements are
    separated by colon).]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOPhoneticNormalizerSubjectCity" type="general" hidden="0">
      <load module="processors.linguistics.PhoneticNormalizer" class="PhoneticNormalizer"/>
      <config>
        <param name="configuration" value="default:etc/phonetic/phonetic_aggressive.xml:subjectcity:phonetic8                    default:etc/phonetic/phonetic_medium.xml:subjectcity:phonetic7                   default:etc/phonetic/phonetic_mild.xml:subjectcity:phonetic6              default:etc/phonetic/phonetic_exact.xml:subjectcity:phonetic5" type="str"/>
      </config>
      <description><![CDATA[Soundex-like phonetic normalizer
    Transforms the content of the fields it is applied to into a
    phonetically normalized representation, according to the rules
    defined in its configuration file. The idea is to map content to a
    canonical form which only preserves the most important phonetic
    information (such as the consonants and core vowels). The
    configuration can be adjusted to the needs of the language it is
    intended to be used on.
    A classical example of phonetic normalization is Soundex, others
    include Koelner Phonetik and Wiener Phonetik (both variants for
    the German language).
    Enter the paths to the configuration files into the
    &amp;amp;amp;amp;amp;amp;amp;amp;amp;quot;configuration&amp;amp;amp;amp;amp;amp;amp;amp;amp;quot; field below (path specifications should
    be relative to your FASTSEARCH root directory). The paths are
    entered as space-separated tuples, where each tuple consists of
    four things: language, path to the configuration file, source
    document field, target document field (these elements are
    separated by colon).]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="PhoneticNormalizer" type="general" hidden="0">
      <load module="processors.linguistics.PhoneticNormalizer" class="PhoneticNormalizer"/>
      <config>
        <param name="configuration" value="default:etc/phonetic/phonetic_aggressive.xml:personnames:phonetic4                    default:etc/phonetic/phonetic_medium.xml:personnames:phonetic3                    default:etc/phonetic/phonetic_mild.xml:personnames:phonetic2                    default:etc/phonetic/phonetic_exact.xml:personnames:phonetic1" type="str"/>
      </config>
      <description><![CDATA[Soundex-like phonetic normalizer

    Transforms the content of the fields it is applied to into a
    phonetically normalized representation, according to the rules
    defined in its configuration file. The idea is to map content to a
    canonical form which only preserves the most important phonetic
    information (such as the consonants and core vowels). The
    configuration can be adjusted to the needs of the language it is
    intended to be used on.
    

    A classical example of phonetic normalization is Soundex, others
    include Koelner Phonetik and Wiener Phonetik (both variants for
    the German language).
    

    Enter the paths to the configuration files into the
    "configuration" field below (path specifications should
    be relative to your FASTSEARCH root directory). The paths are
    entered as space-separated tuples, where each tuple consists of
    four things: language, path to the configuration file, source
    document field, target document field (these elements are
    separated by colon).
    ]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="PipelineCompleted" type="general" hidden="0">
      <load module="processors.Basic" class="PipelineCompleted"/>
      <config>
        <param name="PostProcess" value="1" type="int"/>
        <param name="PreProcess" value="1" type="int"/>
        <param name="Process" value="1" type="int"/>
      </config>
      <description><![CDATA[Complete processing at a given pipeline stage
Complete processing at a given pipeline stage, given by variables 'PreProcess', 'Process' and 'PostProcess'.  The value 1 indicates that the given stage will be terminated.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOSetProcessingTime" type="general" hidden="0">
      <load module="processors.Basic" class="Programmable"/>
      <config>
        <param name="Init" value="" type="str"/>
        <param name="Program" value="doc.Set('processingtime', time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;))" type="str"/>
      </config>
      <description><![CDATA[Execute any Python code
Execute the Python code in 'Program' where the variable 'doc' is set to the document. The context of that code can be initialized withe the 'Init' code.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOSystemIDToDocacl" type="general" hidden="0">
      <load module="processors.Basic" class="Programmable"/>
      <config>
        <param name="Init" value="" type="str"/>
        <param name="Program" value="doc.Set('docacl', &quot;pri&quot; + doc.GetValue('docacl').replace(&quot; &quot;,&quot; pri&quot;))" type="str"/>
      </config>
      <description><![CDATA[Execute any Python code
Execute the Python code in 'Program' where the variable 'doc' is set to the document. The context of that code can be initialized withe the 'Init' code.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="Programmable" type="general" hidden="0">
      <load module="processors.Basic" class="Programmable"/>
      <config>
        <param name="Init" value="" type="str"/>
        <param name="Program" value="" type="str"/>
      </config>
      <description><![CDATA[Execute any Python code
Execute the Python code in 'Program' where the variable 'doc' is set to the document. The context of that code can be initialized withe the 'Init' code.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="PythonParser" type="general" hidden="0">
      <load module="processors.parsers.PythonParser" class="PythonParser"/>
      <config>
        <param name="Attributes" value="" type="str"/>
        <param name="Strict" value="0" type="int"/>
      </config>
      <description><![CDATA[Make DOM tree of Python docstrings
Parse the source code for a Python module and build a DOM tree of the docstrings without evaluating the code.
The Attributes parameter is a space-separated list of mappings of the form source:path:destination, where the source is the name of the atttribute containing the Python source code, path is an URL used to determine the name of the module, and the destination is the output attribute having the DOM tree.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="RTSOutput" type="search" hidden="0">
      <load module="processors.RTSOutput" class="RTSOutput"/>
      <config>
        <param name="truncateLongFields" value="no" type="str"/>
        <param name="truncateSilently" value="no" type="str"/>
      </config>
      <description><![CDATA[Output operations to the indexer
truncateLongFields paramater: If "yes" then truncate fields that exceeds the max-index-size limit (se "field" element in index-profile DTD). Otherwise drop the document if a field exceeds the max-index-size limit and generate a document processing callback message. 
truncateSilently parameter: If "yes" then truncate fields without any document processing callback message. Otherwise generate a document processing callback message. This parameter is relevant only if truncateLongFields has value "yes".]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="RankDocument" type="general" hidden="0">
      <load module="processors.RankDocument" class="RankDocument"/>
      <config>
        <param name="BoostParameter" value="hwboost" type="str"/>
        <param name="DocRank" value="1500" type="int"/>
        <param name="SiteRank" value="300" type="int"/>
      </config>
      <description><![CDATA[Add contribution to static rank from DocRank and SiteRank
]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="WARankDocument" type="general" hidden="0">
      <load module="processors.RankDocument" class="RankDocument"/>
      <config>
        <param name="BoostParameter" value="hwboost" type="str"/>
        <param name="DocRank" value="1500" type="int"/>
        <param name="SiteRank" value="300" type="int"/>
      </config>
      <description><![CDATA[Add contribution to static rank from DocRank and SiteRank]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="RankTuner" type="general" hidden="0">
      <load module="processors.RankTuning" class="RankTuner"/>
      <config>
        <param name="DefaultBoost" value="10000" type="int"/>
        <param name="QueryBoosts" value="queryboosts" type="str"/>
        <param name="Service" value="datamanager/cache" type="str"/>
      </config>
      <description><![CDATA[Adds rank tuning information
Looks up rank tuning information from the cache manager based on content ids.
Merges the query boost from the cache manager with the values of the attributes listed in QueryBoosts. These attributes must be typed as [(query, type, value)] (see the documentation for more details).]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="ReadEntityDocuments" type="general" hidden="0">
      <load module="processors.ReadEntityDocuments" class="ReadEntityDocuments"/>
      <config>
        <param name="DocIdFieldName" value="contentid" type="str"/>
        <param name="SourceDir" value="path//to//shared//location" type="str"/>
      </config>
      <description><![CDATA[ReadEntityDocuments

               Reads JSON documents with extracted phrases and entities from shared location and populate corresponding FAST fields with extracted entities
            

	        Following fields are populated by this processor
	         - extractedphrases
	         - extcompanies
	         - extamountpaid
	         - extlocations
	         - exturls
            

	    	Documents are identified by the docid in the shared location. For every record there would be one document with entities JSON.
	    	If successfully extracted the document shall be deleted from the shared location. Otherwise the document shall be left there for processing in next iteration.
            ]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="ReadEntityDocumentsIns01" type="general" hidden="0">
      <load module="processors.ReadEntityDocuments" class="ReadEntityDocuments"/>
      <config>
        <param name="DocIdFieldName" value="contentid" type="str"/>
        <param name="SourceDir" value="\\FTCDEVDHFAST02\PhraseRepo" type="str"/>
      </config>
      <description><![CDATA[ReadEntityDocuments
               Reads JSON documents with extracted phrases and entities from shared location and populate corresponding FAST fields with extracted entities
	        Following fields are populated by this processor
	         - extractedphrases
	         - extcompanies
	         - extamountpaid
	         - extlocations
	         - exturls
	    	Documents are identified by the docid in the shared location. For every record there would be one document with entities JSON.
	    	If successfully extracted the document shall be deleted from the shared location. Otherwise the document shall be left there for processing in next iteration.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="ReadEntityFromDB" type="general" hidden="0">
      <load module="processors.ReadEntityFromDB" class="ReadEntityFromDB"/>
      <config>
        <param name="DatabaseName" value="" type="str"/>
        <param name="DocIdFieldName" value="contentid" type="str"/>
        <param name="Password" value="" type="str"/>
        <param name="SQLquery" value="" type="str"/>
        <param name="ServerName" value="" type="str"/>
        <param name="Username" value="" type="str"/>
      </config>
      <description><![CDATA[ReadEntityFromDB

               Reads JSON documents with extracted phrases and entities from PhraseStatus table stored in "results" column
            

	        Following fields are populated by this processor
	         - extractedphrases
	         - extcompanies
	         - extamountpaid
	         - extlocations
	         - exturls
            

	    	Documents are identified by the recordid in the PhraseStatus table. Records are only selected if value for "status" column is set to "completed"
            ]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="ReadEntityFromDBv01" type="general" hidden="0">
      <load module="processors.ReadEntityFromDB" class="ReadEntityFromDB"/>
      <config>
        <param name="DatabaseName" value="CISBETA" type="str"/>
        <param name="DocIdFieldName" value="contentid" type="str"/>
        <param name="Password" value="cis4ftc" type="str"/>
        <param name="SQLquery" value="select results from PhraseStatus where RecordID=150002032" type="str"/>
        <param name="ServerName" value="ftcdevsql01.ppl.local" type="str"/>
        <param name="Username" value="cis_fast_user" type="str"/>
      </config>
      <description><![CDATA[ReadEntityFromDB
               Reads JSON documents with extracted phrases and entities from PhraseStatus table stored in &amp;quot;results&amp;quot; column
            
	        Following fields are populated by this processor
	         - extractedphrases
	         - extcompanies
	         - extamountpaid
	         - extlocations
	         - exturls
            
	    	Documents are identified by the recordid in the PhraseStatus table. Records are only selected if value for &amp;quot;status&amp;quot; column is set to &amp;quot;completed&amp;quot;
            ]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="ReferencedAggregator" type="general" hidden="0">
      <load module="processors.Aggregation" class="ReferencedAggregator"/>
      <config>
        <param name="AggregateName" value="attachmenttext" type="str"/>
        <param name="AggregateNames" value="title body" type="str"/>
        <param name="Pipeline" value="TextFromData" type="str"/>
        <param name="ReferenceAttribute" value="attachments" type="str"/>
        <param name="SubDocumentName" value="data" type="str"/>
      </config>
      <description><![CDATA[Aggregate text from subdocuments
Warning: The sub-pipeline cannot contain processors that has batch support!
Subdocuments (attachments) in the attributes listed in the attribute defined by ReferenceAttribute are passed to Pipeline in a subdocument containing only the attribute SubDocumentName, after which the subdocument attributes in AggregateNames is appended into the main document attribute AggregateName. Aggregated text is appended to existing values of AggregateName. With no attachments processed and no existing value, the AggregateName attribute remains unchanged (undefined). Any failure in the sub-pipeline is propagated to this processor.
Example: a document contains two Word document attachments, one in attribute A and one in B. The attribute "attachments" contains "A B". The text of those attachments is to be aggregated into the document attribute C. The pipeline named Word processes word documents in the data attribute and adds the title and body attributes. The corresponding configuration would be: ReferenceAttribute="attachments", SubDocumentName="data", Pipeline="Word", AggregateName="C", AggregateNames="title body".]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="ReferencedAttributeProcessor" type="general" hidden="0">
      <load module="processors.Aggregation" class="ReferencedAttributeProcessor"/>
      <config>
        <param name="InputName" value="data" type="str"/>
        <param name="MappingAttribute" value="attachments" type="str"/>
        <param name="OutputName" value="body" type="str"/>
        <param name="Pipeline" value="TextFromData" type="str"/>
      </config>
      <description><![CDATA[Process attributes in a sub-pipeline
Warning: The sub-pipeline cannot contain processors that has batch support!
Attributes (attachments, from values) defined in an attribute defined by MappingAttribute  (attribute format "from:to from:to ...") are passed to Pipeline in a subdocument containing only the attribute SubDocumentName. The subdocument attribute OutputName are inserted into the main document as the to attribute from the mapping. Any failure in the sub-pipeline is propagated to this processor.
Example: a document contains two Word document attachments, one in attribute "A" and one in "B", and an attribute "attachments" having the value "A:Abody B:Bbody". The pipeline named "Word" processes Word documents in the data attribute and adds the "body" attribute. The configuration for making the body text of the two Word documents available in the main document as attributes "Abody" and "Bbody" is: MappingAttribute="attachments", Pipeline="Word", InputName="data", OutputName="body".]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOHTMLEncoder1" type="general" hidden="0">
      <load module="processors.RegexChanger" class="RegexChanger"/>
      <config>
        <param name="changeTo" value="&amp;lt;" type="str"/>
        <param name="inputField" value="comments" type="str"/>
        <param name="outputField" value="comments" type="str"/>
        <param name="regex" value="&lt;" type="str"/>
      </config>
      <description><![CDATA[Replace all occurrences of the regex from the input field to "changeTo" and put resulting text into output field (usually both are &apos;data&apos;). Default settings will redact all social security numbers from data (replacing them with myssn).  This eliminates dropdowns that can mess up results.  Put it after SimpleFormatter.  joe meree]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOHTMLEncoder2" type="general" hidden="0">
      <load module="processors.RegexChanger" class="RegexChanger"/>
      <config>
        <param name="changeTo" value="&amp;gt;" type="str"/>
        <param name="inputField" value="comments" type="str"/>
        <param name="outputField" value="comments" type="str"/>
        <param name="regex" value="&gt;" type="str"/>
      </config>
      <description><![CDATA[Replace all occurrences of the regex from the input field to "changeTo" and put resulting text into output field (usually both are &apos;data&apos;). Default settings will redact all social security numbers from data (replacing them with myssn).  This eliminates dropdowns that can mess up results.  Put it after SimpleFormatter.  joe meree]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOInvalidCharacterChangerconxml" type="general" hidden="0">
      <load module="processors.RegexChanger" class="RegexChanger"/>
      <config>
        <param name="changeTo" value="" type="str"/>
        <param name="inputField" value="conxml" type="str"/>
        <param name="outputField" value="conxml" type="str"/>
        <param name="regex" value="&amp;#x\d+;" type="str"/>
      </config>
      <description><![CDATA[Replace all occurrences of the regex from the input field to "changeTo" and put resulting text into output field (usually both are &apos;data&apos;). Default settings will redact all social security numbers from data (replacing them with myssn).  This eliminates dropdowns that can mess up results.  Put it after SimpleFormatter.  joe meree]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOInvalidCharactersChanger" type="general" hidden="0">
      <load module="processors.RegexChanger" class="RegexChanger"/>
      <config>
        <param name="changeTo" value=" " type="str"/>
        <param name="inputField" value="pcxml" type="str"/>
        <param name="outputField" value="pcxml" type="str"/>
        <param name="regex" value="&amp;#x\d+;" type="str"/>
      </config>
      <description><![CDATA[Replace all occurrences of the regex from the input field to "changeTo" and put resulting text into output field (usually both are &apos;data&apos;). Default settings will redact all social security numbers from data (replacing them with myssn).  This eliminates dropdowns that can mess up results.  Put it after SimpleFormatter.  joe meree]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOInvalidCharactersChangerACXML" type="general" hidden="0">
      <load module="processors.RegexChanger" class="RegexChanger"/>
      <config>
        <param name="changeTo" value=" " type="str"/>
        <param name="inputField" value="acxml" type="str"/>
        <param name="outputField" value="acxml" type="str"/>
        <param name="regex" value="&amp;#x\d+;" type="str"/>
      </config>
      <description><![CDATA[Replace all occurrences of the regex from the input field to "changeTo" and put resulting text into output field (usually both are &apos;data&apos;). Default settings will redact all social security numbers from data (replacing them with myssn).  This eliminates dropdowns that can mess up results.  Put it after SimpleFormatter.  joe meree]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOInvalidCharactersChangerConXML" type="general" hidden="0">
      <load module="processors.RegexChanger" class="RegexChanger"/>
      <config>
        <param name="changeTo" value=" " type="str"/>
        <param name="inputField" value="conxml" type="str"/>
        <param name="outputField" value="conxml" type="str"/>
        <param name="regex" value="&amp;#x\d+;" type="str"/>
      </config>
      <description><![CDATA[Replace all occurrences of the regex from the input field to "changeTo" and put resulting text into output field (usually both are &apos;data&apos;). Default settings will redact all social security numbers from data (replacing them with myssn).  This eliminates dropdowns that can mess up results.  Put it after SimpleFormatter.  joe meree]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOInvalidCharactersChangeracxml" type="general" hidden="0">
      <load module="processors.RegexChanger" class="RegexChanger"/>
      <config>
        <param name="changeTo" value=" " type="str"/>
        <param name="inputField" value="acxml" type="str"/>
        <param name="outputField" value="acxml" type="str"/>
        <param name="regex" value="&amp;#x\d+;" type="str"/>
      </config>
      <description><![CDATA[Replace all occurrences of the regex from the input field to "changeTo" and put resulting text into output field (usually both are &apos;data&apos;). Default settings will redact all social security numbers from data (replacing them with myssn).  This eliminates dropdowns that can mess up results.  Put it after SimpleFormatter.  joe meree]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOInvalidCharactersChangeraixml" type="general" hidden="0">
      <load module="processors.RegexChanger" class="RegexChanger"/>
      <config>
        <param name="changeTo" value="" type="str"/>
        <param name="inputField" value="aixml" type="str"/>
        <param name="outputField" value="aixml" type="str"/>
        <param name="regex" value="&amp;#x\d+;" type="str"/>
      </config>
      <description><![CDATA[Replace all occurrences of the regex from the input field to "changeTo" and put resulting text into output field (usually both are &apos;data&apos;). Default settings will redact all social security numbers from data (replacing them with myssn).  This eliminates dropdowns that can mess up results.  Put it after SimpleFormatter.  joe meree]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOInvalidCharactersChangergexml" type="general" hidden="0">
      <load module="processors.RegexChanger" class="RegexChanger"/>
      <config>
        <param name="changeTo" value="" type="str"/>
        <param name="inputField" value="gexml" type="str"/>
        <param name="outputField" value="gexml" type="str"/>
        <param name="regex" value="&amp;#x\d+;" type="str"/>
      </config>
      <description><![CDATA[Replace all occurrences of the regex from the input field to "changeTo" and put resulting text into output field (usually both are &apos;data&apos;). Default settings will redact all social security numbers from data (replacing them with myssn).  This eliminates dropdowns that can mess up results.  Put it after SimpleFormatter.  joe meree]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOInvalidCharactersChangerpcxml" type="general" hidden="0">
      <load module="processors.RegexChanger" class="RegexChanger"/>
      <config>
        <param name="changeTo" value="" type="str"/>
        <param name="inputField" value="pcxml" type="str"/>
        <param name="outputField" value="pcxml" type="str"/>
        <param name="regex" value="&amp;#x\d+;" type="str"/>
      </config>
      <description><![CDATA[Replace all occurrences of the regex from the input field to "changeTo" and put resulting text into output field (usually both are &apos;data&apos;). Default settings will redact all social security numbers from data (replacing them with myssn).  This eliminates dropdowns that can mess up results.  Put it after SimpleFormatter.  joe meree]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOLTGTChanger" type="general" hidden="0">
      <load module="processors.RegexChanger" class="RegexChanger"/>
      <config>
        <param name="changeTo" value=" " type="str"/>
        <param name="inputField" value="comments" type="str"/>
        <param name="outputField" value="commentxml" type="str"/>
        <param name="regex" value="&lt;|&gt;" type="str"/>
      </config>
      <description><![CDATA[Replace all occurrences of the regex from the input field to &amp;quot;changeTo&amp;quot; and put resulting text into output field (usually both are &amp;amp;apos;data&amp;amp;apos;). Default settings will redact all social security numbers from data (replacing them with myssn).  This eliminates dropdowns that can mess up results.  Put it after SimpleFormatter.  joe meree]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCORegexChangerCC" type="general" hidden="0">
      <load module="processors.RegexChanger" class="RegexChanger"/>
      <config>
        <param name="changeTo" value="xxxx-xxxx-xxxx-xxxx" type="str"/>
        <param name="inputField" value="redactedcomments" type="str"/>
        <param name="outputField" value="redactedcomments" type="str"/>
        <param name="regex" value="\b4[0-9]{12}(?:[0-9]{3})?\b|\b4\d{3}[ .#-]?\d{4}[ .#-]?\d{4}[ .#-]?\d{4}\b|\b5[1-5]\d{2}[ .#-]?\d{4}[ .#-]?\d{4}[ .#-]?\d{4}\b|\b6011[ .#-]?\d{4}[ .#-]?\d{4}[ .#-]?\d{4}\b|\b3[0,6,8]\d{12}\b|\b3[4,7]\d{13}\b|\b(?:2131|1800|35\d{3})\d{11}\b" type="str"/>
      </config>
      <description><![CDATA[Replace all occurrences of the regex from the input field to "changeTo" and put resulting text into output field (usually both are &apos;data&apos;). Default settings will redact all social security numbers from data (replacing them with myssn).  This eliminates dropdowns that can mess up results.  Put it after SimpleFormatter.  joe meree]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCORegexChangerSSN" type="general" hidden="0">
      <load module="processors.RegexChanger" class="RegexChanger"/>
      <config>
        <param name="changeTo" value="XXX-XX-XXXX" type="str"/>
        <param name="inputField" value="comments" type="str"/>
        <param name="outputField" value="redactedcomments" type="str"/>
        <param name="regex" value="[0-9]{3}[-\s][0-9]{2}[-\s][0-9]{4}" type="str"/>
      </config>
      <description><![CDATA[Replace all occurrences of the regex from the input field to "changeTo" and put resulting text into output field (usually both are &apos;data&apos;). Default settings will redact all social security numbers from data (replacing them with myssn).  This eliminates dropdowns that can mess up results.  Put it after SimpleFormatter.  joe meree]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOSpaceRemoverPCPhoneNo" type="general" hidden="0">
      <load module="processors.RegexChanger" class="RegexChanger"/>
      <config>
        <param name="changeTo" value="" type="str"/>
        <param name="inputField" value="primarycompanyphonenumber" type="str"/>
        <param name="outputField" value="primarycompanyphonenumberqs" type="str"/>
        <param name="regex" value="\s+" type="str"/>
      </config>
      <description><![CDATA[Replace all occurrences space from the string]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOSubjectNameStripper" type="general" hidden="0">
      <load module="processors.RegexChanger" class="RegexChanger"/>
      <config>
        <param name="changeTo" value="" type="str"/>
        <param name="inputField" value="subjectbasename" type="str"/>
        <param name="outputField" value="subjectbasenamestripped" type="str"/>
        <param name="regex" value="(\s+|;|,|\.)" type="str"/>
      </config>
      <description><![CDATA[Replace all occurrences of the regex from the input field to &amp;amp;amp;quot;changeTo&amp;amp;amp;quot; and put resulting text into output field (usually both are &amp;amp;amp;amp;apos;data&amp;amp;amp;amp;apos;). Default settings will redact all social security numbers from data (replacing them with myssn).  This eliminates dropdowns that can mess up results.  Put it after SimpleFormatter.  joe meree]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOSubjectNameStripperNN" type="general" hidden="0">
      <load module="processors.RegexChanger" class="RegexChanger"/>
      <config>
        <param name="changeTo" value="" type="str"/>
        <param name="inputField" value="subjectname" type="str"/>
        <param name="outputField" value="subjectbasenamestripped" type="str"/>
        <param name="regex" value="(\s+|;|,|\.)" type="str"/>
      </config>
      <description><![CDATA[Replace all occurrences of the regex from the input field to &amp;amp;amp;amp;quot;changeTo&amp;amp;amp;amp;quot; and put resulting text into output field (usually both are &amp;amp;amp;amp;amp;apos;data&amp;amp;amp;amp;amp;apos;). Default settings will redact all social security numbers from data (replacing them with myssn).  This eliminates dropdowns that can mess up results.  Put it after SimpleFormatter.  joe meree]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOSubjectPhoneNav" type="general" hidden="0">
      <load module="processors.RegexChanger" class="RegexChanger"/>
      <config>
        <param name="changeTo" value="" type="str"/>
        <param name="inputField" value="subjectphone" type="str"/>
        <param name="outputField" value="subjectphonenav" type="str"/>
        <param name="regex" value="\s+|-" type="str"/>
      </config>
      <description><![CDATA[Replace all occurrences of the regex from the input field to "changeTo" and put resulting text into output field (usually both are &apos;data&apos;). Default settings will redact all social security numbers from data (replacing them with myssn).  This eliminates dropdowns that can mess up results.  Put it after SimpleFormatter.  joe meree]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOTildaRemoverAIPSC" type="general" hidden="0">
      <load module="processors.RegexChanger" class="RegexChanger"/>
      <config>
        <param name="changeTo" value="|" type="str"/>
        <param name="inputField" value="institutionpscnav" type="str"/>
        <param name="outputField" value="institutionpscnav" type="str"/>
        <param name="regex" value="~" type="str"/>
      </config>
      <description><![CDATA[Replace all occurrences of the regex from the input field to "changeTo" and put resulting text into output field (usually both are &apos;data&apos;). Default settings will redact all social security numbers from data (replacing them with myssn).  This eliminates dropdowns that can mess up results.  Put it after SimpleFormatter.  joe meree]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOTildaRemoverAISC" type="general" hidden="0">
      <load module="processors.RegexChanger" class="RegexChanger"/>
      <config>
        <param name="changeTo" value="|" type="str"/>
        <param name="inputField" value="institutionscnav" type="str"/>
        <param name="outputField" value="institutionscnav" type="str"/>
        <param name="regex" value="~" type="str"/>
      </config>
      <description><![CDATA[Replace all occurrences of the regex from the input field to "changeTo" and put resulting text into output field (usually both are &apos;data&apos;). Default settings will redact all social security numbers from data (replacing them with myssn).  This eliminates dropdowns that can mess up results.  Put it after SimpleFormatter.  joe meree]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOTildaRemoverAIVC" type="general" hidden="0">
      <load module="processors.RegexChanger" class="RegexChanger"/>
      <config>
        <param name="changeTo" value="|" type="str"/>
        <param name="inputField" value="institutionvcnav" type="str"/>
        <param name="outputField" value="institutionvcnav" type="str"/>
        <param name="regex" value="~" type="str"/>
      </config>
      <description><![CDATA[Replace all occurrences of the regex from the input field to "changeTo" and put resulting text into output field (usually both are &apos;data&apos;). Default settings will redact all social security numbers from data (replacing them with myssn).  This eliminates dropdowns that can mess up results.  Put it after SimpleFormatter.  joe meree]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOTildaRemoverPrimaryCompanyZipNav" type="general" hidden="0">
      <load module="processors.RegexChanger" class="RegexChanger"/>
      <config>
        <param name="changeTo" value="|" type="str"/>
        <param name="inputField" value="primarycompanyzipnav" type="str"/>
        <param name="outputField" value="primarycompanyzipnav" type="str"/>
        <param name="regex" value="~" type="str"/>
      </config>
      <description><![CDATA[Replace all occurrences of the regex from the input field to &quot;changeTo&quot; and put resulting text into output field (usually both are &amp;apos;data&amp;apos;). Default settings will redact all social security numbers from data (replacing them with myssn).  This eliminates dropdowns that can mess up results.  Put it after SimpleFormatter.  joe meree]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOTildaRemoverSubectName" type="general" hidden="0">
      <load module="processors.RegexChanger" class="RegexChanger"/>
      <config>
        <param name="changeTo" value="|" type="str"/>
        <param name="inputField" value="subjectname" type="str"/>
        <param name="outputField" value="subjectname" type="str"/>
        <param name="regex" value="~" type="str"/>
      </config>
      <description><![CDATA[Replace all occurrences of the regex from the input field to "changeTo" and put resulting text into output field (usually both are &apos;data&apos;). Default settings will redact all social security numbers from data (replacing them with myssn).  This eliminates dropdowns that can mess up results.  Put it after SimpleFormatter.  joe meree]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOTildaRemoverSubjectCity" type="general" hidden="0">
      <load module="processors.RegexChanger" class="RegexChanger"/>
      <config>
        <param name="changeTo" value="|" type="str"/>
        <param name="inputField" value="subjectcity" type="str"/>
        <param name="outputField" value="subjectcity" type="str"/>
        <param name="regex" value="~" type="str"/>
      </config>
      <description><![CDATA[Replace all occurrences of the regex from the input field to "changeTo" and put resulting text into output field (usually both are &apos;data&apos;). Default settings will redact all social security numbers from data (replacing them with myssn).  This eliminates dropdowns that can mess up results.  Put it after SimpleFormatter.  joe meree]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOTildaRemoverSubjectCountry" type="general" hidden="0">
      <load module="processors.RegexChanger" class="RegexChanger"/>
      <config>
        <param name="changeTo" value="|" type="str"/>
        <param name="inputField" value="subjectcountry" type="str"/>
        <param name="outputField" value="subjectcountry" type="str"/>
        <param name="regex" value="~" type="str"/>
      </config>
      <description><![CDATA[Replace all occurrences of the regex from the input field to "changeTo" and put resulting text into output field (usually both are &apos;data&apos;). Default settings will redact all social security numbers from data (replacing them with myssn).  This eliminates dropdowns that can mess up results.  Put it after SimpleFormatter.  joe meree]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOTildaRemoverSubjectEmailDomain" type="general" hidden="0">
      <load module="processors.RegexChanger" class="RegexChanger"/>
      <config>
        <param name="changeTo" value="|" type="str"/>
        <param name="inputField" value="subjectemaildomain" type="str"/>
        <param name="outputField" value="subjectemaildomain" type="str"/>
        <param name="regex" value="~" type="str"/>
      </config>
      <description><![CDATA[Replace all occurrences of the regex from the input field to &quot;changeTo&quot; and put resulting text into output field (usually both are &amp;apos;data&amp;apos;). Default settings will redact all social security numbers from data (replacing them with myssn).  This eliminates dropdowns that can mess up results.  Put it after SimpleFormatter.  joe meree]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOTildaRemoverSubjectState" type="general" hidden="0">
      <load module="processors.RegexChanger" class="RegexChanger"/>
      <config>
        <param name="changeTo" value="|" type="str"/>
        <param name="inputField" value="subjectstate" type="str"/>
        <param name="outputField" value="subjectstate" type="str"/>
        <param name="regex" value="~" type="str"/>
      </config>
      <description><![CDATA[Replace all occurrences of the regex from the input field to "changeTo" and put resulting text into output field (usually both are &apos;data&apos;). Default settings will redact all social security numbers from data (replacing them with myssn).  This eliminates dropdowns that can mess up results.  Put it after SimpleFormatter.  joe meree]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOTildeRemoverSubjectPhone" type="general" hidden="0">
      <load module="processors.RegexChanger" class="RegexChanger"/>
      <config>
        <param name="changeTo" value="|" type="str"/>
        <param name="inputField" value="subjectphone" type="str"/>
        <param name="outputField" value="subjectphone" type="str"/>
        <param name="regex" value="~" type="str"/>
      </config>
      <description><![CDATA[Replace all occurrences of the regex from the input field to "changeTo" and put resulting text into output field (usually both are &apos;data&apos;). Default settings will redact all social security numbers from data (replacing them with myssn).  This eliminates dropdowns that can mess up results.  Put it after SimpleFormatter.  joe meree]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOURLRegExNormalizer1" type="general" hidden="0">
      <load module="processors.RegexChanger" class="RegexChanger"/>
      <config>
        <param name="changeTo" value="|" type="str"/>
        <param name="inputField" value="subjecturl" type="str"/>
        <param name="outputField" value="subjecturl" type="str"/>
        <param name="regex" value="/\|" type="str"/>
      </config>
      <description><![CDATA[Replace all occurrences of the regex from the input field to &quot;changeTo&quot; and put resulting text into output field (usually both are &amp;apos;data&amp;apos;). Default settings will redact all social security numbers from data (replacing them with myssn).  This eliminates dropdowns that can mess up results.  Put it after SimpleFormatter.  joe meree]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOURLRegExNormalizer2" type="general" hidden="0">
      <load module="processors.RegexChanger" class="RegexChanger"/>
      <config>
        <param name="changeTo" value="" type="str"/>
        <param name="inputField" value="subjecturl" type="str"/>
        <param name="outputField" value="subjecturl" type="str"/>
        <param name="regex" value="((http:|https:)//|/$)" type="str"/>
      </config>
      <description><![CDATA[Replace all occurrences of the regex from the input field to &amp;amp;quot;changeTo&amp;amp;quot; and put resulting text into output field (usually both are &amp;amp;amp;apos;data&amp;amp;amp;apos;). Default settings will redact all social security numbers from data (replacing them with myssn).  This eliminates dropdowns that can mess up results.  Put it after SimpleFormatter.  joe meree]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOURLRegExNormalizer2-1" type="general" hidden="0">
      <load module="processors.RegexChanger" class="RegexChanger"/>
      <config>
        <param name="changeTo" value="" type="str"/>
        <param name="inputField" value="subjecturl" type="str"/>
        <param name="outputField" value="subjecturl" type="str"/>
        <param name="regex" value="(\/.[^\|]*)" type="str"/>
      </config>
      <description><![CDATA[Replace all child url path that follows the main domain name. Works for multiple URLs separted by pipe (|)]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOURLRegExNormalizer3" type="general" hidden="0">
      <load module="processors.RegexChanger" class="RegexChanger"/>
      <config>
        <param name="changeTo" value="|" type="str"/>
        <param name="inputField" value="subjecturl" type="str"/>
        <param name="outputField" value="subjecturl" type="str"/>
        <param name="regex" value="(\.[^.]+$)|(\.[^.]+\|)" type="str"/>
      </config>
      <description><![CDATA[Replace domain (.com etc) or .com etc follwoed by | with |]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOURLRegExNormalizer4" type="general" hidden="0">
      <load module="processors.RegexChanger" class="RegexChanger"/>
      <config>
        <param name="changeTo" value="" type="str"/>
        <param name="inputField" value="subjecturl" type="str"/>
        <param name="outputField" value="subjecturl" type="str"/>
        <param name="regex" value="\|$" type="str"/>
      </config>
      <description><![CDATA[Replace | from the end of the string]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOURLRegExNormalizer5" type="general" hidden="0">
      <load module="processors.RegexChanger" class="RegexChanger"/>
      <config>
        <param name="changeTo" value="" type="str"/>
        <param name="inputField" value="subjecturl" type="str"/>
        <param name="outputField" value="subjecturl" type="str"/>
        <param name="regex" value="(www\.)" type="str"/>
      </config>
      <description><![CDATA[Replace www from the end of the string]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOaddress2Remover1" type="general" hidden="0">
      <load module="processors.RegexChanger" class="RegexChanger"/>
      <config>
        <param name="changeTo" value="" type="str"/>
        <param name="inputField" value="subjectaddress" type="str"/>
        <param name="outputField" value="subjectaddress" type="str"/>
        <param name="regex" value="(suites|suite|apt|apt#|apt.|unit|flat|room|block)(\s|#)([a-zA-Z0-9_\-]{1,32})" type="str"/>
      </config>
      <description><![CDATA[Replace all occurrences of the suite, floor, unit, Apt, etc from the input field to &amp;quot;changeTo&amp;quot; and put resulting text into output field (usually both are &amp;amp;apos;data&amp;amp;apos;). Default settings will redact all social security numbers from data (replacing them with myssn).  This eliminates dropdowns that can mess up results.  Put it after SimpleFormatter.  joe meree]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOaddress2Remover2" type="general" hidden="0">
      <load module="processors.RegexChanger" class="RegexChanger"/>
      <config>
        <param name="changeTo" value="" type="str"/>
        <param name="inputField" value="subjectaddress" type="str"/>
        <param name="outputField" value="subjectaddress" type="str"/>
        <param name="regex" value="([a-zA-Z0-9_\-]{1,32})\s(floor|floors|flr#|flr.)" type="str"/>
      </config>
      <description><![CDATA[Replace all occurrences of the  from the input field to &amp;quot;changeTo&amp;quot; and put resulting text into output field (usually both are &amp;amp;apos;data&amp;amp;apos;). Default settings will redact all social security numbers from data (replacing them with myssn).  This eliminates dropdowns that can mess up results.  Put it after SimpleFormatter.  joe meree]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="RegexChanger" type="general" hidden="0">
      <load module="processors.RegexChanger" class="RegexChanger"/>
      <config>
        <param name="changeTo" value="###-##-####" type="str"/>
        <param name="inputField" value="comments" type="str"/>
        <param name="outputField" value="redactedcomments" type="str"/>
        <param name="regex" value="[0-9]{3}[-][0-9]{2}[-][0-9]{4}" type="str"/>
      </config>
      <description><![CDATA[Replace all occurrences of the regex from the input field to "changeTo" and put resulting text into output field (usually both are &apos;data&apos;). Default settings will redact all social security numbers from data (replacing them with myssn).  This eliminates dropdowns that can mess up results.  Put it after SimpleFormatter.  joe meree
]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="SentenceScopifier" type="general" hidden="0">
      <load module="processors.RegexChanger" class="RegexChanger"/>
      <config>
        <param name="changeTo" value="&lt;/sentence&gt;&lt;sentence&gt;" type="str"/>
        <param name="inputField" value="commentxml" type="str"/>
        <param name="outputField" value="commentxml" type="str"/>
        <param name="regex" value="(\.|\?|\!)\s|[\r\n]" type="str"/>
      </config>
      <description><![CDATA[Replace all occurrences of the regex from the input field to &amp;amp;quot;changeTo&amp;amp;quot; and put resulting text into output field (usually both are &amp;amp;amp;apos;data&amp;amp;amp;apos;). Default settings will redact all social security numbers from data (replacing them with myssn).  This eliminates dropdowns that can mess up results.  Put it after SimpleFormatter.  joe meree]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="PersonAffiliationExtractor" type="general" hidden="0">
      <load module="processors.RelationExtractor" class="RelationExtractor"/>
      <config>
        <param name="annotation" value="jobtitle:affiliation" type="str"/>
        <param name="dumpfile" value="var/log/rext/rextpa.txt:0" type="str"/>
        <param name="filter" value="person jobtitle" type="str"/>
        <param name="input" value="body" type="str"/>
        <param name="inputentities" value="person:PER jobtitle:JTL company:COM newspaper:COM university:COM airline:COM" type="str"/>
        <param name="matcher" value="" type="str"/>
        <param name="matchertag" value="" type="str"/>
        <param name="model" value="linguistics/extractors/configuration.rext.personaffiliationextractor.en.kno" type="str"/>
        <param name="output" value="affiliation" type="str"/>
        <param name="override" value="yes" type="str"/>
        <param name="relationentities" value="person:P jobtitle:T company:C" type="str"/>
        <param name="sentencescope" value="yes" type="str"/>
        <param name="separator" value=";" type="str"/>
      </config>
      <description><![CDATA[Extracts affiliation between a person and a company from text documents.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="PersonQuotationExtractor" type="general" hidden="0">
      <load module="processors.RelationExtractor" class="RelationExtractor"/>
      <config>
        <param name="annotation" value="quotation:personquotation" type="str"/>
        <param name="dumpfile" value="var/log/rextpq.txt:0" type="str"/>
        <param name="filter" value="person" type="str"/>
        <param name="input" value="body" type="str"/>
        <param name="inputentities" value="person:PER" type="str"/>
        <param name="matcher" value="linguistics/extractors/configuration.rext.personquotationextractor.en.xml" type="str"/>
        <param name="matchertag" value="SAY" type="str"/>
        <param name="model" value="linguistics/extractors/configuration.rext.personquotationextractor.en.kno" type="str"/>
        <param name="output" value="personquotation" type="str"/>
        <param name="override" value="yes" type="str"/>
        <param name="relationentities" value="person:P quotation:Q" type="str"/>
        <param name="sentencescope" value="no" type="str"/>
        <param name="separator" value=";" type="str"/>
      </config>
      <description><![CDATA[Extracts person quotation relations from text documents.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="RelationExtractor" type="general" hidden="0">
      <load module="processors.RelationExtractor" class="RelationExtractor"/>
      <config>
        <param name="annotation" value="person" type="str"/>
        <param name="dumpfile" value="var/log/rextrel.txt:0" type="str"/>
        <param name="filter" value="person" type="str"/>
        <param name="input" value="body" type="str"/>
        <param name="inputentities" value="person" type="str"/>
        <param name="matcher" value="" type="str"/>
        <param name="matchertag" value="" type="str"/>
        <param name="model" value="linguistics/extractors/configuration.relationextractor.kno" type="str"/>
        <param name="output" value="" type="str"/>
        <param name="override" value="no" type="str"/>
        <param name="relationentities" value="person:P" type="str"/>
        <param name="sentencescope" value="no" type="str"/>
        <param name="separator" value="" type="str"/>
      </config>
      <description><![CDATA[Extracts relations from text documents.
input: document input text attribute where extraction will be done.
model: extraction model file.
sentencescope: specify if extraction should be done on sentence level.
relationentities: space separated list of entities participating in the relation. If different names are used as tags in the model file, append the tag name with a colon like "person:P"
annotation: name of the entity scope that will be annotated for scope search. If you want a diferent name than the entity, use the format "entity:name_to_use".
inputentities: space separated list of input entities needed by the the model. If you want a diferent name for an entity, use the format "entity:name_to_use".
matcher: xml config file for a matcher. Leave empty if not needed.
matchertag: tag name to annotate stuff extracted by the matcher.  Leave empty if not needed.
filter: space separated list of esp scope entities that, if not present, will cause the current text chunk to be skiped and not processed.
override: put yes if you need to overide the extractor bls, relationmapper or featureprocessor.
output: optional name of flat attribute to receive extracted relations.
separator: relation separator for flat attribute.
dumpFile: optional name of base file name where annotated column based text version of the document will be dumped. If wanted, append dump level in format "filename:dumplevel" where dumplevel is 0 for no dump, 1 for dump before extraction, 2 for dump before and after and 3 for just after extraction (default).]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="Replacer" type="general" hidden="0">
      <load module="processors.Replacer" class="Replacer"/>
      <config>
        <param name="Attributes" value="" type="str"/>
        <param name="ConfigFile" value="" type="str"/>
        <param name="IgnoreCase" value="1" type="int"/>
        <param name="MultiLine" value="1" type="int"/>
        <param name="Whitespace" value="" type="str"/>
      </config>
      <description><![CDATA[Replaces strings in specified attribute with other strings
Uses the configuration file defined in ConfigFile to perform
    replacements in the attributes defined by the Attributes parameter.
    Attribtutes can either be a space seperated list of attributes or
    it can be a space seperated list of fromattr:toattr mappings. The
    second format will perform replacements in the fromattr and put
    the replaced content in the toattr. IgnoreCase is either 0 or 1,
    depending on whether or not you want to ignore case when doing
    replacements. MultiLine is either 0 or 1 depending on whether you
    want the '.' in regexes to match across lines. Whitespace defines
    characters that will be considered whitespace around tokens.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="ScopeHighlightFormatter" type="general" hidden="0">
      <load module="processors.XMLDP" class="ScopeHighlightFormatter"/>
      <config>
        <param name="Mapping" value="scopes:bsumxml" type="str"/>
      </config>
      <description><![CDATA[Maps scope attributes to strings formatted for query highlighting
The 'Mapping' lists space separated from:to attribute mappings.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="ScopeResult" type="general" hidden="0">
      <load module="processors.XMLDP" class="ScopeHighlightFormatter"/>
      <config>
      </config>
      <description><![CDATA[]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="ScopeResult(template)" type="general" hidden="0">
      <load module="processors.XMLDP" class="ScopeHighlightFormatter"/>
      <config>
        <param name="Mapping" value="field:resfield" type="str"/>
      </config>
      <description><![CDATA[Teaser Source Generator (Scope Search)]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="ScopeResult(webcluster)" type="general" hidden="0">
      <load module="processors.XMLDP" class="ScopeHighlightFormatter"/>
      <config>
        <param name="Mapping" value="susxml:ressusxml aixml:resaixml gexml:resgexml conxml:resconxml pcxml:respcxml acxml:resacxml pcaddressxml:respcaddressxml representativexml:resrepresentativexml incidentsxml:resincidentsxml commentxml:rescommentxml" type="str"/>
      </config>
      <description><![CDATA[Automatically configured for cluster]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOScopeTokenizerCIS" type="general" hidden="0">
      <load module="processors.linguistics.Tokenization" class="ScopeTokenizer"/>
      <config>
        <param name="compactthreshold" value="1048576" type="int"/>
        <param name="preferred_languages" value="" type="str"/>
        <param name="tokenize" value="susxml aixml gexml conxml pcxml acxml pcaddressxml representativexml incidentsxml" type="str"/>
      </config>
      <description><![CDATA[Automatically configured for cluster]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="ScopeTokenizer" type="general" hidden="0">
      <load module="processors.linguistics.Tokenization" class="ScopeTokenizer"/>
      <config>
        <param name="compactthreshold" value="1048576" type="int"/>
        <param name="preferred_languages" value="ja ko zh-simplified zh-traditional th" type="str"/>
        <param name="tokenize" value="xml" type="str"/>
      </config>
      <description><![CDATA[Tokenization of text scopes
The parameter 'tokenize' indicates which document fields to segment 
    into tokens. These fields have to be listed space-separated. It is possible
    to specify an alternative tokenization mode for each field by appending 
    its id to this field-name in the list, like a:b. Where a is the document 
    field to be tokenized and b is the tokenization mode to apply: this mode 
    has to be set-up correctly in $FASTSEARCH/etc/tokenizer/tokenization.xml.
    
The parameter 'preferred_languages' controls behaviour of the tokenizer for
       multilingual documents. In case a multilingual document has any of the languages
       listed in 'preferred_languages' as secondary language, tokenization will be
       based on that language, instead of the primary language. Enables correct CJK processing 
       for multilingual documents.
The parameter 'compacttreshold' specifies the minimum document size for which 
       documents are processed in a memory saving mode. This memory saving mode is slower,
       but allows feeding of large documents.
The configuration of the tokenizers requires advanced knowledge of FAST 
    ESP.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="ScopeTokenizer(template)" type="general" hidden="0">
      <load module="processors.linguistics.Tokenization" class="ScopeTokenizer"/>
      <config>
        <param name="compactthreshold" value="1048576" type="int"/>
        <param name="tokenize" value="" type="str"/>
      </config>
      <description><![CDATA[Tokenizer for Scope Search]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="ScopeTokenizer(webcluster)" type="general" hidden="0">
      <load module="processors.linguistics.Tokenization" class="ScopeTokenizer"/>
      <config>
        <param name="compactthreshold" value="1048576" type="int"/>
        <param name="tokenize" value="susxml aixml gexml conxml pcxml acxml pcaddressxml representativexml incidentsxml commentxml" type="str"/>
      </config>
      <description><![CDATA[Automatically configured for cluster]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="Scopifier" type="general" hidden="0">
      <load module="processors.linguistics.Scopification" class="Scopifier"/>
      <config>
        <param name="boosts" value="" type="str"/>
        <param name="byteguard" value="0" type="int"/>
        <param name="chunkextra" value="" type="str"/>
        <param name="chunkmeta" value="type:structural" type="str"/>
        <param name="chunkscope" value="paragraph" type="str"/>
        <param name="enumerate" value="paragraph@id sentence@id" type="str"/>
        <param name="fieldmeta" value="type:structural" type="str"/>
        <param name="ignorables" value="*@type *@partial *@tobedeleted" type="str"/>
        <param name="input" value="title body xml" type="str"/>
        <param name="metaprefix" value="@" type="str"/>
        <param name="output" value="xml" type="str"/>
        <param name="penalties" value="" type="str"/>
        <param name="rootmeta" value="type:structural" type="str"/>
        <param name="rootscope" value="document" type="str"/>
      </config>
      <description><![CDATA[Creates a scope type field, comprising the specified input fields marked up with detected entity types.

Creates a scope type field, comprising the specified input fields and entities detected within these. Entities can be of both semantic and structural
nature, and are assumed detected by previously applied processors and stored in the position tables associated with the specified input fields. It is possible
to instruct the scopification logic to suppress or ignore specified entries in the position tables.


Meta information associated with scopes are currently represented as subscopes having names starting with a specified prefix. For example, if the
prefix is "@", then the logical XML fragment <foo bar="zap"/> would be represented as scope(foo):scope(@bar):"zap".


The scopes that correspond to the specified input fields are assigned the same names as the input fields. A name for the root scope that comprises all
scopes must be provided, however. If a textual input field is comprised of one or more "chunks", then each chunk gets wrapped in a scope. A name for this
scope must also be provided.


As part of the scopification process it is possible to decorate specified scopes with meta data that influences relevancy calculations.
]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="SearchExportConverter" type="general" hidden="0">
      <load module="processors.Format" class="SearchExportConverter"/>
      <config>
        <param name="Config" value="searchexport/searchexport.cfg" type="str"/>
        <param name="ConversionFormat" value="fi_searchml32" type="str"/>
        <param name="InputFile" value="" type="str"/>
        <param name="Internal" value="0" type="int"/>
        <param name="MaxOutputSize" value="0" type="int"/>
        <param name="Strict" value="1" type="int"/>
        <param name="Timeout" value="300" type="int"/>
        <param name="XSL" value="" type="str"/>
      </config>
      <description><![CDATA[Converts the 'data' attribute in any format to HTML in 'html'
Converts the 'data' attribute in any supported file format (PDF, Word, etc) to HTML in the 'html' attribute. See documentation for supported formats.
Sets 'charset' to UTF-8 if not already set.
If 'mime' is text/html, it simply copies 'data' to 'html'. If 'mime' is application/octet-stream, the document is dropped.
Both internal (in-process) and external (in child process) conversion is supported. External conversion is the safest because it allows conversion to be timed out after a configurable number of seconds using the Timeout parameter. Internal conversion is enabled by setting the Internal parameter to '1'.
With external conversion, the 'MaxOutputSize' parameter can be used to specify a limit (in bytes) on the size of the converted document. The check
is done before the output file is loaded into memory. If the check fails, the document is dropped. A limit of 0 means no limit.
The 'InputFile' parameter is optional. If used, it should be set to the name of a document
field that contains the path of the input file to convert. This can be useful if you want to avoid unnecessarily reading and
writing large files.
If the 'Strict' parameter is true, pipeline processing will be aborted if document conversion fails.
The 'XSL' parameter can be set to a custom stylesheet file to control the transformation process from 
the SearchExport XML output to HTML.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="SimpleAggregator" type="general" hidden="0">
      <load module="processors.Aggregation" class="SimpleAggregator"/>
      <config>
        <param name="AggregateName" value="attachmenttext" type="str"/>
        <param name="AggregateNames" value="title body" type="str"/>
        <param name="Pipeline" value="TextFromData" type="str"/>
        <param name="SubDocumentName" value="data" type="str"/>
        <param name="SubDocumentNames" value="attachment" type="str"/>
      </config>
      <description><![CDATA[Dispatch subdocuments to a pipeline and aggregate results
Warning: The sub-pipeline cannot contain processors that has batch support!
Subdocuments (attachments) in the attributes listed in SubDocumentNames are passed to Pipeline in a subdocument containing only the attribute SubDocumentName, after which the subdocument attributes in AggregateNames is appended into the main document attribute AggregateName. Aggregated text is appended to existing values of AggregateName. With no attachments processed and no existing value, the AggregateName attribute remains unchanged (undefined). Any failure in the sub-pipeline is propagated to this processor.
Example: a document contains two Word document attachments, one in attribute A and one in B. The text of those attachments is to be aggregated into the document attribute C. The pipeline named Word processes word documents in the data attribute and adds the title and body attributes. The corresponding configuration would be: SubDocumentNames="A B", SubDocumentName="data", Pipeline="Word", AggregateName="C", AggregateNames="title body".]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="SimpleAttributeProcessor" type="general" hidden="0">
      <load module="processors.Aggregation" class="SimpleAttributeProcessor"/>
      <config>
        <param name="InputName" value="data" type="str"/>
        <param name="Mapping" value="attachment:attachmentbody" type="str"/>
        <param name="OutputName" value="body" type="str"/>
        <param name="Pipeline" value="TextFromData" type="str"/>
      </config>
      <description><![CDATA[Process attributes in a sub-pipeline
Warning: The sub-pipeline cannot contain processors that has batch support!
Attributes (attachments, from values) defined by Mapping  (format "from:to from:to ...") are passed to Pipeline in a subdocument containing only the attribute SubDocumentName. The subdocument attribute OutputName are inserted into the main document as the to attribute from the Mapping. Any failure in the sub-pipeline is propagated to this processor.
Example: a document contains two Word document attachments, one in attribute "A" and one in "B". The pipeline named "Word" processes Word documents in the data attribute and adds the "body" attribute. The configuration for making the body text of the two Word documents available in the main document as attributes "Abody" and "Bbody" is: Mapping="A:Abody B:Bbody", Pipeline="Word", InputName="data", OutputName="body".]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="SimpleConverter" type="general" hidden="0">
      <load module="processors.Format" class="SimpleConverter"/>
      <config>
      </config>
      <description><![CDATA[Converts the 'data' attribute to HTML in 'html'
Simply copies 'data' to 'html' if 'mime' is text/html and wraps 'data' in an
HTML body if 'mime' is text/plain.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="BodySizeFilter" type="general" hidden="0">
      <load module="processors.Basic" class="SizeFilter"/>
      <config>
        <param name="Input" value="body" type="str"/>
        <param name="MaxLimit" value="-1" type="int"/>
        <param name="MaxLimitAction" value="" type="str"/>
        <param name="MinLimit" value="1" type="int"/>
      </config>
      <description><![CDATA[This filter discards documents with empty bodies.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="SizeFilter" type="general" hidden="0">
      <load module="processors.Basic" class="SizeFilter"/>
      <config>
        <param name="Input" value="data" type="str"/>
        <param name="MaxLimit" value="-1" type="int"/>
        <param name="MaxLimitAction" value="" type="str"/>
        <param name="MinLimit" value="-1" type="int"/>
      </config>
      <description><![CDATA[Filter documents on the size of an attribute
Checks the size of the <Input> attribute wrt the min and max
limits. If the size is larger than MaxLimit or less than MinLimit, the
document is dropped. Negative limits are ignored. If the input
attribute does not exist, the document passes.
If MaxLimitAction is "truncate-utf8", the document passes with the input attribute truncated at a Unicode character boundary.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="TitleSizeFilter" type="general" hidden="0">
      <load module="processors.Basic" class="SizeFilter"/>
      <config>
        <param name="Input" value="title" type="str"/>
        <param name="MaxLimit" value="100" type="int"/>
        <param name="MaxLimitAction" value="" type="str"/>
        <param name="MinLimit" value="1" type="int"/>
      </config>
      <description><![CDATA[This filter discards documents with unreasonably short or long titles. Such documents are usually the result of HTML parse errors, and undesirable when the quality of search results weigh stronger than quantity.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="Sizer" type="general" hidden="0">
      <load module="processors.Basic" class="Sizer"/>
      <config>
        <param name="Input" value="" type="str"/>
        <param name="Output" value="" type="str"/>
      </config>
      <description><![CDATA[Calculate the size of a document attribute
The size of the document attribute named by the Input configuration 
parameter is assigned to the attribute named by the Output parameter.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOSpy" type="general" hidden="0">
      <load module="processors.Spy" class="Spy"/>
      <config>
        <param name="FileStringCutOffLen" value="32768" type="int"/>
        <param name="SpyDumpFile" value="D:\spy.txt" type="str"/>
      </config>
      <description><![CDATA[Lets you have a peek at all the pipeline attributes as a document passes this pipeline stage by dumping all the attributes to a file. Attributes that are longer than &amp;#039;FileStringCutOffLen&amp;#039; will be truncated to this size.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="Spy" type="general" hidden="0">
      <load module="processors.Spy" class="Spy"/>
      <config>
        <param name="FileStringCutOffLen" value="32768" type="int"/>
        <param name="SpyDumpFile" value="var/log/spy.txt" type="str"/>
      </config>
      <description><![CDATA[Lets you have a peek at all the pipeline attributes as a document passes this pipeline stage by dumping all the attributes to a file. Attributes that are longer than 'FileStringCutOffLen' will be truncated to this size.
]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="StopWordsRemover" type="general" hidden="0">
      <load module="processors.StopWordsRemover" class="StopWordsRemover"/>
      <config>
        <param name="Attribute" value="companies locations people" type="str"/>
        <param name="Separator" value=";" type="str"/>
        <param name="StopwordFilePath" value=";" type="str"/>
      </config>
      <description><![CDATA[StopWordsRemover

               Removes stop words from an entity. The stopwords are saved in a stopword file. 
               The file path need to be provided for the parameter "StopWordFilePath"
            

	        The Attribute parameter takes the name of the fields. It can take multiple field name separated by 
	        space.
            

	    	The Separator field takes the separator chracter for the multivalue field.        
            ]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="StreetSuffixRemover" type="general" hidden="0">
      <load module="processors.StopWordsRemover" class="StopWordsRemover"/>
      <config>
        <param name="Attribute" value="subjectaddress" type="str"/>
        <param name="Separator" value="|" type="str"/>
        <param name="StopwordFilePath" value="D:\esp\resources\entitynormalizer\StreetSuffixLists.txt" type="str"/>
      </config>
      <description><![CDATA[StopWordsRemover
               Removes stop words from an entity. The stopwords are saved in a stopword file. 
               The file path need to be provided for the parameter &quot;StopWordFilePath&quot;
	        The Attribute parameter takes the name of the fields. It can take multiple field name separated by 
	        space.
	    	The Separator field takes the separator chracter for the multivalue field.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="StringReplacer" type="general" hidden="0">
      <load module="processors.Basic" class="StringReplacer"/>
      <config>
        <param name="InputAttribute" value="" type="str"/>
        <param name="OutputAttribute" value="" type="str"/>
        <param name="RawStrings" value="0" type="int"/>
        <param name="ReplaceFrom" value="" type="str"/>
        <param name="ReplaceTo" value="" type="str"/>
      </config>
      <description><![CDATA[Replaces substrings in a string attribute
All occurances of the substring 'ReplaceFrom' in the attribute given by 'InputAttribute' will be replaced to the substring 'ReplaceTo' and the result will be saved in the attribute given in 'OutputAttribute'. 
The 'RawStrings' attribute sets if the 'ReplaceFrom' and 'ReplaceTo' attributes will be used as-is (raw string), or if escape sequences will be unescaped (e.g.'\\x20' -> ' '. Default is 0 (unescape sequence sentences). ]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="Stan3Address" type="general" hidden="0">
      <load module="processors.linguistics.Stan3" class="StructuralAnalysis"/>
      <config>
        <param name="Configuration" value="address/en/rules.xml" type="str"/>
        <param name="InputField" value="html" type="str"/>
        <param name="MaxDocumentSize" value="409600" type="int"/>
      </config>
      <description><![CDATA[Address extraction from HTML documents.
             Extracts postal addresses from HTML documents in English.
         The extracted results are written into the document field
         "stanaddress".
         Addresses may consist of:
         - Names of persons or companies;
         - Street, City, Country (optional);
         - Telephone/Fax number (optional);
         - Email address (optional);
         - URLs (optional)]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="Stan3News" type="general" hidden="0">
      <load module="processors.linguistics.Stan3" class="StructuralAnalysis"/>
      <config>
        <param name="Configuration" value="news/en/rules.xml" type="str"/>
        <param name="InputField" value="html" type="str"/>
        <param name="MaxDocumentSize" value="409600" type="int"/>
      </config>
      <description><![CDATA[Structural analysis of HTML news articles.
            STAN-3 configuration for news articles in English.
        The extracted fields are:
        stantitle:  Title of the news article;
        stanauthor: Author(s) of the article;
        standate:   Date of the news article;
        stantext:   Article text.
        The configuration is targeted at news sites like Yahoo, CNN, BBC etc.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="StructuralAnalysis" type="general" hidden="0">
      <load module="processors.linguistics.Stan3" class="StructuralAnalysis"/>
      <config>
        <param name="Configuration" value="news/en/rules.xml" type="str"/>
        <param name="InputField" value="html" type="str"/>
        <param name="MaxDocumentSize" value="409600" type="int"/>
      </config>
      <description><![CDATA[Structural analysis of HTML documents.

             Parses the HTML, transforms the document internally into
             a network of text chunks, and applies classification and
             information extraction rules according to the specified
             configuration file.
          

             The 'InputField' parameter below refers to the document
             field in which the HTML raw data is expected to be.
          

             The 'Configuration' parameter is expected to contain a file name,
             relative to '$FASTSEARCH/etc/config_data/DocumentProcessor/linguistics/stan'.
	     The file should be an XML STAN-3 configuration file. Refer
	     to STAN-3's documentation for how to create such a configuration file.
          

             The 'MaxDocumentSize' parameter restricts the size of documents
	     handled by STAN-3.  If the length of the input document in characters
	     exceeds this threshold, STAN-3 will not process the document.  If the 
	     threshold is 0 or a negative value, STAN-3 will process all documents
	     no matter how large.  Note that for large documents (> 500k) 
	     processing times might be rather long.
          ]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="SubPipeline" type="general" hidden="0">
      <load module="processors.Basic" class="SubPipeline"/>
      <config>
        <param name="Pipeline" value="" type="str"/>
      </config>
      <description><![CDATA[Process the document to a sub-pipeline
If Pipeline is set, process the document in the named pipeline and resume processing in the current pipeline. If Pipeline is not set, pass the document on in the current pipeline.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOAssociatedNameNormalizerNew" type="general" hidden="0">
      <load module="processors.SubjectNameNormalizer" class="SubjectNameNormalizer"/>
      <config>
        <param name="Attribute" value="associatedcompanybasenamenav" type="str"/>
        <param name="MatchedField" value="matchedassociatedbasename" type="str"/>
        <param name="Separator" value="|" type="str"/>
      </config>
      <description><![CDATA[SubjectNameNormalizer
               Normalizes the &amp;amp;lt;Separator&amp;amp;gt;-separated entities in &amp;amp;lt;Attribute&amp;amp;gt;. Mostly it is used 
               for cleansing navigators, e.g. the companies navigator. 
               A cleansed companies navigator should only contain &amp;amp;quot;Procter &amp;amp;amp; Gamble Corp.;
               Microsoft&amp;amp;quot;. This will be done along all processed documents.
               You can cleanse as many attributes as you want. Join multiple entries 
               with a space in &amp;amp;lt;Attribute&amp;amp;gt;.
               Entities are separated by &amp;amp;lt;Separator&amp;amp;gt;
               You can determine stopwords (like &amp;amp;#039;inc&amp;amp;#039;, &amp;amp;#039;AG&amp;amp;#039;, &amp;amp;#039;Corp&amp;amp;#039;, ... in companies) in 
               $FASTSEARCH/resources/entitynormalizer/ENstopwords. Stopwords are case insensitive. If 
               you start the line with &amp;amp;#039;@&amp;amp;#039; then you can use Python-style regular expressions.
               Additionally you can map keywords to phrases in the form &amp;amp;quot;&amp;amp;lt;keyword,...&amp;amp;gt; &amp;amp;lt;phrase&amp;amp;gt;&amp;amp;quot; 
               like &amp;amp;#039;fast,search,transfer FAST Search &amp;amp;amp; Transfer&amp;amp;#039; 
               which means, that each entity that contains &amp;amp;#039;fast&amp;amp;#039; and &amp;amp;#039;search&amp;amp;#039; and &amp;amp;#039;transfer&amp;amp;#039; in this order will
               end up to &amp;amp;#039;FAST Search &amp;amp;amp; Transfer&amp;amp;#039;. The mappings are stored in 
               $FASTSEARCH/resources/entitynormalizer/ENmappings. Keywords are case insensitive. If 
               you start the line with &amp;amp;#039;@&amp;amp;#039; then you can use Python-style regular expressions.
               Entities which don&amp;amp;#039;t match to that rules will be catched in the way that the first occurrence will 
               be the one which is taken for all other matches. Two entity match to each other if their tokens match
               (solely word characters, lowercased). Example: &amp;amp;#039;Colgate-Palmolive&amp;amp;#039; matches to &amp;amp;#039;Colgate Palmolive&amp;amp;#039;. 
               If &amp;amp;#039;Corp&amp;amp;#039; is defined as a stop word then it matches to &amp;amp;#039;Colgate Palmolive Corp.&amp;amp;#039; as well.
               All entities are stored by the Cache Manager. If you want to clear the entity table and start from 
               scratch, just remove the values at the command line with &amp;amp;quot;$FASTSEARCH/bin/cmctrl remove ENentities&amp;amp;quot;.
            	The MatchedField field shall get the field name that would store the base name that has been mapped 
            	to by one or more documents.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOSubjectBaseNameNormalizer" type="general" hidden="0">
      <load module="processors.SubjectNameNormalizer" class="SubjectNameNormalizer"/>
      <config>
        <param name="Attribute" value="subjectbasename" type="str"/>
        <param name="Separator" value=";" type="str"/>
      </config>
      <description><![CDATA[SubjectNameNormalizer
               Normalizes the <Separator>-separated entities in <Attribute>. Mostly it is used 
               for cleansing navigators, e.g. the companies navigator. 
               A cleansed companies navigator should only contain "Procter & Gamble Corp.;
               Microsoft". This will be done along all processed documents.
               You can cleanse as many attributes as you want. Join multiple entries 
               with a space in <Attribute>.
               Entities are separated by <Separator>
               You can determine stopwords (like 'inc', 'AG', 'Corp', ... in companies) in 
               $FASTSEARCH/resources/entitynormalizer/ENstopwords. Stopwords are case insensitive. If 
               you start the line with '@' then you can use Python-style regular expressions.
               Additionally you can map keywords to phrases in the form "<keyword,...> <phrase>" 
               like 'fast,search,transfer FAST Search & Transfer' 
               which means, that each entity that contains 'fast' and 'search' and 'transfer' in this order will
               end up to 'FAST Search & Transfer'. The mappings are stored in 
               $FASTSEARCH/resources/entitynormalizer/ENmappings. Keywords are case insensitive. If 
               you start the line with '@' then you can use Python-style regular expressions.
               Entities which don't match to that rules will be catched in the way that the first occurrence will 
               be the one which is taken for all other matches. Two entity match to each other if their tokens match
               (solely word characters, lowercased). Example: 'Colgate-Palmolive' matches to 'Colgate Palmolive'. 
               If 'Corp' is defined as a stop word then it matches to 'Colgate Palmolive Corp.' as well.
               All entities are stored by the Cache Manager. If you want to clear the entity table and start from 
               scratch, just remove the values at the command line with "$FASTSEARCH/bin/cmctrl remove ENentities".]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOSubjectNameNormalizerNew" type="general" hidden="0">
      <load module="processors.SubjectNameNormalizer" class="SubjectNameNormalizer"/>
      <config>
        <param name="Attribute" value="subjectbasename" type="str"/>
        <param name="MatchedField" value="matchedbasename" type="str"/>
        <param name="Separator" value="|" type="str"/>
      </config>
      <description><![CDATA[SubjectNameNormalizer
               Normalizes the &amp;lt;Separator&amp;gt;-separated entities in &amp;lt;Attribute&amp;gt;. Mostly it is used 
               for cleansing navigators, e.g. the companies navigator. 
               A cleansed companies navigator should only contain &amp;quot;Procter &amp;amp; Gamble Corp.;
               Microsoft&amp;quot;. This will be done along all processed documents.
               You can cleanse as many attributes as you want. Join multiple entries 
               with a space in &amp;lt;Attribute&amp;gt;.
               Entities are separated by &amp;lt;Separator&amp;gt;
               You can determine stopwords (like &amp;#039;inc&amp;#039;, &amp;#039;AG&amp;#039;, &amp;#039;Corp&amp;#039;, ... in companies) in 
               $FASTSEARCH/resources/entitynormalizer/ENstopwords. Stopwords are case insensitive. If 
               you start the line with &amp;#039;@&amp;#039; then you can use Python-style regular expressions.
               Additionally you can map keywords to phrases in the form &amp;quot;&amp;lt;keyword,...&amp;gt; &amp;lt;phrase&amp;gt;&amp;quot; 
               like &amp;#039;fast,search,transfer FAST Search &amp;amp; Transfer&amp;#039; 
               which means, that each entity that contains &amp;#039;fast&amp;#039; and &amp;#039;search&amp;#039; and &amp;#039;transfer&amp;#039; in this order will
               end up to &amp;#039;FAST Search &amp;amp; Transfer&amp;#039;. The mappings are stored in 
               $FASTSEARCH/resources/entitynormalizer/ENmappings. Keywords are case insensitive. If 
               you start the line with &amp;#039;@&amp;#039; then you can use Python-style regular expressions.
               Entities which don&amp;#039;t match to that rules will be catched in the way that the first occurrence will 
               be the one which is taken for all other matches. Two entity match to each other if their tokens match
               (solely word characters, lowercased). Example: &amp;#039;Colgate-Palmolive&amp;#039; matches to &amp;#039;Colgate Palmolive&amp;#039;. 
               If &amp;#039;Corp&amp;#039; is defined as a stop word then it matches to &amp;#039;Colgate Palmolive Corp.&amp;#039; as well.
               All entities are stored by the Cache Manager. If you want to clear the entity table and start from 
               scratch, just remove the values at the command line with &amp;quot;$FASTSEARCH/bin/cmctrl remove ENentities&amp;quot;.
            	The MatchedField field shall get the field name that would store the base name that has been mapped 
            	to by one or more documents.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="SubjectNameNormalizer" type="general" hidden="0">
      <load module="processors.SubjectNameNormalizer" class="SubjectNameNormalizer"/>
      <config>
        <param name="Attribute" value="companies locations people" type="str"/>
        <param name="MatchedField" value=";" type="str"/>
        <param name="Separator" value=";" type="str"/>
      </config>
      <description><![CDATA[SubjectNameNormalizer

               Normalizes the <Separator>-separated entities in <Attribute>. Mostly it is used 
               for cleansing navigators, e.g. the companies navigator. 
               A cleansed companies navigator should only contain "Procter & Gamble Corp.;
               Microsoft". This will be done along all processed documents.
               You can cleanse as many attributes as you want. Join multiple entries 
               with a space in <Attribute>.
               Entities are separated by <Separator>
            

               You can determine stopwords (like 'inc', 'AG', 'Corp', ... in companies) in 
               $FASTSEARCH/resources/entitynormalizer/ENstopwords. Stopwords are case insensitive. If 
               you start the line with '@' then you can use Python-style regular expressions.
            

               Additionally you can map keywords to phrases in the form "<keyword,...> <phrase>" 
               like 'fast,search,transfer FAST Search & Transfer' 
               which means, that each entity that contains 'fast' and 'search' and 'transfer' in this order will
               end up to 'FAST Search & Transfer'. The mappings are stored in 
               $FASTSEARCH/resources/entitynormalizer/ENmappings. Keywords are case insensitive. If 
               you start the line with '@' then you can use Python-style regular expressions.
            

               Entities which don't match to that rules will be catched in the way that the first occurrence will 
               be the one which is taken for all other matches. Two entity match to each other if their tokens match
               (solely word characters, lowercased). Example: 'Colgate-Palmolive' matches to 'Colgate Palmolive'. 
               If 'Corp' is defined as a stop word then it matches to 'Colgate Palmolive Corp.' as well.
            

               All entities are stored by the Cache Manager. If you want to clear the entity table and start from 
               scratch, just remove the values at the command line with "$FASTSEARCH/bin/cmctrl remove ENentities".
            

            	The MatchedField field shall get the field name that would store the base name that has been mapped 
            	to by one or more documents. 
            ]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="SubstringCounter" type="general" hidden="0">
      <load module="processors.Basic" class="SubstringCounter"/>
      <config>
        <param name="InputAttribute" value="" type="str"/>
        <param name="OutputAttribute" value="" type="str"/>
        <param name="RawStrings" value="0" type="int"/>
        <param name="Substring" value="" type="str"/>
      </config>
      <description><![CDATA[Counts the number of occurrences of a substring in a string
attribute
Counts the number of occurences of the 'Substring' in the attribute given by
'InputAttribute' and saves the number in the attribute given by 'OutputAttribute'
The 'RawStrings' attribute sets if the 'Substring' attribute will be used as-is (raw string), or if escape sequences will be unescaped (e.g.'\\x20' -> ' '. Default is 0 (unescape sequence sentences). ]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="SuperSpy" type="general" hidden="0">
      <load module="processors.SuperSpy" class="SuperSpy"/>
      <config>
        <param name="SpyDumpFile" value="www/superspy/superspy.xml" type="str"/>
      </config>
      <description><![CDATA[Example that shows how a pipeline stage can obtain and act upon configuration data given to it by the user via the admin GUI.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="SynonymExpander" type="general" hidden="0">
      <load module="processors.linguistics.Synonyms" class="SynonymExpander"/>
      <config>
        <param name="attributes" value="title headings body" type="str"/>
        <param name="configfile" value="etc/SynonymConfig.xml" type="str"/>
      </config>
      <description><![CDATA[Produce synonyms for selected attributes
This document processor will add synonyms to terms in the fields
   listed in 'attributes'. The processor is language sensitive and
   uses the 'languages' attribute.
The 'attributes' parameter specifies the fields to which
   synonyms are added. Field names are separated by blank. If a field
   name is in the form source:target, the synonyms are not added to
   the source field, but written into the field specified as target
   field.
The parameter 'configfile' specifies the synonym configuration
   file.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="TaxonomyExpander" type="general" hidden="0">
      <load module="processors.classification.Taxonomy" class="TaxonomyExpander"/>
      <config>
        <param name="input" value="taxonomy" type="str"/>
        <param name="interseparator" value="#" type="str"/>
        <param name="intraseparator" value="/" type="str"/>
        <param name="output" value="taxonomy" type="str"/>
      </config>
      <description><![CDATA[Expands the taxonomy information to cover all path prefixes.
Given a document field containing taxonomy data, expands this to cover all unique path prefixes. For example, the data "a/b/c; a/b/k; x/y" would be expanded to "a; a/b; a/b/c; a/b/k; x; x/y".
      ]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="TaxonomyTagger" type="general" hidden="0">
      <load module="processors.classification.Taxonomy" class="TaxonomyTagger"/>
      <config>
        <param name="conditional" value="1" type="int"/>
        <param name="dispatch" value="language" type="str"/>
        <param name="input" value="urls title body" type="str"/>
        <param name="normalization" value="maximum" type="str"/>
        <param name="output" value="taxonomy" type="str"/>
        <param name="project" value="" type="str"/>
        <param name="retries" value="5" type="int"/>
        <param name="separator" value="#" type="str"/>
        <param name="servers" value="localhost:6500" type="str"/>
        <param name="sleep" value="5.0" type="real"/>
        <param name="threshold" value="0.4" type="real"/>
      </config>
      <description><![CDATA[Tags the document with taxonomy information.
Wraps up the specified input fields into an XML structure, sends this off to a specified categorization server, and tags the document with a field listing those categories that have a relevancy score above or equal to a given threshold. The category names stuffed into the output field are separated by the specified separator string.
The relevancy scores returned from the categorization server may or may not be normalized before thresholding takes place. Currently allowed normalization options are 'maximum', 'sum' or 'none'.
A named project on the categorization server may be specified, in case the server holds multiple projects. If no project is specified, the first project on the server will be used. It is also possible to dispatch dynamically which project to use, based on the value of a specified dispatch field.
More than one categorization server may be specified, for scalability (load balancing) and robustness (failover) purposes. The processing stage will then round-robin between the listed servers.
If communication with a server should fail for some reason, the processing stage can be configured to retry up to a given number of times, possibly sleeping a given number of seconds between making requests to a server it has previously tried to communicate with.
The 'conditional' flag signals whether or not categorization should be done conditional on the existence of prior data in the field named by the 'output' parameter. That is, if this flag has the value 1 and the field named by the 'output' parameter exists and contains data, then no categorization is done. This flag is useful in the case where your pipeline contains multiple instances of this stage, each differently configured.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="TeaserGenerator" type="general" hidden="0">
      <load module="processors.HTML" class="TeaserGenerator"/>
      <config>
        <param name="MaxLen" value="300" type="int"/>
        <param name="MinLen" value="75" type="int"/>
      </config>
      <description><![CDATA[Teaser generator summarizing the document
The strategy is to first use the description metadata. If that does 
not exist or is too small, then automatically extract a teaser from the 
body avoiding text that typically appears in navigation menus. Again, if 
that fails or is too small, use the first words in the body. It does not
overwrite an existing teaser attribute in the document.
Configuration parameters:
MaxLen: The teaser will be chopped at a word boundary at or below MaxLen.
MinLen: Minimum length of teaser. If the length of the teaser from a phase
above is less than MinLen, the next strategy is applied.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="TestBed" type="general" hidden="0">
      <load module="processors.TestBed" class="TestBed"/>
      <config>
      </config>
      <description><![CDATA[TestBed]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="TextLanguageDetector" type="general" hidden="0">
      <load module="processors.linguistics.LanguageDetection" class="TextLanguageDetector"/>
      <config>
        <param name="Attributes" value="data" type="str"/>
        <param name="FallbackEncoding" value="iso-8859-1" type="str"/>
        <param name="FallbackLanguage" value="unknown" type="str"/>
      </config>
      <description><![CDATA[Detect the language and encoding of plain text attributes
The processor output is in the attributes "language", "secondarylanguage", "languages", and "encoding". A common language and encoding is selected for all input attributes. The fallback parameters are used when the automatic detection fails, e.g. due to too little/ambiguous input.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="TextNormalizer" type="general" hidden="0">
      <load module="processors.linguistics.Normalization" class="TextNormalizer"/>
      <config>
        <param name="Attributes" value="" type="str"/>
      </config>
      <description><![CDATA[Normalize accents in text
Replaces accented characters by their ASCII equivalents where this is 
applicable. This makes it possible to retrieve all spelling variants of 
accented characters, e.g. in French.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="TextNormalizer(template)" type="general" hidden="0">
      <load module="processors.linguistics.Normalization" class="TextNormalizer"/>
      <config>
        <param name="Attributes" value="" type="str"/>
      </config>
      <description><![CDATA[Stage template of processor, used to dynamically configure a cluster based processor based upon the index-profile.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="TextNormalizer(webcluster)" type="general" hidden="0">
      <load module="processors.linguistics.Normalization" class="TextNormalizer"/>
      <config>
        <param name="Attributes" value="" type="str"/>
      </config>
      <description><![CDATA[Automatically configured for cluster]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="Tokenizer" type="general" hidden="0">
      <load module="processors.linguistics.Tokenization" class="Tokenizer"/>
      <config>
        <param name="compactthreshold" value="1048576" type="int"/>
        <param name="dynamic" value="body" type="str"/>
        <param name="preferred_languages" value="ja ko zh-simplified zh-traditional th" type="str"/>
        <param name="tokenize" value="title:title headings:headings body:body" type="str"/>
        <param name="vectorize" value="" type="str"/>
      </config>
      <description><![CDATA[Tokenizes (and optionally produces additional data for the tokens) attributes.
The parameter 'tokenize' indicates which document fields to segment 
    into tokens.  It has either the form a:b or a:b:c. Where a is the document 
    field to be tokenized and b is the name of the field in the index. Though 
    it is possible to give different names to document fields during indexing,
    usually a and b will be equal since document fields and index fields 
    have the same name most of the time. In the second form, a:b:c the c is the 
    tokenization mode to apply: this mode has to be set-up correctly in 
    $FASTSEARCH/etc/tokenizer/tokenization.xml.
The parameter 'dynamic' indicates which document fields will be used 
    for dynamic hit highlighting later. Special tokenization has to be applied 
    to those.
The parameter 'compacttreshold' specifies the minimum document size for which 
       documents are processed in a memory saving mode. This memory saving mode is slower,
       but allows feeding of large documents.
The parameter 'preferred_languages' controls behaviour of the tokenizer for
       multilingual documents. In case a multilingual document has any of the languages
       listed in 'preferred_languages' as secondary language, tokenization will be
       based on that language, instead of the primary language. Enables correct CJK processing 
       for multilingual documents.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="Tokenizer(template)" type="general" hidden="0">
      <load module="processors.linguistics.Tokenization" class="Tokenizer"/>
      <config>
        <param name="compactthreshold" value="1048576" type="int"/>
        <param name="dynamic" value="" type="str"/>
        <param name="tokenize" value="" type="str"/>
        <param name="vectorize" value="" type="str"/>
      </config>
      <description><![CDATA[Stage template of processor, used to dynamically configure a cluster based processor based upon the index-profile.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="Tokenizer(webcluster)" type="general" hidden="0">
      <load module="processors.linguistics.Tokenization" class="Tokenizer"/>
      <config>
        <param name="compactthreshold" value="1048576" type="int"/>
        <param name="dynamic" value="title body teaser referencenumber intreferencenumber contacttype internetrelatedflag source comments comments2 commentsteaser redactedcommentsteaser createddate externalrefnumber numberaccountsaffected thefttype thefttypenav theftsubtype harmsuffered organization amountrequested amountpaid paymentmethod agencycontact initialcontact initialresponse dncexistingbusinessrel dncprerecmessage dncrequeststopcalling transactiondate topic prodservicedesc statute violation representativelname complainingcompany complaintagainstcreditbureau lawviolationcodes consumerlname consumerfname consumermname consumeraddr1 consumeraddr2 consumercity consumerstate consumerzip consumercountry consumerworkphone consumerworkphoneext consumerhomenumber consumercellnumber consumeremail consumeridissuedstate soldierstatus soldierstation soldierpaygrade consumerdateofbirth isphoneinregistry creditbureauname creditbureaunotified suspectfname suspectlname suspectmname suspectvictimrelationship suspectobtainmethod primarycompanyname primarycompanyaddr1 primarycompanyaddr2 primarycompanycity primarycompanystate primarycompanyzip primarycompanycountry primarycompanyemail primarycompanyurl primarycompanycountrycode primarycompanyareacode primarycompanyphonenumber primarycompanyphonenumberqs associatedcompanyname associatedcompanybasename associatedcompanytype associatedcompanyaddr1 associatedcompanyaddr2 associatedcompanycity associatedcompanystate associatedcompanyzip associatedcompanycountry associatedcompanyemail associatedcompanyurl associatedcompanycountrycode associatedcompanyareacode associatedcompanyphonenumber associatedcompanyphoneext associatedemail associatedurl institutiontype institutionfraudalertset institutioncreditreportordered institutionpsc institutionsc institutionvc lawenfdeptname lawenfdeptstate lawenforcementphone notifiedlocallawenforcement lawenfreporttaken lawenfreportnumber subjectname subjectcity subjectstate subjectcountry subjectphone subjectphonenav subjectemail subjectemaildomain subjecturl subjectlocation subjectaddress subjectaddressoriginal subjectidtype subjectidissuerstate subjectidissuercountry complaintresolutionflag complaintresolutiontext subjectidissuertype routingnumber accountnumber checknumbers incidentoccurreddate alertoriginalownerfirstname alertoriginalownerlastname alertdelegatedownerfirstname alertdelegatedownerlastname alertpocfirstname alertpoclastname alertname alerttypeofbusines recordtype mailimagefilename hasmailscannedimage hasaudiofiles faqquestion faqanswer faqtopic faqteaser subjectnamevariations subjectbasename subjectnamestripped subjectbasenamestripped subjectbasenamestrippedphonetic matchedbasename matchedassociatedbasename generic1 generic2 generic3 igeneric1 igeneric2 dtgeneric1 dtgeneric2 phonetic1 phonetic2 phonetic3 phonetic4 phonetic5 phonetic6 phonetic7 phonetic8 phonetic9 phonetic10 phonetic11 phonetic12 militaryinstallationcode militarypaygradecode militarystatuscode militarybranch militarymember consumercountyname consumercountystatecode consumercountynameextended companycountyname companycountystatecode companycountynameextended subjectmatter extphraseentity extnamedentity extcompanies extamountpaid extlocations exturls consumerlatitudefloat consumerlongitudefloat companylatitudefloat companylongitudefloat genericstr1 genericstr2 genericint1 genericint2 genericdt1 genericdt2" type="str"/>
        <param name="tokenize" value="title:title body:body headings:headings meta_description:description anchortext:anchortext meta_keywords:keywords faqquestion:faqquestion faqanswer:faqanswer faqtopic:faqtopic" type="str"/>
        <param name="vectorize" value="title body" type="str"/>
      </config>
      <description><![CDATA[Automatically configured for cluster]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="URIEquivalence" type="general" hidden="0">
      <load module="processors.URIEquivalence" class="URIEquivalence"/>
      <config>
        <param name="AnchorServerName" value="fds/anchorserver/node0" type="str"/>
        <param name="ORBCallTimeout" value="2520" type="int"/>
      </config>
      <description><![CDATA[Notifies the AnchorServer of equivalent URIs.
]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="URLProcessor" type="general" hidden="0">
      <load module="processors.Crawler" class="URLProcessor"/>
      <config>
        <param name="fallbackURLencoding" value="iso-8859-1" type="str"/>
        <param name="httpheader" value="Last-Modified:http_lastmodified" type="str"/>
      </config>
      <description><![CDATA[Handle crawled URLs
The URL of the document ('url' attribute) and urls of redirects to and duplicates of the document are concatenated into the 'urls' attribute. The 'url' is replaced with the best URL in 'urls'. The best URL is the one with the least levels (slashes).
The meta.url attributes are extracted based on the best URL.
The selected HTTP header fields in the 'httpheader' parameter are extracted as document attributes. The value is a space separated list of httpheadername:documentattributename mappings.
When url is not in utf-8 and when it fails to decode url, it retries using 'fallbackURLencoding', if it fails too, then it will decode url using utf-8 and invalid characters will be replaced by the replacement character U+FFFD.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="UTF8Encoder" type="general" hidden="0">
      <load module="processors.Basic" class="UTF8Encoder"/>
      <config>
        <param name="attributes" value="" type="str"/>
        <param name="encoding" value="" type="str"/>
        <param name="encodingattribute" value="" type="str"/>
      </config>
      <description><![CDATA[Convert configurable attributes to UTF-8
The 'attributes' parameter defines a mapping from input to output attributes
on the form "from:to ...". Missing input attributes are silently 
ignored and existing output attributes are overwritten.
The encoding per attribute is selected based on the 'encoding' metadata
for the document attribute, the attribute named in the 'encodingattribute'
parameter, or the encoding in the 'encoding' parameter, in that order.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="VectorMerger" type="general" hidden="0">
      <load module="processors.linguistics.Vectorization" class="VectorMerger"/>
      <config>
        <param name="input" value="docvector1:1.0 docvector2:1.0 docvector3:1.0" type="str"/>
        <param name="normalization" value="maximum" type="str"/>
        <param name="output" value="docvector" type="str"/>
      </config>
      <description><![CDATA[Merges multiple document vectors
Computes the weighted sum of a given set of document vectors. For example,
if the 'input' parameter is "dv1:0.6 dv2:0.1" where 'dv1' and 'dv2' are document fields
holding data output from previous Vectorizer stages, then this stage computes the
vector sum k * (0.6 * dv1 + 0.1 * dv2), where k is a normalization factor. The result
gets stored in the field named by the 'output' parameter. Currently implemented normalization
schemes are 'sum', 'maximum' (or 'max') and 'none'.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="EntityVectorizer" type="general" hidden="0">
      <load module="processors.linguistics.Vectorization" class="Vectorizer"/>
      <config>
        <param name="boosters" value="" type="str"/>
        <param name="byteguard" value="" type="str"/>
        <param name="clear" value="1" type="int"/>
        <param name="conditional" value="1" type="int"/>
        <param name="deaccentuate" value="1" type="int"/>
        <param name="format" value="[%s, %g]" type="str"/>
        <param name="input" value="uppercasedentities_raw:10:0 nounphrases_raw:10:0 emails_raw:10:0 personnames_raw:10:0 tickers_raw:10:0 locations_raw:10:0 companies_raw:10:0" type="str"/>
        <param name="matcher" value="" type="str"/>
        <param name="output" value="docvector" type="str"/>
        <param name="stopwords" value="" type="str"/>
        <param name="threshold" value="0.0" type="real"/>
        <param name="vectorizer" value="linguistics/vectorizer/configuration.vectorizer.entities.xml" type="str"/>
      </config>
      <description><![CDATA[Creates a document vector based on strings/entities extracted elsewhere, e.g., by previous stages.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOEVectorizer" type="general" hidden="0">
      <load module="processors.linguistics.Vectorization" class="Vectorizer"/>
      <config>
        <param name="boosters" value="linguistics/vectorizer/configuration.boosters.xml" type="str"/>
        <param name="byteguard" value="body:100" type="str"/>
        <param name="clear" value="1" type="int"/>
        <param name="conditional" value="1" type="int"/>
        <param name="deaccentuate" value="1" type="int"/>
        <param name="format" value="[%s, %g]" type="str"/>
        <param name="input" value="subjectname:10:0 subjectcity:10:0 subjectemail:10:0 subjecturl:10:0" type="str"/>
        <param name="matcher" value="" type="str"/>
        <param name="output" value="docvector" type="str"/>
        <param name="stopwords" value="linguistics/vectorizer/configuration.stopwords.xml" type="str"/>
        <param name="threshold" value="0.0" type="real"/>
        <param name="vectorizer" value="linguistics/vectorizer/configuration.vectorizer.xml" type="str"/>
      </config>
      <description><![CDATA[Automatically configured for cluster]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOEntityVectorizer01" type="general" hidden="0">
      <load module="processors.linguistics.Vectorization" class="Vectorizer"/>
      <config>
        <param name="boosters" value="" type="str"/>
        <param name="byteguard" value="" type="str"/>
        <param name="clear" value="1" type="int"/>
        <param name="conditional" value="1" type="int"/>
        <param name="deaccentuate" value="1" type="int"/>
        <param name="format" value="[%s, %g]" type="str"/>
        <param name="input" value="nounphrases_raw:10:0 emails_raw:10:0 personnames_raw:10:0 tickers_raw:10:0 locations_raw:10:0 companies_raw:10:0" type="str"/>
        <param name="matcher" value="" type="str"/>
        <param name="output" value="docvector" type="str"/>
        <param name="stopwords" value="" type="str"/>
        <param name="threshold" value="0.0" type="real"/>
        <param name="vectorizer" value="linguistics/vectorizer/configuration.vectorizer.entities.xml" type="str"/>
      </config>
      <description><![CDATA[Creates a document vector based on strings/entities extracted elsewhere, e.g., by previous stages.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="Vectorizer" type="general" hidden="0">
      <load module="processors.linguistics.Vectorization" class="Vectorizer"/>
      <config>
        <param name="boosters" value="linguistics/vectorizer/configuration.boosters.xml" type="str"/>
        <param name="byteguard" value="body:100" type="str"/>
        <param name="clear" value="1" type="int"/>
        <param name="conditional" value="1" type="int"/>
        <param name="deaccentuate" value="1" type="int"/>
        <param name="format" value="[%s, %g]" type="str"/>
        <param name="input" value="title:10:0 body:5:5 {ko,zh,szh,tzh}:toktitle:10:0 {ko,zh,szh,tzh}:tokbody:5:0" type="str"/>
        <param name="matcher" value="linguistics/vectorizer/configuration.matcher.xml" type="str"/>
        <param name="output" value="docvector" type="str"/>
        <param name="stopwords" value="linguistics/vectorizer/configuration.stopwords.xml" type="str"/>
        <param name="threshold" value="0.0" type="real"/>
        <param name="vectorizer" value="linguistics/vectorizer/configuration.vectorizer.xml" type="str"/>
      </config>
      <description><![CDATA[Computes a document vector
Computes the document vector from the attributes defined in 'input', using
weights and capital letter boosts as defined in the 'input' parameter. The
'input' parameter has the format '[languages:]attribute:weight:boost', where the total
weight for the textual attribute 'attribute' is 'weight' for most words, and the sum of
'weight' and 'boost' for words that satisfy certain boosting criteria. The current boosting
criterion is based on word capitalization considerations: Boost a word that starts with an
uppercase letter, unless the word is in a boosting exception list or starts a sentence.
Boosting details are defined via the 'boosters' parameter, described below.
The attribute named with the 'output' parameter will contain the computed document vector. The document
vector is a string on the format "[foo, 1.0][bar baz, 0.6][zap, 0.12]", where "foo", "bar baz" and "zap" are
key terms in the document, and 1.0, 0.6 and 0.12 are their associated weights, respectively. Exactly
how the vectorizer extracts the key terms and computes their weights depends on how the
overall vectorization system is configured. How the overall vectorizer system is configured is
defined through the XML configuration files named by the 'vectorizer', 'stopwords' and 'boosters'
parameters.

Let X denote the value of the 'output' parameter. The vectorizer will also create a field
'X_navigator' which can be used as the basis for a navigator. The field 'X_navigator' contains
all the terms in X that have a high enough weight relative to the largest weight, separated by "; ".
The 'threshold' parameter defines the weight cutoff. For example, continuing the previous example,
with a threshold value set to 0.5, 'X_navigator' would contain "foo; bar baz".

The 'language' attribute is used to tell the vectorization system which language the text
to process is in. This information is needed by the vectorization system so that it makes use
of the correct stopword files and other language-specific configuration settings. Such
language-specific configuration settings are specified in the XML
configuration files named with 'stopwords' and 'boosters'.
The 'clear' flag signals whether or not the vectorizer's internal data structures
should be cleared between each document. This should be 1, unless the vectorizer
has been configured to be stateful.
The 'deaccentuate' flag signals whether or not accent normalization should be applied
to the tokens.

The 'format' parameter is an output format specification (expressed in C sprintf syntax),
and defines the string representation of the document vector. Note that the the format
specification must be synchronized with other parts of FDS, so that the string
representation can be properly parsed elsewhere when needed. The %s part (or some variant
thereof) must always come before the the %g part (or some variant thereof).

The 'conditional' flag signals whether or not vectorization should be done conditional
on the existence of prior data in the field named by the 'output' parameter. That is, if
this flag has the value 1 and the field named by the 'output' parameter exists and
contains data, then no vectorization is done. This flag is useful in the case where your
pipeline contains multiple vectorizer instances, each differently configured.

The 'byteguard' parameter enables one to specify minimum sizes (measured in bytes) of
text chunks to be fed into the vectorizer. Sizes can be specified on a per field basis,
e.g., "body:100 title:5". Fields listed in 'input' but not in 'byteguard' are assumed
having a minimum size of 0 bytes, i.e., they always get processed by the vectorizer.
]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="Vectorizer(template)" type="general" hidden="0">
      <load module="processors.linguistics.Vectorization" class="Vectorizer"/>
      <config>
        <param name="boosters" value="linguistics/vectorizer/configuration.boosters.xml" type="str"/>
        <param name="byteguard" value="body:100" type="str"/>
        <param name="clear" value="1" type="int"/>
        <param name="conditional" value="1" type="int"/>
        <param name="deaccentuate" value="1" type="int"/>
        <param name="format" value="[%s, %g]" type="str"/>
        <param name="input" value="title:10:0 body:5:5 {ko,zh,szh,tzh}:toktitle:10:0 {ko,zh,szh,tzh}:tokbody:5:0" type="str"/>
        <param name="matcher" value="" type="str"/>
        <param name="output" value="docvector" type="str"/>
        <param name="stopwords" value="linguistics/vectorizer/configuration.stopwords.xml" type="str"/>
        <param name="threshold" value="0.0" type="real"/>
        <param name="vectorizer" value="linguistics/vectorizer/configuration.vectorizer.xml" type="str"/>
      </config>
      <description><![CDATA[Stage template of processor, used to dynamically configure a cluster based processor based upon the index-profile.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="Vectorizer(webcluster)" type="general" hidden="0">
      <load module="processors.linguistics.Vectorization" class="Vectorizer"/>
      <config>
        <param name="boosters" value="linguistics/vectorizer/configuration.boosters.xml" type="str"/>
        <param name="byteguard" value="body:100" type="str"/>
        <param name="clear" value="1" type="int"/>
        <param name="conditional" value="1" type="int"/>
        <param name="deaccentuate" value="1" type="int"/>
        <param name="format" value="[%s, %g]" type="str"/>
        <param name="input" value="title:10:0 {zh,szh,tzh,ko}:vectitle:10:0 body:5:5 {ko,zh,szh,tzh}:vecbody:5:0 susxml:10:0 {ja,zh,szh,tzh,ko}:susxml:10:0 aixml:10:0 {ja,zh,szh,tzh,ko}:aixml:10:0 gexml:10:0 {ja,zh,szh,tzh,ko}:gexml:10:0 conxml:10:0 {ja,zh,szh,tzh,ko}:conxml:10:0 pcxml:10:0 {ja,zh,szh,tzh,ko}:pcxml:10:0 acxml:10:0 {ja,zh,szh,tzh,ko}:acxml:10:0 pcaddressxml:10:0 {ja,zh,szh,tzh,ko}:pcaddressxml:10:0 representativexml:10:0 {ja,zh,szh,tzh,ko}:representativexml:10:0 incidentsxml:10:0 {ja,zh,szh,tzh,ko}:incidentsxml:10:0 commentxml:10:0 {ja,zh,szh,tzh,ko}:commentxml:10:0" type="str"/>
        <param name="matcher" value="" type="str"/>
        <param name="output" value="docvector" type="str"/>
        <param name="stopwords" value="linguistics/vectorizer/configuration.stopwords.xml" type="str"/>
        <param name="threshold" value="0.0" type="real"/>
        <param name="vectorizer" value="linguistics/vectorizer/configuration.vectorizer.xml" type="str"/>
      </config>
      <description><![CDATA[Automatically configured for cluster]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="ViewSourceEnabler" type="general" hidden="0">
      <load module="processors.ViewSourceEnabler" class="ViewSourceEnabler"/>
      <config>
        <param name="DocIdAttribute" value="documentid" type="str"/>
        <param name="ServletUrl" value="" type="str"/>
        <param name="Tokenize" value="0" type="int"/>
        <param name="ViewSourceAttribute" value="htmlsource" type="str"/>
        <param name="ViewSourceUrlAttribute" value="viewsourceurl" type="str"/>
      </config>
      <description><![CDATA[Prepares documents for Source Hit Highlighting
by creating the ViewSource URL (to be presented in the search hit) and putting a unique and searchable document ID in the specified DocIdAttribute.
This will be used in the ViewSource servlet to fetch the htmlsource document summary field for presentation.
This processor must be placed somewhere after the EncodingNormalizer and HTMLExportConverter.
Parameters:
ServletUrl: The url to the ViewSource servlet that will retrieve the highlighted source document. If not provided, the default one will be used
DocIdAttribute: The document attribute to store a unique document ID. This field will be used by the ViewSource servlet to retrieve this exact document
ViewSourceUrlAttribute: document attribute in which to put the ViewSource url. The search front-end should use this field for presenting the "View Source" link
HtmlSourceAttribute: The document attribute where the html source is stored. If this attribute is empty, we will copy the contents of the "html" attribute into it
Tokenize: If not 0, the text in the html source is tokenized. This might be necessary for CJK documents in order for Juniper to locate a search term.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="VisualToLogical" type="general" hidden="0">
      <load module="processors.linguistics.VisualToLogical" class="VisualToLogical"/>
      <config>
        <param name="Debug" value="no" type="str"/>
        <param name="attributes" value="body:body title:title" type="str"/>
        <param name="visual_encodings" value="iso-8859-8 windows-1255-reversed utf-8-reversed" type="str"/>
      </config>
      <description><![CDATA[Line reversal for Hebrew visual encodings and Arabic or Hebrew reversed Unicode text
This processor is triggered by the encodings attribute. If it is set to 
       one of the encodings specified in the parameter 'visual_encodings' it will
       reverse all lines in the fields defined in attributes.
       Words in left to right scripts will not be reversed
Note: The encoding windows-1255-reversed included in the default configuration
       is not an officially registered encoding at IANA.
       It is the standard windows encoding in visual order, which appears on some
       pages on the Web, tagged as "visual". The encoding utf-8-reversed is not an encoding
       which occurs in any standard document. It only emerges as an artifact of PDF conversion
       to text.
This processor assumes that lines in input are separated by '\n'. It must be placed
       before the tokenizer, but always after the EncodingNormalizer and FastHTMLParser.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="WACrawlerLinkFilter" type="general" hidden="0">
      <load module="processors.WACrawlerLinkFilter" class="WACrawlerLinkFilter"/>
      <config>
        <param name="CollectionConfigFile" value="CollectionConfig.txt" type="str"/>
        <param name="CrawlerVersion" value="6.4" type="str"/>
        <param name="UseLocalCollectionConfigFile" value="no" type="str"/>
      </config>
      <description><![CDATA[Filters out links based on the Collection config from the crawler.
]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="XMLElementExtractor" type="general" hidden="0">
      <load module="processors.XMLElementExtractor" class="XMLElementExtractor"/>
      <config>
        <param name="XMLDocAttr" value="data" type="str"/>
        <param name="XMLMappingRulesConfigFile" value="" type="str"/>
      </config>
      <description><![CDATA[Assigns values to all the defined scope fields using the
  mapping rules in the XML configuration file specified by the
  XMLMappingRulesConfigFile parameter. The configuration file will be fetched from the 
         $FASTSEARCH/etc/config_data/XMLMapper directory on the ConfigServer.
It uses the input XML structure specified by the configuration value: 'XMLDocAttr'
]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="XMLLanguageDetector" type="general" hidden="0">
      <load module="processors.linguistics.LanguageDetection" class="XMLLanguageDetector"/>
      <config>
        <param name="Attributes" value="xml" type="str"/>
        <param name="FallbackLanguage" value="unknown" type="str"/>
      </config>
      <description><![CDATA[Detect the language of XML attributes
Each attribute in Attributes has the format attributename[:xpath], where the content of the selected nodes is used for language detection. By default, without the xpath, all content of the DOM tree is used. The attributes are either a DOM tree or have "dom" metadata (either typically from XMLParse).
The processor output is in the attributes "language", "secondarylanguage", and "languages". A common language is selected for all input attributes. The FallbackLanguage is used when the automatic language detection fails, e.g. for too little/ambiguous input.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="NNXMLExtract" type="general" hidden="0">
      <load module="processors.XMLMapper" class="XMLMapper"/>
      <config>
        <param name="Attribute" value="xml" type="str"/>
        <param name="ConfigFile" value="NNXMLExtract.xml" type="str"/>
      </config>
      <description><![CDATA[Extract field values from the XML in Attribute according to the XPath mappings in the ConfigFile]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="XMLExtract" type="general" hidden="0">
      <load module="processors.XMLMapper" class="XMLMapper"/>
      <config>
        <param name="Attribute" value="xml" type="str"/>
        <param name="ConfigFile" value="XMLExtract.xml" type="str"/>
      </config>
      <description><![CDATA[Extract field values from the XML in Attribute according to the XPath mappings in the ConfigFile]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="XMLMapper" type="general" hidden="0">
      <load module="processors.XMLMapper" class="XMLMapper"/>
      <config>
        <param name="Attribute" value="data" type="str"/>
        <param name="ConfigFile" value="" type="str"/>
      </config>
      <description><![CDATA[Maps XML data specified by XPath references to document attributes
Attribute names the attribute to read the XML content from.  ConfigFile is the
         name of the config file to load from the ConfigServer. It will be fetched from the 
         $FASTSEARCH/etc/config_data/DocumentProcessor directory on the ConfigServer. An
         empty value disables the processor.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOXMLParser" type="general" hidden="0">
      <load module="processors.XMLDP" class="XMLParser"/>
      <config>
        <param name="Attributes" value="conxml:conxml pcxml:pcxml acxml:acxml representativexml:representativexml pcaddressxml:pcaddressxml" type="str"/>
        <param name="MaxErrors" value="20" type="int"/>
        <param name="Strict" value="1" type="int"/>
      </config>
      <description><![CDATA[Parses XML and creates a DOM tree
The Attributes mapping is a sequence of mappings src[:dst] where the destination is optional. With only a source, the DOM tree is added in the &amp;amp;amp;amp;amp;quot;dom&amp;amp;amp;amp;amp;quot; metadata value of the source attribute. With a destination attribute, the attribute gets the DOM tree value.
The Strict flag determines whether any XML error shall create a document error.
The first MaxErrors parse error messages are put in the document log.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOXMLParserDNC" type="general" hidden="0">
      <load module="processors.XMLDP" class="XMLParser"/>
      <config>
        <param name="Attributes" value="pcxml:pcxml conxml:conxml commentxml:commentxml" type="str"/>
        <param name="MaxErrors" value="20" type="int"/>
        <param name="Strict" value="1" type="int"/>
      </config>
      <description><![CDATA[Parses XML and creates a DOM tree
The Attributes mapping is a sequence of mappings src[:dst] where the destination is optional. With only a source, the DOM tree is added in the &quot;dom&quot; metadata value of the source attribute. With a destination attribute, the attribute gets the DOM tree value.
The Strict flag determines whether any XML error shall create a document error.
The first MaxErrors parse error messages are put in the document log.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOXMLParserIDT" type="general" hidden="0">
      <load module="processors.XMLDP" class="XMLParser"/>
      <config>
        <param name="Attributes" value="susxml:susxml aixml:aixml gexml:gexml incidentsxml:incidentsxml conxml:conxml commentxml:commentxml" type="str"/>
        <param name="MaxErrors" value="20" type="int"/>
        <param name="Strict" value="1" type="int"/>
      </config>
      <description><![CDATA[Parses XML and creates a DOM tree
The Attributes mapping is a sequence of mappings src[:dst] where the destination is optional. With only a source, the DOM tree is added in the &amp;quot;dom&amp;quot; metadata value of the source attribute. With a destination attribute, the attribute gets the DOM tree value.
The Strict flag determines whether any XML error shall create a document error.
The first MaxErrors parse error messages are put in the document log.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="NNXMLParser" type="general" hidden="0">
      <load module="processors.XMLDP" class="XMLParser"/>
      <config>
        <param name="Attributes" value="data:xml subjectname:subjectname subjectbasename:subjectbasename" type="str"/>
        <param name="MaxErrors" value="20" type="int"/>
        <param name="Strict" value="1" type="int"/>
      </config>
      <description><![CDATA[Parses XML and creates a DOM tree
The Attributes mapping is a sequence of mappings src[:dst] where the destination is optional. With only a source, the DOM tree is added in the &quot;dom&quot; metadata value of the source attribute. With a destination attribute, the attribute gets the DOM tree value.
The Strict flag determines whether any XML error shall create a document error.
The first MaxErrors parse error messages are put in the document log.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="XMLParser" type="general" hidden="0">
      <load module="processors.XMLDP" class="XMLParser"/>
      <config>
        <param name="Attributes" value="data:xml" type="str"/>
        <param name="MaxErrors" value="20" type="int"/>
        <param name="Strict" value="1" type="int"/>
      </config>
      <description><![CDATA[Parses XML and creates a DOM tree
The Attributes mapping is a sequence of mappings src[:dst] where the destination is optional. With only a source, the DOM tree is added in the "dom" metadata value of the source attribute. With a destination attribute, the attribute gets the DOM tree value.
The Strict flag determines whether any XML error shall create a document error.
The first MaxErrors parse error messages are put in the document log.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOXMLScopifier" type="general" hidden="0">
      <load module="processors.XMLDP" class="XMLScopifier"/>
      <config>
        <param name="AttributeProperties" value="conxml:minute pcxml:minute acxml:minute pcaddressxml:minute representativexml:minute" type="str"/>
        <param name="AutoRealType" value="float" type="str"/>
        <param name="AutoTyping" value="0" type="int"/>
        <param name="Mapping" value="conxml:conxml pcxml:pcxml acxml:acxml  pcaddressxml:pcaddressxml representativexml:representativexml" type="str"/>
        <param name="PreserveWhitespace" value="0" type="int"/>
        <param name="Separator" value="0" type="int"/>
        <param name="TypeAttribute" value="" type="str"/>
        <param name="TypeMap" value="" type="str"/>
      </config>
      <description><![CDATA[Automatically configured for cluster]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOXMLScopifierDNC" type="general" hidden="0">
      <load module="processors.XMLDP" class="XMLScopifier"/>
      <config>
        <param name="AttributeProperties" value="pcxml:minute conxml:minute commentxml:minute" type="str"/>
        <param name="AutoRealType" value="float" type="str"/>
        <param name="AutoTyping" value="0" type="int"/>
        <param name="FallbackType" value="" type="str"/>
        <param name="Mapping" value="pcxml:pcxml conxml:conxml commentxml:commentxml" type="str"/>
        <param name="PreserveWhitespace" value="0" type="int"/>
        <param name="Separator" value="0" type="int"/>
        <param name="TypeAttribute" value="" type="str"/>
        <param name="TypeMap" value="" type="str"/>
      </config>
      <description><![CDATA[Maps XML data to scopes
AttributeProperties sets the datetime resoultion for specific output targets, as named in Mapping, e.g. &quot;field1:second field2:minute&quot;.
If PreserveWhitespace is set to &quot;0&quot;, whitespace between tags is optimized away.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOXMLScopifierIDT" type="general" hidden="0">
      <load module="processors.XMLDP" class="XMLScopifier"/>
      <config>
        <param name="AttributeProperties" value="susxml:minute aixml:minute gexml:minute incidentsxml:minute conxml:minute commentxml:minute" type="str"/>
        <param name="AutoRealType" value="float" type="str"/>
        <param name="AutoTyping" value="0" type="int"/>
        <param name="Mapping" value="susxml:susxml aixml:aixml gexml:gexml incidentsxml:incidentsxml conxml:conxml commentxml:commentxml" type="str"/>
        <param name="PreserveWhitespace" value="0" type="int"/>
        <param name="Separator" value="0" type="int"/>
        <param name="TypeAttribute" value="" type="str"/>
        <param name="TypeMap" value="" type="str"/>
      </config>
      <description><![CDATA[Automatically configured for cluster]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="XMLScopifier" type="general" hidden="0">
      <load module="processors.XMLDP" class="XMLScopifier"/>
      <config>
        <param name="AttributeProperties" value="" type="str"/>
        <param name="AutoRealType" value="float" type="str"/>
        <param name="AutoTyping" value="0" type="int"/>
        <param name="FallbackType" value="string" type="str"/>
        <param name="Mapping" value="data:xml" type="str"/>
        <param name="PreserveWhitespace" value="1" type="int"/>
        <param name="Separator" value="0" type="int"/>
        <param name="TypeAttribute" value="" type="str"/>
        <param name="TypeMap" value="" type="str"/>
      </config>
      <description><![CDATA[Maps XML data to scopes
AttributeProperties sets the datetime resoultion for specific output targets, as named in Mapping, e.g. "field1:second field2:minute".
If PreserveWhitespace is set to "0", whitespace between tags is optimized away.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="XMLScopifier(template)" type="general" hidden="0">
      <load module="processors.XMLDP" class="XMLScopifier"/>
      <config>
        <param name="AttributeProperties" value="" type="str"/>
        <param name="AutoRealType" value="float" type="str"/>
        <param name="AutoTyping" value="0" type="int"/>
        <param name="Mapping" value="" type="str"/>
        <param name="Separator" value="0" type="int"/>
        <param name="TypeAttribute" value="" type="str"/>
        <param name="TypeMap" value="" type="str"/>
      </config>
      <description><![CDATA[Process and translate DOM tree nodes into searchable scopes]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="XMLScopifier(webcluster)" type="general" hidden="0">
      <load module="processors.XMLDP" class="XMLScopifier"/>
      <config>
        <param name="AttributeProperties" value="susxml:minute aixml:minute gexml:minute conxml:minute pcxml:minute acxml:minute pcaddressxml:minute representativexml:minute incidentsxml:minute commentxml:minute" type="str"/>
        <param name="AutoRealType" value="float" type="str"/>
        <param name="AutoTyping" value="0" type="int"/>
        <param name="Mapping" value="susxml:susxml aixml:aixml gexml:gexml conxml:conxml pcxml:pcxml acxml:acxml pcaddressxml:pcaddressxml representativexml:representativexml incidentsxml:incidentsxml commentxml:commentxml" type="str"/>
        <param name="Separator" value="0" type="int"/>
        <param name="TypeAttribute" value="" type="str"/>
        <param name="TypeMap" value="" type="str"/>
      </config>
      <description><![CDATA[Automatically configured for cluster]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="XMLScopifier2" type="general" hidden="0">
      <load module="processors.Scopes" class="XMLScopifier2"/>
      <config>
        <param name="BoostLevels" value="" type="str"/>
        <param name="Lemmatization" value="etc/LemmatizationConfig.xml" type="str"/>
        <param name="Mapping" value="data:xml" type="str"/>
        <param name="TypeAttribute" value="" type="str"/>
        <param name="TypeMap" value="" type="str"/>
        <param name="attributesFirst" value="0" type="int"/>
      </config>
      <description><![CDATA[Maps parsed XML to scopes
]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="XMLScopifier2(template)" type="general" hidden="0">
      <load module="processors.Scopes" class="XMLScopifier2"/>
      <config>
        <param name="BoostLevels" value="" type="str"/>
        <param name="Lemmatization" value="etc/LemmatizationConfig.xml" type="str"/>
        <param name="Mapping" value="" type="str"/>
        <param name="TypeAttribute" value="" type="str"/>
        <param name="TypeMap" value="" type="str"/>
      </config>
      <description><![CDATA[Stage template of processor, used to process and translate DOM tree nodes into searchable scopes.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="XMLScopifier2(webcluster)" type="general" hidden="0">
      <load module="processors.Scopes" class="XMLScopifier2"/>
      <config>
        <param name="BoostLevels" value="" type="str"/>
        <param name="Lemmatization" value="etc/LemmatizationConfig.xml" type="str"/>
        <param name="Mapping" value="susxml:susxml(result:ressusxml,datetimeresolution:minute) aixml:aixml(result:resaixml,datetimeresolution:minute) gexml:gexml(result:resgexml,datetimeresolution:minute) conxml:conxml(result:resconxml,datetimeresolution:minute) pcxml:pcxml(result:respcxml,datetimeresolution:minute) acxml:acxml(result:resacxml,datetimeresolution:minute) pcaddressxml:pcaddressxml(result:respcaddressxml,datetimeresolution:minute) representativexml:representativexml(result:resrepresentativexml,datetimeresolution:minute) incidentsxml:incidentsxml(result:resincidentsxml,datetimeresolution:minute) commentxml:commentxml(result:rescommentxml,datetimeresolution:minute)" type="str"/>
        <param name="TypeAttribute" value="" type="str"/>
        <param name="TypeMap" value="" type="str"/>
      </config>
      <description><![CDATA[Automatically configured for cluster]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="XMLString" type="general" hidden="0">
      <load module="processors.XMLDP" class="XMLString"/>
      <config>
        <param name="Mapping" value="xml:xmlstring" type="str"/>
      </config>
      <description><![CDATA[Render a DOM tree as XML
]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="XMLTruncator" type="general" hidden="0">
      <load module="processors.XMLDP" class="XMLTruncator"/>
      <config>
        <param name="Attribute" value="xml" type="str"/>
        <param name="MaxSize" value="0" type="int"/>
        <param name="SizeAttribute" value="" type="str"/>
      </config>
      <description><![CDATA[Truncates a DOM tree
Use this processor to truncate DOM trees. Insert it after the XMLParser stage. The parameters are:
Attribute : Name of document attribute containing the DOM tree object. The object can be in the attribute directly, or contained in it as meta data "dom".
MaxSize : The maximum size in KB of the DOM tree after truncation. The value '0' means to leave the DOM tree unmodified.
SizeAttribute : Name of a document attribute which contains an estimated upper bound for the size in bytes of the serialized DOM tree. The document size stored in the 'size' attribute may be used for this. Set this value for performance improvements. If the value is set and is below MaxSize * 1024, no traversal of the DOM tree is done.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOXMLifierCIS" type="general" hidden="0">
      <load module="processors.linguistics.Scopification" class="XMLifier"/>
      <config>
        <param name="limit" value="1024" type="int"/>
        <param name="mappings" value="conxml:resconxml pcxml:respcxml acxml:resacxml representativexml:resrepresentativexml pcaddressxml:respcaddressxml" type="str"/>
        <param name="metaprefix" value="@" type="str"/>
      </config>
      <description><![CDATA[Creates an XML rendering of a specified scope type field.
Given a scope type field as produced by the Scopifier processor, creates a string type field containing an XML rendering of the scope field.
An upper limit of the rendered XML string can be given, specified in kB. If the rendered XML is longer than this, the output field instead gets
populated with a small XML error message. The purpose of this is to avoid illegal XML in a document summary field, if the size of the document summary
field is insufficient to store the full XML string. The value of the &amp;#039;limit&amp;#039; parameter should be synchronized with the maximum document summary field
length specified in the index profile.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOXMLifierDNC" type="general" hidden="0">
      <load module="processors.linguistics.Scopification" class="XMLifier"/>
      <config>
        <param name="limit" value="1024" type="int"/>
        <param name="mappings" value="pcxml:respcxml conxml:resconxml commentxml:rescommentxml" type="str"/>
        <param name="metaprefix" value="@" type="str"/>
      </config>
      <description><![CDATA[Automatically configured for cluster]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="LMCOXMLifierIDT" type="general" hidden="0">
      <load module="processors.linguistics.Scopification" class="XMLifier"/>
      <config>
        <param name="limit" value="1024" type="int"/>
        <param name="mappings" value="susxml:ressusxml aixml:resaixml gexml:resgexml  incidentsxml:resincidentsxml conxml:resconxml commentxml:rescommentxml" type="str"/>
        <param name="metaprefix" value="@" type="str"/>
      </config>
      <description><![CDATA[Creates an XML rendering of a specified scope type field.
Given a scope type field as produced by the Scopifier processor, creates a string type field containing an XML rendering of the scope field.
An upper limit of the rendered XML string can be given, specified in kB. If the rendered XML is longer than this, the output field instead gets
populated with a small XML error message. The purpose of this is to avoid illegal XML in a document summary field, if the size of the document summary
field is insufficient to store the full XML string. The value of the &#039;limit&#039; parameter should be synchronized with the maximum document summary field
length specified in the index profile.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="XMLifier" type="general" hidden="0">
      <load module="processors.linguistics.Scopification" class="XMLifier"/>
      <config>
        <param name="limit" value="1024" type="int"/>
        <param name="mappings" value="xml:xmlstring" type="str"/>
        <param name="metaprefix" value="@" type="str"/>
      </config>
      <description><![CDATA[Creates an XML rendering of a specified scope type field.
Given a scope type field as produced by the Scopifier processor, creates a string type field containing an XML rendering of the scope field.
An upper limit of the rendered XML string can be given, specified in kB. If the rendered XML is longer than this, the output field instead gets
populated with a small XML error message. The purpose of this is to avoid illegal XML in a document summary field, if the size of the document summary
field is insufficient to store the full XML string. The value of the 'limit' parameter should be synchronized with the maximum document summary field
length specified in the index profile.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="XMLifier(template)" type="general" hidden="0">
      <load module="processors.linguistics.Scopification" class="XMLifier"/>
      <config>
        <param name="limit" value="1024" type="int"/>
        <param name="mappings" value="" type="str"/>
        <param name="metaprefix" value="@" type="str"/>
      </config>
      <description><![CDATA[Stage template of processor that generates XML
      from scope trees.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="XMLifier(webcluster)" type="general" hidden="0">
      <load module="processors.linguistics.Scopification" class="XMLifier"/>
      <config>
        <param name="limit" value="1024" type="int"/>
        <param name="mappings" value="susxml:ressusxml aixml:resaixml gexml:resgexml conxml:resconxml pcxml:respcxml acxml:resacxml pcaddressxml:respcaddressxml representativexml:resrepresentativexml incidentsxml:resincidentsxml commentxml:rescommentxml" type="str"/>
        <param name="metaprefix" value="@" type="str"/>
      </config>
      <description><![CDATA[Automatically configured for cluster]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="XPSConverter" type="general" hidden="0">
      <load module="processors.XPSConverter" class="XPSConverter"/>
      <config>
      </config>
      <description><![CDATA[Converts XPS documents to html
]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="XSLT" type="general" hidden="0">
      <load module="processors.XMLDP" class="XSLT"/>
      <config>
        <param name="Attributes" value="xml" type="str"/>
        <param name="Stylesheet" value="" type="str"/>
      </config>
      <description><![CDATA[Applies an XSLT to a DOM tree
The XSLT is applied to the DOM trees in Attributes with a preference to the "dom" metadata.
The Stylesheet is loaded from the DocumentProcessor directory on the config server.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="RowSetXSLT" type="general" hidden="0">
      <load module="processors.XsltProc" class="XsltProc"/>
      <config>
        <param name="attrib" value="data" type="str"/>
        <param name="sspath" value="etc/RowSetXSLT.xml" type="str"/>
        <param name="syntax" value="xml" type="str"/>
      </config>
      <description><![CDATA[Perform XSLT processing on document. Parameter "sspath" is path to the stylesheet. Parameter "syntax" should be either "html" or "xml" - HTML documents cannot use strict XML parsing. Parameter "attrib" is the name of the document attribute that contains the XML (or HTM) document.]]></description>
      <inputs>
      </inputs>
    </processor>

    <processor name="XsltProc" type="general" hidden="0">
      <load module="processors.XsltProc" class="XsltProc"/>
      <config>
        <param name="attrib" value="data" type="str"/>
        <param name="sspath" value="etc/parsehtml.xml" type="str"/>
        <param name="syntax" value="html" type="str"/>
      </config>
      <description><![CDATA[Perform XSLT processing on document (DEPRECATED: use XSLT)
Parameter "sspath" is path to the stylesheet. Parameter "syntax" should be either "html" or "xml" - HTML documents cannot use strict XML parsing. Parameter "attrib" is the name of the document attribute that contains the XML (or HTM) document.]]></description>
      <inputs>
      </inputs>
    </processor>

  </processors>

  <pipelines>

    <pipeline name="Alerts (webcluster)" default="0">
      <description><![CDATA[Pipeline for feeding Alerts collection]]></description>
      <priority>0</priority>
      <processor name="DocInit"/>
      <processor name="LMCOSystemIDAssigner"/>
      <processor name="LMCOSystemIDToDocacl"/>
      <processor name="ACLEncoder"/>
      <processor name="LMCOCopyCollectionName"/>
      <processor name="LMCOCapitalizerMultivalueAlerts"/>
      <processor name="LMCORegexChangerSSN"/>
      <processor name="LMCORegexChangerCC"/>
      <processor name="LMCOSetProcessingTime"/>
      <processor name="TeaserGenerator"/>
      <processor name="Tokenizer(webcluster)"/>
      <processor name="Lemmatizer(webcluster)"/>
      <processor name="EntityVectorizer"/>
      <processor name="Vectorizer(webcluster)"/>
      <processor name="DateTimeNormalizer(webcluster)"/>
      <processor name="DateTimeSelector(webcluster)"/>
      <processor name="LMCODateTimeModifier"/>
      <processor name="MapperTransformer"/>
      <processor name="RankTuner"/>
      <processor name="FIXMLGenerator"/>
      <processor name="RTSOutput"/>
    </pipeline>

    <pipeline name="CISMain (webcluster)" default="0">
      <description><![CDATA[CISMain Document Processor Pipeline]]></description>
      <priority>0</priority>
      <processor name="DocInit"/>
      <processor name="LMCOSystemIDAssigner"/>
      <processor name="LMCOSystemIDToDocacl"/>
      <processor name="ACLEncoder"/>
      <processor name="LMCOInvalidCharactersChangerpcxml"/>
      <processor name="LMCOInvalidCharacterChangerconxml"/>
      <processor name="LMCOInvalidCharactersChangeracxml"/>
      <processor name="LMCOHTMLEncoder1"/>
      <processor name="LMCOHTMLEncoder2"/>
      <processor name="LMCOXMLParser"/>
      <processor name="XMLScopifier(webcluster)"/>
      <processor name="LMCOCopyCollectionName"/>
      <processor name="LMCOCapitalizerMultivalue"/>
      <processor name="LMCOMergeSubjectName"/>
      <processor name="LMCOMergeSubjectCity"/>
      <processor name="LMCOMergeSubjectState"/>
      <processor name="LMCOMergeSubjectCountry"/>
      <processor name="LMCOMergeSubjectPhone"/>
      <processor name="LMCOTildaRemoverSubectName"/>
      <processor name="LMCOTildeRemoverSubjectPhone"/>
      <processor name="LMCOTildaRemoverSubjectCity"/>
      <processor name="LMCOTildaRemoverSubjectState"/>
      <processor name="LMCOTildaRemoverSubjectCountry"/>
      <processor name="LMCOSubjectPhoneNav"/>
      <processor name="LMCODuplicatesDeleter"/>
      <processor name="LMCORegexChangerSSN"/>
      <processor name="LMCORegexChangerCC"/>
      <processor name="LMCOCompanyExtractor"/>
      <processor name="LMCOCompanyPartialExtractor"/>
      <processor name="LMCOEntityNormalizer"/>
      <processor name="LMCOCityExtractor"/>
      <processor name="LMCOSetProcessingTime"/>
      <processor name="TeaserGenerator"/>
      <processor name="Tokenizer(webcluster)"/>
      <processor name="ScopeTokenizer(webcluster)"/>
      <processor name="LMCOXMLifierCIS"/>
      <processor name="Lemmatizer(webcluster)"/>
      <processor name="EntityVectorizer"/>
      <processor name="Vectorizer(webcluster)"/>
      <processor name="DateTimeNormalizer(webcluster)"/>
      <processor name="DateTimeSelector(webcluster)"/>
      <processor name="LMCODateTimeModifier"/>
      <processor name="MapperTransformer"/>
      <processor name="RankTuner"/>
      <processor name="FIXMLGenerator"/>
      <processor name="RTSOutput"/>
    </pipeline>

    <pipeline name="CISMainBaseName (webcluster)" default="0">
      <description><![CDATA[Test pipeline for including base company name]]></description>
      <priority>0</priority>
      <processor name="DocInit"/>
      <processor name="LMCOSystemIDAssigner"/>
      <processor name="LMCOSystemIDToDocacl"/>
      <processor name="ACLEncoder"/>
      <processor name="LMCOInvalidCharactersChanger"/>
      <processor name="LMCOInvalidCharactersChangerConXML"/>
      <processor name="LMCOInvalidCharactersChangerACXML"/>
      <processor name="LMCOHTMLEncoder1"/>
      <processor name="LMCOHTMLEncoder2"/>
      <processor name="LMCOXMLParser"/>
      <processor name="XMLScopifier(webcluster)"/>
      <processor name="LMCOCopyCollectionName"/>
      <processor name="LMCOCapitalizerMultivalue"/>
      <processor name="LMCOMergeSubjectName"/>
      <processor name="LMCOMergeSubjectCity"/>
      <processor name="LMCOMergeSubjectState"/>
      <processor name="LMCOMergeSubjectCountry"/>
      <processor name="LMCOMergeSubjectPhone"/>
      <processor name="LMCOConditionalCopy"/>
      <processor name="LMCOSubjectPhoneNav"/>
      <processor name="LMCOTildaRemoverSubectName"/>
      <processor name="LMCOTildaRemoverSubjectCity"/>
      <processor name="LMCOTildaRemoverSubjectState"/>
      <processor name="LMCOTildaRemoverSubjectCountry"/>
      <processor name="LMCODuplicatesDeleter"/>
      <processor name="LMCORegexChangerSSN"/>
      <processor name="LMCORegexChangerCC"/>
      <processor name="LMCOCompanyExtractor"/>
      <processor name="LMCOCompanyPartialExtractor"/>
      <processor name="LMCOCityExtractor"/>
      <processor name="LMCOSetProcessingTime"/>
      <processor name="TeaserGenerator"/>
      <processor name="Tokenizer(webcluster)"/>
      <processor name="ScopeTokenizer(webcluster)"/>
      <processor name="LMCOXMLifierCIS"/>
      <processor name="Lemmatizer(webcluster)"/>
      <processor name="LMCOEntityNormalizer"/>
      <processor name="LMCOSubjectNameNormalizerNew"/>
      <processor name="EntityVectorizer"/>
      <processor name="Vectorizer(webcluster)"/>
      <processor name="DateTimeNormalizer(webcluster)"/>
      <processor name="DateTimeSelector(webcluster)"/>
      <processor name="LMCODateTimeModifier"/>
      <processor name="MapperTransformer"/>
      <processor name="RankTuner"/>
      <processor name="FIXMLGenerator"/>
      <processor name="RTSOutput"/>
    </pipeline>

    <pipeline name="CISMainLinguistics (webcluster)" default="0">
      <description><![CDATA[This pipeline strips down address2 components like suite, floor, unit etc from the subjectaddress field]]></description>
      <priority>0</priority>
      <processor name="DocInit"/>
      <processor name="LMCOSystemIDAssigner"/>
      <processor name="LMCOSystemIDToDocacl"/>
      <processor name="ACLEncoder"/>
      <processor name="LMCOInvalidCharactersChanger"/>
      <processor name="LMCOInvalidCharactersChangerConXML"/>
      <processor name="LMCOInvalidCharactersChangerACXML"/>
      <processor name="LMCOHTMLEncoder1"/>
      <processor name="LMCOHTMLEncoder2"/>
      <processor name="LMCOXMLParser"/>
      <processor name="XMLScopifier(webcluster)"/>
      <processor name="LMCOCopyCollectionName"/>
      <processor name="LMCOCapitalizerMultivalue"/>
      <processor name="LMCOMergeSubjectName"/>
      <processor name="LMCOMergeSubjectCity"/>
      <processor name="LMCOMergeSubjectState"/>
      <processor name="LMCOMergeSubjectCountry"/>
      <processor name="LMCOSubjectEmailMerger"/>
      <processor name="LMCOSubjectURLMerger"/>
      <processor name="LMCOConditionalCopy"/>
      <processor name="LMCOAssociatedCompanyNameCopy"/>
      <processor name="LMCOLowercaseMultivalue"/>
      <processor name="LMCOURLRegExNormalizer1"/>
      <processor name="LMCOURLRegExNormalizer2"/>
      <processor name="LMCOURLRegExNormalizer3"/>
      <processor name="LMCOURLRegExNormalizer4"/>
      <processor name="LMCOURLRegExNormalizer5"/>
      <processor name="LMCOSubjectPhoneNav"/>
      <processor name="LMCOTildaRemoverSubectName"/>
      <processor name="LMCOTildaRemoverSubjectCity"/>
      <processor name="LMCOTildaRemoverSubjectState"/>
      <processor name="LMCOTildaRemoverSubjectCountry"/>
      <processor name="LMCODuplicatesDeleter"/>
      <processor name="LMCORegexChangerSSN"/>
      <processor name="LMCORegexChangerCC"/>
      <processor name="LMCOCompanyExtractor"/>
      <processor name="LMCOCompanyPartialExtractor"/>
      <processor name="LMCOCityExtractor"/>
      <processor name="LMCOaddress2Remover1"/>
      <processor name="LMCOaddress2Remover2"/>
      <processor name="StreetSuffixRemover"/>
      <processor name="LMCOSpy"/>
      <processor name="CreateNgrams6"/>
      <processor name="CreateNgrams8"/>
      <processor name="CreateNgrams10"/>
      <processor name="CreateNgrams11"/>
      <processor name="CreateNgrams12"/>
      <processor name="CreateNgrams13"/>
      <processor name="CreateNgrams14"/>
      <processor name="LMCOSetProcessingTime"/>
      <processor name="TeaserGenerator"/>
      <processor name="Tokenizer(webcluster)"/>
      <processor name="ScopeTokenizer(webcluster)"/>
      <processor name="LMCOXMLifierCIS"/>
      <processor name="Lemmatizer(webcluster)"/>
      <processor name="LMCOEntityNormalizer"/>
      <processor name="LMCOSubjectNameNormalizerNew"/>
      <processor name="LMCOAssociatedNameNormalizerNew"/>
      <processor name="EntityVectorizer"/>
      <processor name="Vectorizer(webcluster)"/>
      <processor name="DateTimeNormalizer(webcluster)"/>
      <processor name="DateTimeSelector(webcluster)"/>
      <processor name="LMCODateTimeModifier"/>
      <processor name="MapperTransformer"/>
      <processor name="RankTuner"/>
      <processor name="FIXMLGenerator"/>
      <processor name="RTSOutput"/>
    </pipeline>

    <pipeline name="CISMainPhonetic (webcluster)" default="0">
      <description><![CDATA[This is inherited from CISMainLinguistics pipeline for testing phonetic expansion]]></description>
      <priority>0</priority>
      <processor name="DocInit"/>
      <processor name="LMCOSystemIDAssigner"/>
      <processor name="LMCOSystemIDToDocacl"/>
      <processor name="ACLEncoder"/>
      <processor name="LMCOLanguageAndEncodingDetector"/>
      <processor name="LMCOInvalidCharactersChanger"/>
      <processor name="LMCOInvalidCharactersChangerConXML"/>
      <processor name="LMCOInvalidCharactersChangerACXML"/>
      <processor name="ReadEntityDocuments"/>
      <processor name="Spy"/>
      <processor name="LMCOHTMLEncoder1"/>
      <processor name="LMCOHTMLEncoder2"/>
      <processor name="LMCOLTGTChanger"/>
      <processor name="SentenceScopifier"/>
      <processor name="AddSentenceNode"/>
      <processor name="LMCOXMLParser"/>
      <processor name="LMCOXMLScopifier"/>
      <processor name="LMCOCopyCollectionName"/>
      <processor name="LMCOCapitalizerMultivalue"/>
      <processor name="LMCOMergeSubjectName"/>
      <processor name="LMCOMergeSubjectCity"/>
      <processor name="LMCOMergeSubjectState"/>
      <processor name="LMCOMergeSubjectCountry"/>
      <processor name="LMCOSubjectEmailMerger"/>
      <processor name="LMCOSubjectURLMerger"/>
      <processor name="LMCOConditionalCopy"/>
      <processor name="LMAssociatedCompanyNameToNavCopy"/>
      <processor name="LMCOAssociatedCompanyNameCopy"/>
      <processor name="LMCOLowercaseMultivalue"/>
      <processor name="LMCOURLRegExNormalizer1"/>
      <processor name="LMCOURLRegExNormalizer2"/>
      <processor name="LMCOURLRegExNormalizer2-1"/>
      <processor name="LMCOURLRegExNormalizer3"/>
      <processor name="LMCOURLRegExNormalizer4"/>
      <processor name="LMCOURLRegExNormalizer5"/>
      <processor name="LMCOSubjectPhoneNav"/>
      <processor name="LMCOTildaRemoverSubectName"/>
      <processor name="LMCOTildaRemoverSubjectCity"/>
      <processor name="LMCOTildaRemoverSubjectState"/>
      <processor name="LMCOTildaRemoverSubjectCountry"/>
      <processor name="LMCORegexChangerSSN"/>
      <processor name="LMCORegexChangerCC"/>
      <processor name="FastHTMLParser"/>
      <processor name="LMCOCompanyExtractor"/>
      <processor name="LMCOCompanyPartialExtractor"/>
      <processor name="LMCOCityExtractor"/>
      <processor name="LMCOaddress2Remover1"/>
      <processor name="LMCOaddress2Remover2"/>
      <processor name="StreetSuffixRemover"/>
      <processor name="LMCOSetProcessingTime"/>
      <processor name="TeaserGenerator"/>
      <processor name="Tokenizer(webcluster)"/>
      <processor name="ScopeTokenizer(webcluster)"/>
      <processor name="LMCOXMLifierCIS"/>
      <processor name="Lemmatizer(webcluster)"/>
      <processor name="LMCOSubjectNameNormalizerNew"/>
      <processor name="LMCOAssociatedNameNormalizerNew"/>
      <processor name="LMCOEntityNormalizer"/>
      <processor name="LMCODuplicatesDeleter"/>
      <processor name="LMCOSubjectNameStripper"/>
      <processor name="LMCOCopyToSubjectBaseNameStrippedPhonetic"/>
      <processor name="LMCOPhoneticNormalizer"/>
      <processor name="LMCOPhoneticNormalizerSubjectCity"/>
      <processor name="LMCOPhoneticNormalizerConsumerCity"/>
      <processor name="CreateNgrams6"/>
      <processor name="CreateNgrams8"/>
      <processor name="CreateNgrams10"/>
      <processor name="CreateNgrams12"/>
      <processor name="CreateNgrams14"/>
      <processor name="CreateNgramsSubjectName6"/>
      <processor name="CreateNgramsSubjectName8"/>
      <processor name="CreateNgramsSubjectName10"/>
      <processor name="CreateNgramsSubjectName12"/>
      <processor name="CreateNgramsSubjectName14"/>
      <processor name="EncodingSubjectngramfield6"/>
      <processor name="EncodingnormalizerSubjectngramfield8"/>
      <processor name="EncodingnormalizerSubjectngramfield10"/>
      <processor name="EncodingnormalizerSubjectngramfield12"/>
      <processor name="EncodingnormalizerSubjectngramfield14"/>
      <processor name="EntityVectorizer"/>
      <processor name="Vectorizer(webcluster)"/>
      <processor name="DateTimeNormalizer(webcluster)"/>
      <processor name="DateTimeSelector(webcluster)"/>
      <processor name="LMCODateTimeModifier"/>
      <processor name="MapperTransformer"/>
      <processor name="RankTuner"/>
      <processor name="FIXMLGenerator"/>
      <processor name="RTSOutput"/>
    </pipeline>

    <pipeline name="CISMainPhraseTest (webcluster)" default="0">
      <description><![CDATA[CReated to test index phrase data]]></description>
      <priority>0</priority>
      <processor name="DocInit"/>
      <processor name="LMCOSystemIDAssigner"/>
      <processor name="LMCOSystemIDToDocacl"/>
      <processor name="ACLEncoder"/>
      <processor name="LMCOLanguageAndEncodingDetector"/>
      <processor name="LMCOInvalidCharactersChanger"/>
      <processor name="LMCOInvalidCharactersChangerConXML"/>
      <processor name="LMCOInvalidCharactersChangerACXML"/>
      <processor name="ReadEntityFromDBv01"/>
      <processor name="LMCOSpy"/>
      <processor name="LMCOHTMLEncoder1"/>
      <processor name="LMCOHTMLEncoder2"/>
      <processor name="LMCOXMLParser"/>
      <processor name="LMCOXMLScopifier"/>
      <processor name="LMCOCopyCollectionName"/>
      <processor name="LMCOCapitalizerMultivalue"/>
      <processor name="LMCOMergeSubjectName"/>
      <processor name="LMCOMergeSubjectCity"/>
      <processor name="LMCOMergeSubjectState"/>
      <processor name="LMCOMergeSubjectCountry"/>
      <processor name="LMCOSubjectEmailMerger"/>
      <processor name="LMCOSubjectURLMerger"/>
      <processor name="LMCOConditionalCopy"/>
      <processor name="LMAssociatedCompanyNameToNavCopy"/>
      <processor name="LMCOAssociatedCompanyNameCopy"/>
      <processor name="LMCOLowercaseMultivalue"/>
      <processor name="LMCOURLRegExNormalizer1"/>
      <processor name="LMCOURLRegExNormalizer2"/>
      <processor name="LMCOURLRegExNormalizer2-1"/>
      <processor name="LMCOURLRegExNormalizer3"/>
      <processor name="LMCOURLRegExNormalizer4"/>
      <processor name="LMCOURLRegExNormalizer5"/>
      <processor name="LMCOSubjectPhoneNav"/>
      <processor name="LMCOTildaRemoverSubectName"/>
      <processor name="LMCOTildaRemoverSubjectCity"/>
      <processor name="LMCOTildaRemoverSubjectState"/>
      <processor name="LMCOTildaRemoverSubjectCountry"/>
      <processor name="LMCORegexChangerSSN"/>
      <processor name="LMCORegexChangerCC"/>
      <processor name="FastHTMLParser"/>
      <processor name="LMCOCompanyExtractor"/>
      <processor name="LMCOCompanyPartialExtractor"/>
      <processor name="LMCOCityExtractor"/>
      <processor name="LMCOaddress2Remover1"/>
      <processor name="LMCOaddress2Remover2"/>
      <processor name="StreetSuffixRemover"/>
      <processor name="LMCOSetProcessingTime"/>
      <processor name="TeaserGenerator"/>
      <processor name="Tokenizer(webcluster)"/>
      <processor name="LMCOScopeTokenizerCIS"/>
      <processor name="LMCOXMLifierCIS"/>
      <processor name="Lemmatizer(webcluster)"/>
      <processor name="LMCOSubjectNameNormalizerNew"/>
      <processor name="LMCOAssociatedNameNormalizerNew"/>
      <processor name="LMCOEntityNormalizer"/>
      <processor name="LMCODuplicatesDeleter"/>
      <processor name="LMCOSubjectNameStripper"/>
      <processor name="LMCOCopyToSubjectBaseNameStrippedPhonetic"/>
      <processor name="LMCOPhoneticNormalizer"/>
      <processor name="LMCOPhoneticNormalizerSubjectCity"/>
      <processor name="LMCOPhoneticNormalizerConsumerCity"/>
      <processor name="CreateNgrams6"/>
      <processor name="CreateNgrams8"/>
      <processor name="CreateNgrams10"/>
      <processor name="CreateNgrams12"/>
      <processor name="CreateNgrams14"/>
      <processor name="CreateNgramsSubjectName6"/>
      <processor name="CreateNgramsSubjectName8"/>
      <processor name="CreateNgramsSubjectName10"/>
      <processor name="CreateNgramsSubjectName12"/>
      <processor name="CreateNgramsSubjectName14"/>
      <processor name="EncodingSubjectngramfield6"/>
      <processor name="EncodingnormalizerSubjectngramfield8"/>
      <processor name="EncodingnormalizerSubjectngramfield10"/>
      <processor name="EncodingnormalizerSubjectngramfield12"/>
      <processor name="EncodingnormalizerSubjectngramfield14"/>
      <processor name="EntityVectorizer"/>
      <processor name="Vectorizer(webcluster)"/>
      <processor name="DateTimeNormalizer(webcluster)"/>
      <processor name="DateTimeSelector(webcluster)"/>
      <processor name="LMCODateTimeModifier"/>
      <processor name="MapperTransformer"/>
      <processor name="RankTuner"/>
      <processor name="FIXMLGenerator"/>
      <processor name="RTSOutput"/>
    </pipeline>

    <pipeline name="CISMainScope (webcluster)" default="0">
      <description><![CDATA[]]></description>
      <priority>0</priority>
      <processor name="DocInit"/>
      <processor name="LMCOSystemIDAssigner"/>
      <processor name="LMCOSystemIDToDocacl"/>
      <processor name="ACLEncoder"/>
      <processor name="LMCOXMLParser"/>
      <processor name="XMLScopifier(webcluster)"/>
      <processor name="LMCOCopyCollectionName"/>
      <processor name="LMCOCapitalizerMultivalue"/>
      <processor name="LMCOMergeSubjectName"/>
      <processor name="LMCOMergeSubjectCity"/>
      <processor name="LMCOMergeSubjectState"/>
      <processor name="LMCOMergeSubjectCountry"/>
      <processor name="LMCODuplicatesDeleter"/>
      <processor name="LMCORegexChangerSSN"/>
      <processor name="LMCORegexChangerCC"/>
      <processor name="LMCOCompanyExtractor"/>
      <processor name="LMCOCompanyPartialExtractor"/>
      <processor name="LMCOEntityNormalizer"/>
      <processor name="LMCOCityExtractor"/>
      <processor name="LMCOSetProcessingTime"/>
      <processor name="TeaserGenerator"/>
      <processor name="Tokenizer(webcluster)"/>
      <processor name="Lemmatizer(webcluster)"/>
      <processor name="EntityVectorizer"/>
      <processor name="Vectorizer(webcluster)"/>
      <processor name="DateTimeNormalizer(webcluster)"/>
      <processor name="DateTimeSelector(webcluster)"/>
      <processor name="LMCODateTimeModifier"/>
      <processor name="MapperTransformer"/>
      <processor name="RankTuner"/>
      <processor name="FIXMLGenerator"/>
      <processor name="RTSOutput"/>
    </pipeline>

    <pipeline name="CustomLinguistics" default="1">
      <description><![CDATA[Demonstrates usage of some non-default linguistic modules]]></description>
      <priority>0</priority>
      <processor name="DocInit"/>
      <processor name="DocumentRetriever"/>
      <processor name="URLProcessor"/>
      <processor name="Decompressor"/>
      <processor name="FormatDetector"/>
      <processor name="SimpleConverter"/>
      <processor name="FlashConverter"/>
      <processor name="PDFConverter"/>
      <processor name="XPSConverter"/>
      <processor name="SearchExportConverter"/>
      <processor name="LanguageAndEncodingDetector"/>
      <processor name="EncodingNormalizer"/>
      <processor name="FastHTMLParser"/>
      <processor name="LanguageDetectorTextParts"/>
      <processor name="Stan3Address"/>
      <processor name="Tokenizer"/>
      <processor name="OffensiveContentFilter"/>
      <processor name="SynonymExpander"/>
      <processor name="Lemmatizer"/>
      <processor name="SentenceBoundaryDetector"/>
      <processor name="POSTagger"/>
      <processor name="npExtractor0"/>
      <processor name="npExtractor1"/>
      <processor name="EntityVectorizer"/>
      <processor name="PersonExtractorWhiteListSpecific"/>
      <processor name="PersonExtractorWhiteListAny"/>
      <processor name="PersonExtractor1"/>
      <processor name="PersonExtractor2"/>
      <processor name="PhoneticNormalizer"/>
      <processor name="DateTimeNormalizer"/>
      <processor name="DateTimeSelector"/>
      <processor name="MapperTransformer"/>
      <processor name="RankTuner"/>
      <processor name="DocumentSecurityUnknown"/>
      <processor name="FIXMLGenerator"/>
      <processor name="RTSOutput"/>
    </pipeline>

    <pipeline name="CustomLinguistics (webcluster)" default="1">
      <description><![CDATA[For cluster "webcluster". Demonstrates usage of some non-default linguistic modules (based on index-profile)]]></description>
      <priority>0</priority>
      <processor name="DocInit"/>
      <processor name="DocumentRetriever"/>
      <processor name="URLProcessor"/>
      <processor name="Decompressor"/>
      <processor name="FormatDetector"/>
      <processor name="SimpleConverter"/>
      <processor name="FlashConverter"/>
      <processor name="PDFConverter"/>
      <processor name="XPSConverter"/>
      <processor name="SearchExportConverter"/>
      <processor name="LanguageAndEncodingDetector"/>
      <processor name="EncodingNormalizer"/>
      <processor name="FastHTMLParser"/>
      <processor name="LanguageDetectorTextParts"/>
      <processor name="Stan3Address"/>
      <processor name="Tokenizer(webcluster)"/>
      <processor name="OffensiveContentFilter"/>
      <processor name="SynonymExpander"/>
      <processor name="Lemmatizer(webcluster)"/>
      <processor name="SentenceBoundaryDetector"/>
      <processor name="POSTagger"/>
      <processor name="npExtractor0"/>
      <processor name="npExtractor1"/>
      <processor name="EntityVectorizer"/>
      <processor name="PersonExtractorWhiteListSpecific"/>
      <processor name="PersonExtractorWhiteListAny"/>
      <processor name="PersonExtractor1"/>
      <processor name="PersonExtractor2"/>
      <processor name="PhoneticNormalizer"/>
      <processor name="DateTimeNormalizer(webcluster)"/>
      <processor name="DateTimeSelector(webcluster)"/>
      <processor name="MapperTransformer"/>
      <processor name="RankTuner"/>
      <processor name="DocumentSecurityUnknown"/>
      <processor name="FIXMLGenerator"/>
      <processor name="RTSOutput"/>
    </pipeline>

    <pipeline name="DNCMain (webcluster)" default="0">
      <description><![CDATA[DNCMain Document Processor Pipeline]]></description>
      <priority>0</priority>
      <processor name="DocInit"/>
      <processor name="LMCOSystemIDAssigner"/>
      <processor name="LMCOSystemIDToDocacl"/>
      <processor name="ACLEncoder"/>
      <processor name="LMCOCopyCollectionName"/>
      <processor name="LMCOCapitalizerMultivalueDNC"/>
      <processor name="LMCODuplicatesDeleterDNC"/>
      <processor name="LMCORegexChangerSSN"/>
      <processor name="LMCOMergeSubjectPhone"/>
      <processor name="LMCOTildeRemoverSubjectPhone"/>
      <processor name="LMCOSubjectPhoneNav"/>
      <processor name="LMCORegexChangerCC"/>
      <processor name="LMCOCopyState"/>
      <processor name="LMCOCopyName"/>
      <processor name="LMCOCompanyExtractor"/>
      <processor name="LMCOCompanyPartialExtractor"/>
      <processor name="LMCOEntityNormalizer"/>
      <processor name="LMCOCityExtractor"/>
      <processor name="LMCOSetProcessingTime"/>
      <processor name="TeaserGenerator"/>
      <processor name="Tokenizer(webcluster)"/>
      <processor name="Lemmatizer(webcluster)"/>
      <processor name="EntityVectorizer"/>
      <processor name="Vectorizer(webcluster)"/>
      <processor name="DateTimeNormalizer(webcluster)"/>
      <processor name="DateTimeSelector(webcluster)"/>
      <processor name="LMCODateTimeModifier"/>
      <processor name="MapperTransformer"/>
      <processor name="RankTuner"/>
      <processor name="FIXMLGenerator"/>
      <processor name="RTSOutput"/>
    </pipeline>

    <pipeline name="DNCMainBaseName (webcluster)" default="0">
      <description><![CDATA[DNCMain pipeline with stages for name normalization]]></description>
      <priority>0</priority>
      <processor name="DocInit"/>
      <processor name="LMCOSystemIDAssigner"/>
      <processor name="LMCOSystemIDToDocacl"/>
      <processor name="ACLEncoder"/>
      <processor name="LMCOXMLParserDNC"/>
      <processor name="LMCOXMLScopifierDNC"/>
      <processor name="LMCOCopyCollectionName"/>
      <processor name="LMCOCapitalizerMultivalueDNC"/>
      <processor name="LMCODuplicatesDeleterDNC"/>
      <processor name="LMCORegexChangerSSN"/>
      <processor name="LMCORegexChangerCC"/>
      <processor name="LMCOCopyState"/>
      <processor name="LMCOCopyName"/>
      <processor name="LMCOConditionalCopy"/>
      <processor name="LMCOMergeSubjectPhone"/>
      <processor name="LMCOSubjectPhoneNav"/>
      <processor name="LMCOCompanyExtractor"/>
      <processor name="LMCOCompanyPartialExtractor"/>
      <processor name="LMCOCityExtractor"/>
      <processor name="LMCOSetProcessingTime"/>
      <processor name="TeaserGenerator"/>
      <processor name="Tokenizer(webcluster)"/>
      <processor name="ScopeTokenizer(webcluster)"/>
      <processor name="LMCOXMLifierDNC"/>
      <processor name="LMCOSubjectNameNormalizerNew"/>
      <processor name="Lemmatizer(webcluster)"/>
      <processor name="EntityVectorizer"/>
      <processor name="Vectorizer(webcluster)"/>
      <processor name="DateTimeNormalizer(webcluster)"/>
      <processor name="DateTimeSelector(webcluster)"/>
      <processor name="LMCODateTimeModifier"/>
      <processor name="MapperTransformer"/>
      <processor name="RankTuner"/>
      <processor name="FIXMLGenerator"/>
      <processor name="RTSOutput"/>
    </pipeline>

    <pipeline name="DNCMainBaseNameFindSimilar (webcluster)" default="0">
      <description><![CDATA[DNCMainBaseName pipeline with Find Similar Stages]]></description>
      <priority>0</priority>
      <processor name="DocInit"/>
      <processor name="LMCOSystemIDAssigner"/>
      <processor name="LMCOSystemIDToDocacl"/>
      <processor name="ACLEncoder"/>
      <processor name="LMCOLTGTChanger"/>
      <processor name="SentenceScopifier"/>
      <processor name="AddSentenceNode"/>
      <processor name="LMCOXMLParserDNC"/>
      <processor name="LMCOXMLScopifierDNC"/>
      <processor name="LMCOCopyCollectionName"/>
      <processor name="LMCOCapitalizerMultivalueDNC"/>
      <processor name="LMCORegexChangerSSN"/>
      <processor name="LMCORegexChangerCC"/>
      <processor name="LMCOCopyState"/>
      <processor name="LMCOCopyName"/>
      <processor name="LMCOConditionalCopy"/>
      <processor name="LMCOEncodingNormalizer"/>
      <processor name="LMCOMergeSubjectPhone"/>
      <processor name="LMCOSubjectPhoneNav"/>
      <processor name="LMCOSubjectEmailMerger"/>
      <processor name="LMCOSubjectURLMerger"/>
      <processor name="LMCOCompanyExtractor"/>
      <processor name="LMCOCompanyPartialExtractor"/>
      <processor name="LMCOCityExtractor"/>
      <processor name="TeaserGenerator"/>
      <processor name="Tokenizer(webcluster)"/>
      <processor name="ScopeTokenizer(webcluster)"/>
      <processor name="LMCOXMLifierDNC"/>
      <processor name="Lemmatizer(webcluster)"/>
      <processor name="LMCOSubjectNameNormalizerNew"/>
      <processor name="LMCOEntityNormalizer"/>
      <processor name="LMCODuplicatesDeleterDNC"/>
      <processor name="LMCOSubjectNameStripper"/>
      <processor name="LMCOCopyToSubjectBaseNameStrippedPhonetic"/>
      <processor name="LMCOPhoneticNormalizer"/>
      <processor name="CreateNgramsSubjectName6"/>
      <processor name="CreateNgramsSubjectName7"/>
      <processor name="CreateNgramsSubjectName8"/>
      <processor name="CreateNgramsSubjectName9"/>
      <processor name="CreateNgramsSubjectName10"/>
      <processor name="CreateNgramsSubjectName11"/>
      <processor name="CreateNgramsSubjectName12"/>
      <processor name="CreateNgramsSubjectName13"/>
      <processor name="CreateNgramsSubjectName14"/>
      <processor name="LMCOSetProcessingTime"/>
      <processor name="EntityVectorizer"/>
      <processor name="Vectorizer(webcluster)"/>
      <processor name="DateTimeNormalizer(webcluster)"/>
      <processor name="DateTimeSelector(webcluster)"/>
      <processor name="LMCODateTimeModifier"/>
      <processor name="MapperTransformer"/>
      <processor name="RankTuner"/>
      <processor name="FIXMLGenerator"/>
      <processor name="RTSOutput"/>
    </pipeline>

    <pipeline name="DocML" default="1">
      <description><![CDATA[DocML Pipeline.]]></description>
      <priority>0</priority>
      <processor name="DocInit"/>
      <processor name="MergeDocML"/>
      <processor name="CopyUri"/>
      <processor name="XMLExtract"/>
      <processor name="XMLLanguageDetector"/>
      <processor name="XMLScopifier2"/>
      <processor name="Tokenizer"/>
      <processor name="Lemmatizer"/>
      <processor name="Vectorizer"/>
      <processor name="DateTimeNormalizer"/>
      <processor name="DateTimeSelector"/>
      <processor name="MapperTransformer"/>
      <processor name="RankTuner"/>
      <processor name="DocumentSecurityUnknown"/>
      <processor name="FIXMLGenerator"/>
      <processor name="RTSOutput"/>
    </pipeline>

    <pipeline name="DocML (webcluster)" default="1">
      <description><![CDATA[For cluster "webcluster". DocML Pipeline. (based on index-profile)]]></description>
      <priority>0</priority>
      <processor name="DocInit"/>
      <processor name="MergeDocML"/>
      <processor name="CopyUri"/>
      <processor name="XMLExtract"/>
      <processor name="XMLLanguageDetector"/>
      <processor name="XMLScopifier2(webcluster)"/>
      <processor name="Tokenizer(webcluster)"/>
      <processor name="Lemmatizer(webcluster)"/>
      <processor name="Vectorizer(webcluster)"/>
      <processor name="DateTimeNormalizer(webcluster)"/>
      <processor name="DateTimeSelector(webcluster)"/>
      <processor name="MapperTransformer"/>
      <processor name="RankTuner"/>
      <processor name="DocumentSecurityUnknown"/>
      <processor name="FIXMLGenerator"/>
      <processor name="RTSOutput"/>
    </pipeline>

    <pipeline name="Express" default="1">
      <description><![CDATA[Optimized for performance for small database records. Contains no document conversion, linguistics, rank tuning or other advanced features.]]></description>
      <priority>0</priority>
      <separator>2</separator>
      <processor name="DocInit"/>
      <processor name="CopyUri"/>
      <processor name="DateTimeNormalizer"/>
      <processor name="DateTimeSelector"/>
      <processor name="MapperTransformer"/>
      <processor name="DocumentSecurityUnknown"/>
      <processor name="FIXMLGenerator"/>
      <processor name="RTSOutput"/>
    </pipeline>

    <pipeline name="Express (webcluster)" default="1">
      <description><![CDATA[For cluster "webcluster". Optimized for performance for small database records. Contains no document conversion, linguistics, rank tuning or other advanced features. (based on index-profile)]]></description>
      <priority>0</priority>
      <separator>2</separator>
      <processor name="DocInit"/>
      <processor name="CopyUri"/>
      <processor name="DateTimeNormalizer(webcluster)"/>
      <processor name="DateTimeSelector(webcluster)"/>
      <processor name="MapperTransformer"/>
      <processor name="DocumentSecurityUnknown"/>
      <processor name="FIXMLGenerator"/>
      <processor name="RTSOutput"/>
    </pipeline>

    <pipeline name="FAQ (webcluster)" default="0">
      <description><![CDATA[FAQ (Frequently Asked Questions)]]></description>
      <priority>0</priority>
      <processor name="DocInit"/>
      <processor name="CopyUri"/>
      <processor name="Tokenizer(webcluster)"/>
      <processor name="Lemmatizer(webcluster)"/>
      <processor name="LMCOCopyFAQTeaser"/>
      <processor name="DateTimeNormalizer(webcluster)"/>
      <processor name="DateTimeSelector(webcluster)"/>
      <processor name="MapperTransformer"/>
      <processor name="RankTuner"/>
      <processor name="FIXMLGenerator"/>
      <processor name="RTSOutput"/>
    </pipeline>

    <pipeline name="FastXML" default="1">
      <description><![CDATA[FastXML pipeline.]]></description>
      <priority>0</priority>
      <separator>1</separator>
      <processor name="DocInit"/>
      <processor name="CopyUri"/>
      <processor name="FastXMLReaderData"/>
      <processor name="GeoScaler"/>
      <processor name="Tokenizer"/>
      <processor name="Lemmatizer"/>
      <processor name="UppercaseExtractor"/>
      <processor name="EntityVectorizer"/>
      <processor name="Vectorizer"/>
      <processor name="DateTimeNormalizer"/>
      <processor name="DateTimeSelector"/>
      <processor name="MapperTransformer"/>
      <processor name="RankTuner"/>
      <processor name="DocumentSecurityUnknown"/>
      <processor name="FIXMLGenerator"/>
      <processor name="RTSOutput"/>
    </pipeline>

    <pipeline name="FastXML (webcluster)" default="1">
      <description><![CDATA[For cluster "webcluster". FastXML pipeline. (based on index-profile)]]></description>
      <priority>0</priority>
      <separator>1</separator>
      <processor name="DocInit"/>
      <processor name="CopyUri"/>
      <processor name="FastXMLReaderData"/>
      <processor name="GeoScaler(webcluster)"/>
      <processor name="Tokenizer(webcluster)"/>
      <processor name="Lemmatizer(webcluster)"/>
      <processor name="UppercaseExtractor"/>
      <processor name="EntityVectorizer"/>
      <processor name="Vectorizer(webcluster)"/>
      <processor name="DateTimeNormalizer(webcluster)"/>
      <processor name="DateTimeSelector(webcluster)"/>
      <processor name="MapperTransformer"/>
      <processor name="RankTuner"/>
      <processor name="DocumentSecurityUnknown"/>
      <processor name="FIXMLGenerator"/>
      <processor name="RTSOutput"/>
    </pipeline>

    <pipeline name="Generic" default="1">
      <description><![CDATA[Supports different document formats. Additional support advanced linguistics features such as lemmatization.]]></description>
      <priority>0</priority>
      <processor name="DocInit"/>
      <processor name="DocumentRetriever"/>
      <processor name="URLProcessor"/>
      <processor name="Decompressor"/>
      <processor name="FormatDetector"/>
      <processor name="SimpleConverter"/>
      <processor name="FlashConverter"/>
      <processor name="PDFConverter"/>
      <processor name="XPSConverter"/>
      <processor name="SearchExportConverter"/>
      <processor name="LanguageAndEncodingDetector"/>
      <processor name="EncodingNormalizer"/>
      <processor name="FastHTMLParser"/>
      <processor name="TeaserGenerator"/>
      <processor name="Tokenizer"/>
      <processor name="Lemmatizer"/>
      <processor name="UppercaseExtractor"/>
      <processor name="EntityVectorizer"/>
      <processor name="Vectorizer"/>
      <processor name="ConceptSuppressor"/>
      <processor name="DateTimeNormalizer"/>
      <processor name="DateTimeSelector"/>
      <processor name="MapperTransformer"/>
      <processor name="RankTuner"/>
      <processor name="DocumentSecurityUnknown"/>
      <processor name="FIXMLGenerator"/>
      <processor name="RTSOutput"/>
    </pipeline>

    <pipeline name="Generic (webcluster)" default="1">
      <description><![CDATA[For cluster "webcluster". Supports different document formats. Additional support advanced linguistics features such as lemmatization. (based on index-profile)]]></description>
      <priority>0</priority>
      <processor name="DocInit"/>
      <processor name="DocumentRetriever"/>
      <processor name="URLProcessor"/>
      <processor name="Decompressor"/>
      <processor name="FormatDetector"/>
      <processor name="SimpleConverter"/>
      <processor name="FlashConverter"/>
      <processor name="PDFConverter"/>
      <processor name="XPSConverter"/>
      <processor name="SearchExportConverter"/>
      <processor name="LanguageAndEncodingDetector"/>
      <processor name="EncodingNormalizer"/>
      <processor name="FastHTMLParser"/>
      <processor name="TeaserGenerator"/>
      <processor name="Tokenizer(webcluster)"/>
      <processor name="Lemmatizer(webcluster)"/>
      <processor name="UppercaseExtractor"/>
      <processor name="EntityVectorizer"/>
      <processor name="Vectorizer(webcluster)"/>
      <processor name="ConceptSuppressor"/>
      <processor name="DateTimeNormalizer(webcluster)"/>
      <processor name="DateTimeSelector(webcluster)"/>
      <processor name="MapperTransformer"/>
      <processor name="RankTuner"/>
      <processor name="DocumentSecurityUnknown"/>
      <processor name="FIXMLGenerator"/>
      <processor name="RTSOutput"/>
    </pipeline>

    <pipeline name="IDTMain (webcluster)" default="0">
      <description><![CDATA[IDTMain Document Processor Pipeline]]></description>
      <priority>0</priority>
      <processor name="DocInit"/>
      <processor name="LMCOSystemIDAssigner"/>
      <processor name="LMCOSystemIDToDocacl"/>
      <processor name="ACLEncoder"/>
      <processor name="LMCOCopyCollectionName"/>
      <processor name="LMCOCapitalizerMultivalue"/>
      <processor name="LMCOMergeSuspectName"/>
      <processor name="LMCOMergeSubjectCity"/>
      <processor name="LMCOMergeSubjectState"/>
      <processor name="LMCOMergeSubjectCountry"/>
      <processor name="LMCODuplicatesDeleter"/>
      <processor name="LMCORegexChangerSSN"/>
      <processor name="LMCORegexChangerCC"/>
      <processor name="LMCOCompanyExtractor"/>
      <processor name="LMCOCompanyPartialExtractor"/>
      <processor name="LMCOEntityNormalizer"/>
      <processor name="LMCOCityExtractor"/>
      <processor name="LMCOSetProcessingTime"/>
      <processor name="TeaserGenerator"/>
      <processor name="Tokenizer(webcluster)"/>
      <processor name="Lemmatizer(webcluster)"/>
      <processor name="EntityVectorizer"/>
      <processor name="Vectorizer(webcluster)"/>
      <processor name="DateTimeNormalizer(webcluster)"/>
      <processor name="DateTimeSelector(webcluster)"/>
      <processor name="LMCODateTimeModifier"/>
      <processor name="MapperTransformer"/>
      <processor name="RankTuner"/>
      <processor name="FIXMLGenerator"/>
      <processor name="RTSOutput"/>
    </pipeline>

    <pipeline name="IDTMainScope (webcluster)" default="0">
      <description><![CDATA[]]></description>
      <priority>0</priority>
      <processor name="DocInit"/>
      <processor name="LMCOSystemIDAssigner"/>
      <processor name="LMCOSystemIDToDocacl"/>
      <processor name="ACLEncoder"/>
      <processor name="LMCOInvalidCharactersChangergexml"/>
      <processor name="LMCOInvalidCharactersChangeraixml"/>
      <processor name="LMCOXMLParserIDT"/>
      <processor name="LMCOXMLScopifierIDT"/>
      <processor name="LMCOCopyCollectionName"/>
      <processor name="LMCOCapitalizerMultivalue"/>
      <processor name="LMCOMergeSuspectNameIDT"/>
      <processor name="LMCOMergeSubjectCityIDT"/>
      <processor name="LMCOMergeSubjectPhoneIDT"/>
      <processor name="LMCOMergeSubjectStateIDT"/>
      <processor name="LMCOMergeSubjectCountryIDT"/>
      <processor name="LMCOTildaRemoverSubjectState"/>
      <processor name="LMCOTildeRemoverSubjectPhone"/>
      <processor name="LMCOTildaRemoverSubjectCountry"/>
      <processor name="LMCOTildaRemoverSubjectCity"/>
      <processor name="LMCOTildaRemoverSubectName"/>
      <processor name="LMCOSubjectPhoneNav"/>
      <processor name="LMCODuplicateDeleterIDT"/>
      <processor name="LMCOTildaRemoverAIPSC"/>
      <processor name="LMCOTildaRemoverAISC"/>
      <processor name="LMCOTildaRemoverAIVC"/>
      <processor name="LMCORegexChangerSSN"/>
      <processor name="LMCORegexChangerCC"/>
      <processor name="LMCOCompanyExtractor"/>
      <processor name="LMCOCompanyPartialExtractor"/>
      <processor name="LMCOEntityNormalizer"/>
      <processor name="LMCOCityExtractor"/>
      <processor name="LMCOSetProcessingTime"/>
      <processor name="TeaserGenerator"/>
      <processor name="Tokenizer(webcluster)"/>
      <processor name="ScopeTokenizer(webcluster)"/>
      <processor name="Lemmatizer(webcluster)"/>
      <processor name="LMCOXMLifierIDT"/>
      <processor name="EntityVectorizer"/>
      <processor name="Vectorizer(webcluster)"/>
      <processor name="DateTimeNormalizer(webcluster)"/>
      <processor name="DateTimeSelector(webcluster)"/>
      <processor name="LMCODateTimeModifier"/>
      <processor name="MapperTransformer"/>
      <processor name="RankTuner"/>
      <processor name="FIXMLGenerator"/>
      <processor name="RTSOutput"/>
    </pipeline>

    <pipeline name="IDTMainScopeBaseName (webcluster)" default="0">
      <description><![CDATA[IDTMainScope pipeline with subject name normalization features]]></description>
      <priority>0</priority>
      <processor name="DocInit"/>
      <processor name="LMCOSystemIDAssigner"/>
      <processor name="LMCOSystemIDToDocacl"/>
      <processor name="ACLEncoder"/>
      <processor name="LMCOXMLParserIDT"/>
      <processor name="LMCOXMLScopifierIDT"/>
      <processor name="LMCOCopyCollectionName"/>
      <processor name="LMCOCapitalizerMultivalue"/>
      <processor name="LMCOMergeSuspectNameIDT"/>
      <processor name="LMCOMergeSubjectCityIDT"/>
      <processor name="LMCOMergeSubjectStateIDT"/>
      <processor name="LMCOMergeSubjectCountryIDT"/>
      <processor name="LMCOMergeSubjectPhoneIDT"/>
      <processor name="LMCOTildeRemoverSubjectPhone"/>
      <processor name="LMCOSubjectPhoneNav"/>
      <processor name="LMCOTildaRemoverSubjectState"/>
      <processor name="LMCOTildaRemoverSubjectCountry"/>
      <processor name="LMCOTildaRemoverSubjectCity"/>
      <processor name="LMCOTildaRemoverSubectName"/>
      <processor name="LMCODuplicateDeleterIDT"/>
      <processor name="LMCOTildaRemoverAIPSC"/>
      <processor name="LMCOTildaRemoverAISC"/>
      <processor name="LMCOTildaRemoverAIVC"/>
      <processor name="LMCORegexChangerSSN"/>
      <processor name="LMCORegexChangerCC"/>
      <processor name="LMCOCompanyExtractor"/>
      <processor name="LMCOCompanyPartialExtractor"/>
      <processor name="LMCOCityExtractor"/>
      <processor name="LMCOConditionalCopy"/>
      <processor name="LMAssociatedCompanyNameNavCopy"/>
      <processor name="LMCOSetProcessingTime"/>
      <processor name="TeaserGenerator"/>
      <processor name="Tokenizer(webcluster)"/>
      <processor name="ScopeTokenizer(webcluster)"/>
      <processor name="Lemmatizer(webcluster)"/>
      <processor name="LMCOSubjectNameNormalizerNew"/>
      <processor name="LMCOAssociatedNameNormalizerNew"/>
      <processor name="LMCOXMLifierIDT"/>
      <processor name="EntityVectorizer"/>
      <processor name="Vectorizer(webcluster)"/>
      <processor name="DateTimeNormalizer(webcluster)"/>
      <processor name="DateTimeSelector(webcluster)"/>
      <processor name="LMCODateTimeModifier"/>
      <processor name="MapperTransformer"/>
      <processor name="RankTuner"/>
      <processor name="FIXMLGenerator"/>
      <processor name="RTSOutput"/>
    </pipeline>

    <pipeline name="IDTMainScopeBaseNameFindSimilar (webcluster)" default="0">
      <description><![CDATA[IDTMainScopeBaseName with Find Similar Stages]]></description>
      <priority>0</priority>
      <processor name="DocInit"/>
      <processor name="LMCOSystemIDAssigner"/>
      <processor name="LMCOSystemIDToDocacl"/>
      <processor name="ACLEncoder"/>
      <processor name="LMCOLTGTChanger"/>
      <processor name="SentenceScopifier"/>
      <processor name="AddSentenceNode"/>
      <processor name="LMCOXMLParserIDT"/>
      <processor name="LMCOXMLScopifierIDT"/>
      <processor name="LMCOCopyCollectionName"/>
      <processor name="LMCOCapitalizerMultivalue"/>
      <processor name="LMCOMergeSuspectNameIDT"/>
      <processor name="LMCOMergeSubjectCityIDT"/>
      <processor name="LMCOMergeSubjectStateIDT"/>
      <processor name="LMCOMergeSubjectCountryIDT"/>
      <processor name="LMCOTildeRemoverSubjectPhone"/>
      <processor name="LMCOSubjectPhoneNav"/>
      <processor name="LMCOTildaRemoverSubjectState"/>
      <processor name="LMCOTildaRemoverSubjectCountry"/>
      <processor name="LMCOTildaRemoverSubjectCity"/>
      <processor name="LMCOTildaRemoverSubectName"/>
      <processor name="LMCOSpaceRemoverPCPhoneNo"/>
      <processor name="LMCOSubjectEmailMerger"/>
      <processor name="LMCOSubjectURLMerger"/>
      <processor name="LMCOTildaRemoverSubjectEmailDomain"/>
      <processor name="LMCOLowercaseMultivalue"/>
      <processor name="LMCOURLRegExNormalizer1"/>
      <processor name="LMCOURLRegExNormalizer2"/>
      <processor name="LMCOURLRegExNormalizer2-1"/>
      <processor name="LMCOURLRegExNormalizer3"/>
      <processor name="LMCOURLRegExNormalizer4"/>
      <processor name="LMCOURLRegExNormalizer5"/>
      <processor name="LMCORegexChangerSSN"/>
      <processor name="LMCORegexChangerCC"/>
      <processor name="LMCOCompanyExtractor"/>
      <processor name="LMCOCompanyPartialExtractor"/>
      <processor name="LMCOCityExtractor"/>
      <processor name="LMCOConditionalCopy"/>
      <processor name="LMAssociatedCompanyNameToNavCopy"/>
      <processor name="LMAssociatedCompanyNameNavCopy"/>
      <processor name="LMCOaddress2Remover1"/>
      <processor name="LMCOaddress2Remover2"/>
      <processor name="StreetSuffixRemover"/>
      <processor name="LMCOLanguageAndEncodingDetector"/>
      <processor name="LMCOEncodingNormalizer"/>
      <processor name="Lemmatizer(webcluster)"/>
      <processor name="LMCOXMLifierIDT"/>
      <processor name="LMCOSubjectNameNormalizerNew"/>
      <processor name="LMCOAssociatedNameNormalizerNew"/>
      <processor name="LMCOEntityNormalizer"/>
      <processor name="LMCODuplicateDeleterIDT"/>
      <processor name="LMCOTildaRemoverPrimaryCompanyZipNav"/>
      <processor name="LMCOTildaRemoverAIPSC"/>
      <processor name="LMCOTildaRemoverAISC"/>
      <processor name="LMCOTildaRemoverAIVC"/>
      <processor name="LMCODuplicateDeleterIDT2"/>
      <processor name="LMCOSubjectNameStripper"/>
      <processor name="LMCOCopyToSubjectBaseNameStrippedPhonetic"/>
      <processor name="LMCOPhoneticNormalizer"/>
      <processor name="CreateNgrams6"/>
      <processor name="CreateNgrams8"/>
      <processor name="CreateNgrams10"/>
      <processor name="CreateNgrams12"/>
      <processor name="CreateNgrams14"/>
      <processor name="CreateNgramsSubjectName6"/>
      <processor name="CreateNgramsSubjectName8"/>
      <processor name="CreateNgramsSubjectName10"/>
      <processor name="CreateNgramsSubjectName12"/>
      <processor name="CreateNgramsSubjectName14"/>
      <processor name="LMCOSetProcessingTime"/>
      <processor name="TeaserGenerator"/>
      <processor name="Tokenizer(webcluster)"/>
      <processor name="ScopeTokenizer(webcluster)"/>
      <processor name="EntityVectorizer"/>
      <processor name="Vectorizer(webcluster)"/>
      <processor name="DateTimeNormalizer(webcluster)"/>
      <processor name="DateTimeSelector(webcluster)"/>
      <processor name="LMCODateTimeModifier"/>
      <processor name="MapperTransformer"/>
      <processor name="RankTuner"/>
      <processor name="FIXMLGenerator"/>
      <processor name="RTSOutput"/>
    </pipeline>

    <pipeline name="LMCODefault (webcluster)" default="0">
      <description><![CDATA[LMCO Default Document Processor Pipeline]]></description>
      <priority>0</priority>
      <processor name="DocInit"/>
      <processor name="LMCOSystemIDAssigner"/>
      <processor name="LMCOSystemIDToDocacl"/>
      <processor name="ACLEncoder"/>
      <processor name="LMCOCopyCommentsTeaser"/>
      <processor name="LMCOCapitalizerMultivalue"/>
      <processor name="LMCOMergeSubjectName"/>
      <processor name="LMCOMergeSubjectCity"/>
      <processor name="LMCOMergeSubjectState"/>
      <processor name="LMCOMergeSubjectCountry"/>
      <processor name="LMCODuplicatesDeleter"/>
      <processor name="LMCORegexChangerSSN"/>
      <processor name="LMCORegexChangerCC"/>
      <processor name="LMCOCompanyExtractor"/>
      <processor name="LMCOCompanyPartialExtractor"/>
      <processor name="LMCOEntityNormalizer"/>
      <processor name="LMCOCityExtractor"/>
      <processor name="LMCOCopyRedactedTeaser"/>
      <processor name="LMCOSetProcessingTime"/>
      <processor name="TeaserGenerator"/>
      <processor name="Tokenizer(webcluster)"/>
      <processor name="Lemmatizer(webcluster)"/>
      <processor name="EntityVectorizer"/>
      <processor name="Vectorizer(webcluster)"/>
      <processor name="DateTimeNormalizer(webcluster)"/>
      <processor name="DateTimeSelector(webcluster)"/>
      <processor name="LMCODateTimeModifier"/>
      <processor name="MapperTransformer"/>
      <processor name="RankTuner"/>
      <processor name="FIXMLGenerator"/>
      <processor name="RTSOutput"/>
    </pipeline>

    <pipeline name="LightweightSemantic" default="1">
      <description><![CDATA[Detects and marks up selected structural entities as scopes.]]></description>
      <priority>0</priority>
      <processor name="DocInit"/>
      <processor name="DocumentRetriever"/>
      <processor name="URLProcessor"/>
      <processor name="Decompressor"/>
      <processor name="FormatDetector"/>
      <processor name="SimpleConverter"/>
      <processor name="FlashConverter"/>
      <processor name="PDFConverter"/>
      <processor name="XPSConverter"/>
      <processor name="SearchExportConverter"/>
      <processor name="LanguageAndEncodingDetector"/>
      <processor name="EncodingNormalizer"/>
      <processor name="FastHTMLParser"/>
      <processor name="WAAttributeLookup"/>
      <processor name="WALinkRankAnchorTextFormatter"/>
      <processor name="TeaserGenerator"/>
      <processor name="WACrawlerLinkFilter"/>
      <processor name="Tokenizer"/>
      <processor name="Lemmatizer"/>
      <processor name="SentenceBoundaryDetector"/>
      <processor name="UppercaseExtractor"/>
      <processor name="EntityVectorizer"/>
      <processor name="Vectorizer"/>
      <processor name="Scopifier"/>
      <processor name="XMLifier"/>
      <processor name="DateTimeNormalizer"/>
      <processor name="DateTimeSelector"/>
      <processor name="MapperTransformer"/>
      <processor name="RankTuner"/>
      <processor name="WARankDocument"/>
      <processor name="DocumentSecurityUnknown"/>
      <processor name="FIXMLGenerator"/>
      <processor name="DictServiceOutput"/>
      <processor name="RTSOutput"/>
      <processor name="WALinkStorer"/>
    </pipeline>

    <pipeline name="LightweightSemantic (webcluster)" default="1">
      <description><![CDATA[For cluster "webcluster". Detects and marks up selected structural entities as scopes. (based on index-profile)]]></description>
      <priority>0</priority>
      <processor name="DocInit"/>
      <processor name="DocumentRetriever"/>
      <processor name="URLProcessor"/>
      <processor name="Decompressor"/>
      <processor name="FormatDetector"/>
      <processor name="SimpleConverter"/>
      <processor name="FlashConverter"/>
      <processor name="PDFConverter"/>
      <processor name="XPSConverter"/>
      <processor name="SearchExportConverter"/>
      <processor name="LanguageAndEncodingDetector"/>
      <processor name="EncodingNormalizer"/>
      <processor name="FastHTMLParser"/>
      <processor name="WAAttributeLookup"/>
      <processor name="WALinkRankAnchorTextFormatter"/>
      <processor name="TeaserGenerator"/>
      <processor name="WACrawlerLinkFilter"/>
      <processor name="Tokenizer(webcluster)"/>
      <processor name="Lemmatizer(webcluster)"/>
      <processor name="SentenceBoundaryDetector"/>
      <processor name="UppercaseExtractor"/>
      <processor name="EntityVectorizer"/>
      <processor name="Vectorizer(webcluster)"/>
      <processor name="Scopifier"/>
      <processor name="XMLifier(webcluster)"/>
      <processor name="DateTimeNormalizer(webcluster)"/>
      <processor name="DateTimeSelector(webcluster)"/>
      <processor name="MapperTransformer"/>
      <processor name="RankTuner"/>
      <processor name="WARankDocument"/>
      <processor name="DocumentSecurityUnknown"/>
      <processor name="FIXMLGenerator"/>
      <processor name="DictServiceOutput"/>
      <processor name="RTSOutput"/>
      <processor name="WALinkStorer"/>
    </pipeline>

    <pipeline name="LightweightXML" default="1">
      <description><![CDATA[Lightweight XML pipeline (scope search, optimized in a way that precludes entity extraction.)]]></description>
      <priority>0</priority>
      <processor name="DocInit"/>
      <processor name="CopyUri"/>
      <processor name="XMLParser"/>
      <processor name="XMLExtract"/>
      <processor name="XMLLanguageDetector"/>
      <processor name="XMLScopifier2"/>
      <processor name="Tokenizer"/>
      <processor name="Lemmatizer"/>
      <processor name="Vectorizer"/>
      <processor name="DateTimeNormalizer"/>
      <processor name="DateTimeSelector"/>
      <processor name="MapperTransformer"/>
      <processor name="RankTuner"/>
      <processor name="DocumentSecurityUnknown"/>
      <processor name="FIXMLGenerator"/>
      <processor name="RTSOutput"/>
    </pipeline>

    <pipeline name="LightweightXML (webcluster)" default="1">
      <description><![CDATA[For cluster "webcluster". Lightweight XML pipeline (scope search, optimized in a way that precludes entity extraction.) (based on index-profile)]]></description>
      <priority>0</priority>
      <processor name="DocInit"/>
      <processor name="CopyUri"/>
      <processor name="XMLParser"/>
      <processor name="XMLExtract"/>
      <processor name="XMLLanguageDetector"/>
      <processor name="XMLScopifier2(webcluster)"/>
      <processor name="Tokenizer(webcluster)"/>
      <processor name="Lemmatizer(webcluster)"/>
      <processor name="Vectorizer(webcluster)"/>
      <processor name="DateTimeNormalizer(webcluster)"/>
      <processor name="DateTimeSelector(webcluster)"/>
      <processor name="MapperTransformer"/>
      <processor name="RankTuner"/>
      <processor name="DocumentSecurityUnknown"/>
      <processor name="FIXMLGenerator"/>
      <processor name="RTSOutput"/>
    </pipeline>

    <pipeline name="NameNormalizationDB (webcluster)" default="0">
      <description><![CDATA[Index Compnaies from DB]]></description>
      <priority>0</priority>
      <processor name="DocInit"/>
      <processor name="LanguageAndEncodingDetector"/>
      <processor name="Tokenizer(webcluster)"/>
      <processor name="ScopeTokenizer(webcluster)"/>
      <processor name="Lemmatizer(webcluster)"/>
      <processor name="Vectorizer(webcluster)"/>
      <processor name="LMCOSubjectNameStripperNN"/>
      <processor name="LMCOCopyToSubjectBaseNameStrippedPhonetic"/>
      <processor name="LMCOPhoneticNormalizer"/>
      <processor name="CreateNgramsSubjectName6"/>
      <processor name="CreateNgramsSubjectName8"/>
      <processor name="CreateNgramsSubjectName10"/>
      <processor name="CreateNgramsSubjectName12"/>
      <processor name="CreateNgramsSubjectName14"/>
      <processor name="LMCOSpy"/>
      <processor name="DateTimeNormalizer(webcluster)"/>
      <processor name="DateTimeSelector(webcluster)"/>
      <processor name="MapperTransformer"/>
      <processor name="RankTuner"/>
      <processor name="DocumentSecurityUnknown"/>
      <processor name="FIXMLGenerator"/>
      <processor name="RTSOutput"/>
    </pipeline>

    <pipeline name="NameNormalizationXML (webcluster)" default="0">
      <description><![CDATA[Pipeline for Name Normalization]]></description>
      <priority>0</priority>
      <processor name="DocInit"/>
      <processor name="NNXMLParser"/>
      <processor name="NNXMLExtract"/>
      <processor name="LanguageAndEncodingDetector"/>
      <processor name="Tokenizer(webcluster)"/>
      <processor name="ScopeTokenizer(webcluster)"/>
      <processor name="Lemmatizer(webcluster)"/>
      <processor name="Vectorizer(webcluster)"/>
      <processor name="LMCOSubjectNameStripperNN"/>
      <processor name="LMCOCopyToSubjectBaseNameStrippedPhonetic"/>
      <processor name="LMCOPhoneticNormalizer"/>
      <processor name="CreateNgramsSubjectName6"/>
      <processor name="CreateNgramsSubjectName8"/>
      <processor name="CreateNgramsSubjectName10"/>
      <processor name="CreateNgramsSubjectName12"/>
      <processor name="CreateNgramsSubjectName14"/>
      <processor name="LMCOSpy"/>
      <processor name="DateTimeNormalizer(webcluster)"/>
      <processor name="DateTimeSelector(webcluster)"/>
      <processor name="MapperTransformer"/>
      <processor name="RankTuner"/>
      <processor name="DocumentSecurityUnknown"/>
      <processor name="FIXMLGenerator"/>
      <processor name="RTSOutput"/>
    </pipeline>

    <pipeline name="NewsSearch" default="1">
      <description><![CDATA[Optimized for News Search applications. Additional support for extraction of selected entity types.]]></description>
      <priority>0</priority>
      <processor name="DocInit"/>
      <processor name="DocumentRetriever"/>
      <processor name="URLProcessor"/>
      <processor name="Decompressor"/>
      <processor name="FormatDetector"/>
      <processor name="SimpleConverter"/>
      <processor name="FlashConverter"/>
      <processor name="PDFConverter"/>
      <processor name="XPSConverter"/>
      <processor name="SearchExportConverter"/>
      <processor name="LanguageAndEncodingDetector"/>
      <processor name="EncodingNormalizer"/>
      <processor name="FastHTMLParser"/>
      <processor name="WAAttributeLookup"/>
      <processor name="WALinkRankAnchorTextFormatter"/>
      <processor name="Stan3News"/>
      <processor name="Stan3NewsAttributeCopy"/>
      <processor name="PersonExtractorWhiteListSpecific"/>
      <processor name="PersonExtractorWhiteListAny"/>
      <processor name="CompanyExtractorWhiteListSpecific"/>
      <processor name="CompanyExtractorWhiteListAny"/>
      <processor name="LocationExtractorWhiteListSpecific"/>
      <processor name="LocationExtractorWhiteListAny"/>
      <processor name="PersonExtractor1"/>
      <processor name="PersonExtractor2"/>
      <processor name="CompanyExtractor1"/>
      <processor name="CompanyExtractor2"/>
      <processor name="LocationExtractor1"/>
      <processor name="UppercaseExtractor"/>
      <processor name="WACrawlerLinkFilter"/>
      <processor name="TeaserGenerator"/>
      <processor name="Tokenizer"/>
      <processor name="Lemmatizer"/>
      <processor name="EntityVectorizer"/>
      <processor name="Vectorizer"/>
      <processor name="DateTimeNormalizer"/>
      <processor name="DateTimeSelector"/>
      <processor name="MapperTransformer"/>
      <processor name="RankTuner"/>
      <processor name="WARankDocument"/>
      <processor name="DocumentSecurityUnknown"/>
      <processor name="FIXMLGenerator"/>
      <processor name="RTSOutput"/>
      <processor name="WALinkStorer"/>
    </pipeline>

    <pipeline name="NewsSearch (webcluster)" default="1">
      <description><![CDATA[For cluster "webcluster". Optimized for News Search applications. Additional support for extraction of selected entity types. (based on index-profile)]]></description>
      <priority>0</priority>
      <processor name="DocInit"/>
      <processor name="DocumentRetriever"/>
      <processor name="URLProcessor"/>
      <processor name="Decompressor"/>
      <processor name="FormatDetector"/>
      <processor name="SimpleConverter"/>
      <processor name="FlashConverter"/>
      <processor name="PDFConverter"/>
      <processor name="XPSConverter"/>
      <processor name="SearchExportConverter"/>
      <processor name="LanguageAndEncodingDetector"/>
      <processor name="EncodingNormalizer"/>
      <processor name="FastHTMLParser"/>
      <processor name="WAAttributeLookup"/>
      <processor name="WALinkRankAnchorTextFormatter"/>
      <processor name="Stan3News"/>
      <processor name="Stan3NewsAttributeCopy"/>
      <processor name="PersonExtractorWhiteListSpecific"/>
      <processor name="PersonExtractorWhiteListAny"/>
      <processor name="CompanyExtractorWhiteListSpecific"/>
      <processor name="CompanyExtractorWhiteListAny"/>
      <processor name="LocationExtractorWhiteListSpecific"/>
      <processor name="LocationExtractorWhiteListAny"/>
      <processor name="PersonExtractor1"/>
      <processor name="PersonExtractor2"/>
      <processor name="CompanyExtractor1"/>
      <processor name="CompanyExtractor2"/>
      <processor name="LocationExtractor1"/>
      <processor name="UppercaseExtractor"/>
      <processor name="WACrawlerLinkFilter"/>
      <processor name="TeaserGenerator"/>
      <processor name="Tokenizer(webcluster)"/>
      <processor name="Lemmatizer(webcluster)"/>
      <processor name="EntityVectorizer"/>
      <processor name="Vectorizer(webcluster)"/>
      <processor name="DateTimeNormalizer(webcluster)"/>
      <processor name="DateTimeSelector(webcluster)"/>
      <processor name="MapperTransformer"/>
      <processor name="RankTuner"/>
      <processor name="WARankDocument"/>
      <processor name="DocumentSecurityUnknown"/>
      <processor name="FIXMLGenerator"/>
      <processor name="RTSOutput"/>
      <processor name="WALinkStorer"/>
    </pipeline>

    <pipeline name="Obfuscation (webcluster)" default="0">
      <description><![CDATA[Pipeline is for exclusive use of obfuscation]]></description>
      <priority>0</priority>
      <processor name="DocInit"/>
      <processor name="LMCOSystemIDAssigner"/>
      <processor name="LMCOSystemIDToDocacl"/>
      <processor name="ACLEncoder"/>
      <processor name="LMCOLanguageAndEncodingDetector"/>
      <processor name="LMCOInvalidCharactersChanger"/>
      <processor name="LMCOHTMLEncoder1"/>
      <processor name="LMCOHTMLEncoder2"/>
      <processor name="LMCORegexChangerSSN"/>
      <processor name="LMCORegexChangerCC"/>
      <processor name="FastHTMLParser"/>
      <processor name="LMCOCompanyExtractor"/>
      <processor name="LMCOCompanyPartialExtractor"/>
      <processor name="LMCOCityExtractor"/>
      <processor name="ObfuscationPersonExtractor1"/>
      <processor name="ObfuscationPersonExtractor2"/>
      <processor name="DatabaseInsertForObfuscation"/>
      <processor name="LMCOSetProcessingTime"/>
      <processor name="Tokenizer(webcluster)"/>
      <processor name="Lemmatizer(webcluster)"/>
      <processor name="LMCOEntityNormalizer"/>
      <processor name="EntityVectorizer"/>
      <processor name="Vectorizer(webcluster)"/>
      <processor name="DateTimeNormalizer(webcluster)"/>
      <processor name="DateTimeSelector(webcluster)"/>
      <processor name="LMCODateTimeModifier"/>
      <processor name="MapperTransformer"/>
      <processor name="RankTuner"/>
      <processor name="FIXMLGenerator"/>
      <processor name="RTSOutput"/>
    </pipeline>

    <pipeline name="RowSet" default="1">
      <description><![CDATA[RowSet pipeline.]]></description>
      <priority>0</priority>
      <processor name="DocInit"/>
      <processor name="CopyUri"/>
      <processor name="RowSetXSLT"/>
      <processor name="FastXMLReader"/>
      <processor name="GeoScaler"/>
      <processor name="Tokenizer"/>
      <processor name="Lemmatizer"/>
      <processor name="UppercaseExtractor"/>
      <processor name="EntityVectorizer"/>
      <processor name="Vectorizer"/>
      <processor name="DateTimeNormalizer"/>
      <processor name="DateTimeSelector"/>
      <processor name="MapperTransformer"/>
      <processor name="RankTuner"/>
      <processor name="DocumentSecurityUnknown"/>
      <processor name="FIXMLGenerator"/>
      <processor name="RTSOutput"/>
    </pipeline>

    <pipeline name="RowSet (webcluster)" default="1">
      <description><![CDATA[For cluster "webcluster". RowSet pipeline. (based on index-profile)]]></description>
      <priority>0</priority>
      <processor name="DocInit"/>
      <processor name="CopyUri"/>
      <processor name="RowSetXSLT"/>
      <processor name="FastXMLReader"/>
      <processor name="GeoScaler(webcluster)"/>
      <processor name="Tokenizer(webcluster)"/>
      <processor name="Lemmatizer(webcluster)"/>
      <processor name="UppercaseExtractor"/>
      <processor name="EntityVectorizer"/>
      <processor name="Vectorizer(webcluster)"/>
      <processor name="DateTimeNormalizer(webcluster)"/>
      <processor name="DateTimeSelector(webcluster)"/>
      <processor name="MapperTransformer"/>
      <processor name="RankTuner"/>
      <processor name="DocumentSecurityUnknown"/>
      <processor name="FIXMLGenerator"/>
      <processor name="RTSOutput"/>
    </pipeline>

    <pipeline name="Semantic" default="1">
      <description><![CDATA[Detects and marks up selected semantic and structural entities as scopes.]]></description>
      <priority>0</priority>
      <processor name="DocInit"/>
      <processor name="DocumentRetriever"/>
      <processor name="URLProcessor"/>
      <processor name="Decompressor"/>
      <processor name="FormatDetector"/>
      <processor name="SimpleConverter"/>
      <processor name="FlashConverter"/>
      <processor name="PDFConverter"/>
      <processor name="XPSConverter"/>
      <processor name="SearchExportConverter"/>
      <processor name="LanguageAndEncodingDetector"/>
      <processor name="EncodingNormalizer"/>
      <processor name="FastHTMLParser"/>
      <processor name="WAAttributeLookup"/>
      <processor name="WALinkRankAnchorTextFormatter"/>
      <processor name="TeaserGenerator"/>
      <processor name="WACrawlerLinkFilter"/>
      <processor name="Tokenizer"/>
      <processor name="SentenceBoundaryDetector"/>
      <processor name="PersonExtractorWhiteListSpecific"/>
      <processor name="PersonExtractorWhiteListAny"/>
      <processor name="CompanyExtractorWhiteListSpecific"/>
      <processor name="CompanyExtractorWhiteListAny"/>
      <processor name="LocationExtractorWhiteListSpecific"/>
      <processor name="LocationExtractorWhiteListAny"/>
      <processor name="EmailExtractor"/>
      <processor name="DateExtractor"/>
      <processor name="TimeExtractor"/>
      <processor name="URLExtractor"/>
      <processor name="JobTitleExtractor"/>
      <processor name="UniversityExtractor"/>
      <processor name="PersonExtractor1"/>
      <processor name="PersonExtractor2"/>
      <processor name="AirlineExtractor"/>
      <processor name="CompanyExtractor1"/>
      <processor name="CompanyExtractor2"/>
      <processor name="LocationExtractor1"/>
      <processor name="QuotationExtractor"/>
      <processor name="AcronymExtractor1"/>
      <processor name="AcronymExtractor2"/>
      <processor name="StatementExtractor"/>
      <processor name="UttererExtractor"/>
      <processor name="TickerExtractor1"/>
      <processor name="TickerExtractor2"/>
      <processor name="TickerExtractor3"/>
      <processor name="PriceExtractor"/>
      <processor name="PhoneNumberExtractor"/>
      <processor name="USZipCodeExtractor"/>
      <processor name="USNewspaperExtractor"/>
      <processor name="SubstanceExtractor"/>
      <processor name="CarExtractor"/>
      <processor name="FilenameExtractor"/>
      <processor name="ISBNExtractor"/>
      <processor name="MeasurementExtractor"/>
      <processor name="TeamExtractor1"/>
      <processor name="TeamExtractor2"/>
      <processor name="DegreeExtractor"/>
      <processor name="OSExtractor"/>
      <processor name="StreetExtractor"/>
      <processor name="UppercaseExtractor"/>
      <processor name="POSTagger"/>
      <processor name="npExtractor0"/>
      <processor name="npExtractor1"/>
      <processor name="EntityVectorizer"/>
      <processor name="Vectorizer"/>
      <processor name="Scopifier"/>
      <processor name="Lemmatizer"/>
      <processor name="XMLifier"/>
      <processor name="DateTimeNormalizer"/>
      <processor name="DateTimeSelector"/>
      <processor name="MapperTransformer"/>
      <processor name="RankTuner"/>
      <processor name="WARankDocument"/>
      <processor name="DocumentSecurityUnknown"/>
      <processor name="FIXMLGenerator"/>
      <processor name="DictServiceOutput"/>
      <processor name="RTSOutput"/>
      <processor name="WALinkStorer"/>
    </pipeline>

    <pipeline name="Semantic (webcluster)" default="1">
      <description><![CDATA[For cluster "webcluster". Detects and marks up selected semantic and structural entities as scopes. (based on index-profile)]]></description>
      <priority>0</priority>
      <processor name="DocInit"/>
      <processor name="DocumentRetriever"/>
      <processor name="URLProcessor"/>
      <processor name="Decompressor"/>
      <processor name="FormatDetector"/>
      <processor name="SimpleConverter"/>
      <processor name="FlashConverter"/>
      <processor name="PDFConverter"/>
      <processor name="XPSConverter"/>
      <processor name="SearchExportConverter"/>
      <processor name="LanguageAndEncodingDetector"/>
      <processor name="EncodingNormalizer"/>
      <processor name="FastHTMLParser"/>
      <processor name="WAAttributeLookup"/>
      <processor name="WALinkRankAnchorTextFormatter"/>
      <processor name="TeaserGenerator"/>
      <processor name="WACrawlerLinkFilter"/>
      <processor name="Tokenizer(webcluster)"/>
      <processor name="SentenceBoundaryDetector"/>
      <processor name="PersonExtractorWhiteListSpecific"/>
      <processor name="PersonExtractorWhiteListAny"/>
      <processor name="CompanyExtractorWhiteListSpecific"/>
      <processor name="CompanyExtractorWhiteListAny"/>
      <processor name="LocationExtractorWhiteListSpecific"/>
      <processor name="LocationExtractorWhiteListAny"/>
      <processor name="EmailExtractor"/>
      <processor name="DateExtractor"/>
      <processor name="TimeExtractor"/>
      <processor name="URLExtractor"/>
      <processor name="JobTitleExtractor"/>
      <processor name="UniversityExtractor"/>
      <processor name="PersonExtractor1"/>
      <processor name="PersonExtractor2"/>
      <processor name="AirlineExtractor"/>
      <processor name="CompanyExtractor1"/>
      <processor name="CompanyExtractor2"/>
      <processor name="LocationExtractor1"/>
      <processor name="QuotationExtractor"/>
      <processor name="AcronymExtractor1"/>
      <processor name="AcronymExtractor2"/>
      <processor name="StatementExtractor"/>
      <processor name="UttererExtractor"/>
      <processor name="TickerExtractor1"/>
      <processor name="TickerExtractor2"/>
      <processor name="TickerExtractor3"/>
      <processor name="PriceExtractor"/>
      <processor name="PhoneNumberExtractor"/>
      <processor name="USZipCodeExtractor"/>
      <processor name="USNewspaperExtractor"/>
      <processor name="SubstanceExtractor"/>
      <processor name="CarExtractor"/>
      <processor name="FilenameExtractor"/>
      <processor name="ISBNExtractor"/>
      <processor name="MeasurementExtractor"/>
      <processor name="TeamExtractor1"/>
      <processor name="TeamExtractor2"/>
      <processor name="DegreeExtractor"/>
      <processor name="OSExtractor"/>
      <processor name="StreetExtractor"/>
      <processor name="UppercaseExtractor"/>
      <processor name="POSTagger"/>
      <processor name="npExtractor0"/>
      <processor name="npExtractor1"/>
      <processor name="EntityVectorizer"/>
      <processor name="Vectorizer(webcluster)"/>
      <processor name="Scopifier"/>
      <processor name="Lemmatizer(webcluster)"/>
      <processor name="XMLifier(webcluster)"/>
      <processor name="DateTimeNormalizer(webcluster)"/>
      <processor name="DateTimeSelector(webcluster)"/>
      <processor name="MapperTransformer"/>
      <processor name="RankTuner"/>
      <processor name="WARankDocument"/>
      <processor name="DocumentSecurityUnknown"/>
      <processor name="FIXMLGenerator"/>
      <processor name="DictServiceOutput"/>
      <processor name="RTSOutput"/>
      <processor name="WALinkStorer"/>
    </pipeline>

    <pipeline name="SiteSearch" default="1">
      <description><![CDATA[Optimized for site search applications. Additional support for anchor text and link analysis and Asian languages.]]></description>
      <priority>0</priority>
      <processor name="DocInit"/>
      <processor name="DocumentRetriever"/>
      <processor name="URLProcessor"/>
      <processor name="Decompressor"/>
      <processor name="FormatDetector"/>
      <processor name="SimpleConverter"/>
      <processor name="FlashConverter"/>
      <processor name="PDFConverter"/>
      <processor name="XPSConverter"/>
      <processor name="SearchExportConverter"/>
      <processor name="LanguageAndEncodingDetector"/>
      <processor name="EncodingNormalizer"/>
      <processor name="FastHTMLParser"/>
      <processor name="WAAttributeLookup"/>
      <processor name="WALinkRankAnchorTextFormatter"/>
      <processor name="TeaserGenerator"/>
      <processor name="WACrawlerLinkFilter"/>
      <processor name="Tokenizer"/>
      <processor name="Lemmatizer"/>
      <processor name="UppercaseExtractor"/>
      <processor name="EntityVectorizer"/>
      <processor name="Vectorizer"/>
      <processor name="DateTimeNormalizer"/>
      <processor name="DateTimeSelector"/>
      <processor name="MapperTransformer"/>
      <processor name="RankTuner"/>
      <processor name="WARankDocument"/>
      <processor name="DocumentSecurityUnknown"/>
      <processor name="FIXMLGenerator"/>
      <processor name="RTSOutput"/>
      <processor name="WALinkStorer"/>
    </pipeline>

    <pipeline name="SiteSearch (webcluster)" default="1">
      <description><![CDATA[For cluster "webcluster". Optimized for site search applications. Additional support for anchor text and link analysis and Asian languages. (based on index-profile)]]></description>
      <priority>0</priority>
      <processor name="DocInit"/>
      <processor name="DocumentRetriever"/>
      <processor name="URLProcessor"/>
      <processor name="Decompressor"/>
      <processor name="FormatDetector"/>
      <processor name="SimpleConverter"/>
      <processor name="FlashConverter"/>
      <processor name="PDFConverter"/>
      <processor name="XPSConverter"/>
      <processor name="SearchExportConverter"/>
      <processor name="LanguageAndEncodingDetector"/>
      <processor name="EncodingNormalizer"/>
      <processor name="FastHTMLParser"/>
      <processor name="WAAttributeLookup"/>
      <processor name="WALinkRankAnchorTextFormatter"/>
      <processor name="TeaserGenerator"/>
      <processor name="WACrawlerLinkFilter"/>
      <processor name="Tokenizer(webcluster)"/>
      <processor name="Lemmatizer(webcluster)"/>
      <processor name="UppercaseExtractor"/>
      <processor name="EntityVectorizer"/>
      <processor name="Vectorizer(webcluster)"/>
      <processor name="DateTimeNormalizer(webcluster)"/>
      <processor name="DateTimeSelector(webcluster)"/>
      <processor name="MapperTransformer"/>
      <processor name="RankTuner"/>
      <processor name="WARankDocument"/>
      <processor name="DocumentSecurityUnknown"/>
      <processor name="FIXMLGenerator"/>
      <processor name="RTSOutput"/>
      <processor name="WALinkStorer"/>
    </pipeline>

    <pipeline name="Tutorials (webcluster)" default="0">
      <description><![CDATA[Tutorials Document Processor Pipeline]]></description>
      <priority>0</priority>
      <processor name="DocInit"/>
      <processor name="LMCOSystemIDAssigner"/>
      <processor name="LMCOPublicDocACLAssigner"/>
      <processor name="DocumentRetriever"/>
      <processor name="URLProcessor"/>
      <processor name="Decompressor"/>
      <processor name="FormatDetector"/>
      <processor name="SimpleConverter"/>
      <processor name="FlashConverter"/>
      <processor name="PDFConverter"/>
      <processor name="XPSConverter"/>
      <processor name="SearchExportConverter"/>
      <processor name="LanguageAndEncodingDetector"/>
      <processor name="EncodingNormalizer"/>
      <processor name="FastHTMLParser"/>
      <processor name="LMCOExtractFileName"/>
      <processor name="LMCOCopyBodyTeaser"/>
      <processor name="TeaserGenerator"/>
      <processor name="Tokenizer(webcluster)"/>
      <processor name="Lemmatizer(webcluster)"/>
      <processor name="UppercaseExtractor"/>
      <processor name="EntityVectorizer"/>
      <processor name="Vectorizer(webcluster)"/>
      <processor name="ConceptSuppressor"/>
      <processor name="DateTimeNormalizer(webcluster)"/>
      <processor name="DateTimeSelector(webcluster)"/>
      <processor name="MapperTransformer"/>
      <processor name="RankTuner"/>
      <processor name="DocumentSecurityUnknown"/>
      <processor name="FIXMLGenerator"/>
      <processor name="RTSOutput"/>
    </pipeline>

    <pipeline name="XML" default="1">
      <description><![CDATA[Standard XML pipeline (scope search)]]></description>
      <priority>0</priority>
      <processor name="DocInit"/>
      <processor name="XMLParser"/>
      <processor name="XMLExtract"/>
      <processor name="XMLScopifier"/>
      <processor name="LanguageAndEncodingDetector"/>
      <processor name="Tokenizer"/>
      <processor name="ScopeTokenizer"/>
      <processor name="Lemmatizer"/>
      <processor name="XMLifier"/>
      <processor name="Vectorizer"/>
      <processor name="DateTimeNormalizer"/>
      <processor name="DateTimeSelector"/>
      <processor name="MapperTransformer"/>
      <processor name="RankTuner"/>
      <processor name="DocumentSecurityUnknown"/>
      <processor name="FIXMLGenerator"/>
      <processor name="RTSOutput"/>
    </pipeline>

    <pipeline name="XML (webcluster)" default="1">
      <description><![CDATA[For cluster "webcluster". Standard XML pipeline (scope search) (based on index-profile)]]></description>
      <priority>0</priority>
      <processor name="DocInit"/>
      <processor name="XMLParser"/>
      <processor name="XMLExtract"/>
      <processor name="XMLScopifier(webcluster)"/>
      <processor name="LanguageAndEncodingDetector"/>
      <processor name="Tokenizer(webcluster)"/>
      <processor name="ScopeTokenizer(webcluster)"/>
      <processor name="Lemmatizer(webcluster)"/>
      <processor name="XMLifier(webcluster)"/>
      <processor name="Vectorizer(webcluster)"/>
      <processor name="DateTimeNormalizer(webcluster)"/>
      <processor name="DateTimeSelector(webcluster)"/>
      <processor name="MapperTransformer"/>
      <processor name="RankTuner"/>
      <processor name="DocumentSecurityUnknown"/>
      <processor name="FIXMLGenerator"/>
      <processor name="RTSOutput"/>
    </pipeline>

  </pipelines>

</config>
