ZK_HOST : "ftcdevcdh02.ppl.local:2181/solr"

SOLR_LOCATOR : {
   collection : ScopePOC
   zkHost : ${ZK_HOST}
}

morphlines : [
   {
       id : morphline1
       importCommands : ["org.kitesdk.**", "org.apache.solr.**"]
  
       commands : [
           {
               readCSV {
                   separator : ","
                   columns : [documentid,recordid,referencenumber,intreferencenumber,primarycompany,consumer,ContactType,InternetRelatedFlag,tsrrelatedflag,LanguageName,Source,DNCFlag,Comments,CreatedDate,CreatedBy,UpdatedBy,UpdatedDate,OrgName,AmountRequested,AmountPaid,PaymentMethod,AgencyContact,InitialContact,InitialResponse,ComplaintDate,TransactionDate,Topic,ProdServiceDesc,Statute,Violation,RepresentativeLastName,RepresentativeFirstName,RepresentativeTitle,OrgID,MoneyPaid,Docacl,quicksearchflag,externalrefnumber,complaintagainstcreditbureau,complaintagainstcreditbureau45days,CRADisputeResponded,CRADisputeResolved,MailImageFileName,MilitaryMember,ComplaintResolutionFlag,ComplaintResolutionText,CrossBorderFlag]
                   charset : UTF-8
                   addEmptyStrings : false
                   quoteChar : "\""
               }
           }

           {
               java {
                   imports : """
                       import org.kitesdk.morphline.api.Record;
                       import org.w3c.dom.Document;
                       import org.w3c.dom.Element;
                       import org.w3c.dom.NodeList;
                       import javax.xml.parsers.DocumentBuilder;
                       import javax.xml.parsers.DocumentBuilderFactory;
                       import javax.xml.transform.Transformer;
                       import javax.xml.transform.TransformerFactory;
                       import javax.xml.transform.dom.DOMResult;
                       import javax.xml.transform.stream.StreamSource;
                       import java.io.ByteArrayInputStream;
                   """
                   code : """
                       Record newRecord = new Record();
                       newRecord.put("recordid", record.getFirstValue("recordid"));
                       newRecord.put("referencenumber", record.getFirstValue("referencenumber"));
                       newRecord.put("intreferencenumber", record.getFirstValue("intreferencenumber"));
                       final String documentid = record.getFirstValue("documentid").toString();
                       newRecord.put("ContactType", record.getFirstValue("ContactType"));
                       newRecord.put("InternetRelatedFlag", record.getFirstValue("InternetRelatedFlag"));
                       newRecord.put("tsrrelatedflag", record.getFirstValue("tsrrelatedflag"));
                       newRecord.put("LanguageName", record.getFirstValue("LanguageName"));
                       newRecord.put("Source", record.getFirstValue("Source"));
                       newRecord.put("DNCFlag", record.getFirstValue("DNCFlag"));
                       newRecord.put("Comments", record.getFirstValue("Comments"));
                       newRecord.put("CreatedBy", record.getFirstValue("CreatedBy"));
                       newRecord.put("UpdatedDate", record.getFirstValue("UpdatedDate"));
                       newRecord.put("OrgName", record.getFirstValue("OrgName"));
                       newRecord.put("AmountRequested", record.getFirstValue("AmountRequested"));
                       newRecord.put("AmountPaid", record.getFirstValue("AmountPaid"));
                       newRecord.put("PaymentMethod", record.getFirstValue("PaymentMethod"));
                       newRecord.put("AgencyContact", record.getFirstValue("AgencyContact"));
                       newRecord.put("InitialResponse", record.getFirstValue("InitialResponse"));
                       newRecord.put("TransactionDate", record.getFirstValue("TransactionDate"));
                       newRecord.put("InitialContact", record.getFirstValue("InitialContact"));
                       newRecord.put("ComplaintDate", Crecord.getFirstValue("omplaintDate"));
                       newRecord.put("TransactionDate", record.getFirstValue("TransactionDate"));
                       newRecord.put("Topic", record.getFirstValue("Topic"));
                       newRecord.put("ProdServiceDesc", record.getFirstValue("ProdServiceDesc"));
                       newRecord.put("Statute", record.getFirstValue("Statute"));
                       newRecord.put("Violation", record.getFirstValue("Violation"));
                       newRecord.put("RepresentativeLastName", record.getFirstValue("RepresentativeLastName"));
                       newRecord.put("RepresentativeFirstName", record.getFirstValue("RepresentativeFirstName"));
                       newRecord.put("RepresentativeTitle", record.getFirstValue("RepresentativeTitle"));
                       newRecord.put("OrgID", record.getFirstValue("OrgID"));
                       newRecord.put("MoneyPaid", record.getFirstValue("MoneyPaid"));
                       newRecord.put("Docacl", record.getFirstValue("Docacl"));
                       newRecord.put("quicksearchflag", record.getFirstValue("quicksearchflag"));
                       newRecord.put("externalrefnumber", record.getFirstValue("externalrefnumber"));
                       newRecord.put("complaintagainstcreditbureau", record.getFirstValue("complaintagainstcreditbureau"));
                       newRecord.put("complaintagainstcreditbureau45days", record.getFirstValue("complaintagainstcreditbureau45days"));
                       newRecord.put("CRADisputeResponded", record.getFirstValue("CRADisputeResponded"));
                       newRecord.put("CRADisputeResolved", record.getFirstValue("CRADisputeResolved"));
                       newRecord.put("MailImageFileName", record.getFirstValue("MailImageFileName"));
                       newRecord.put("MilitaryMember", record.getFirstValue("MilitaryMember"));
                       newRecord.put("ComplaintResolutionFlag", record.getFirstValue("ComplaintResolutionFlag"));
                       newRecord.put("ComplaintResolutionText", record.getFirstValue("ComplaintResolutionText"));
                       newRecord.put("CrossBorderFlag", record.getFirstValue("CrossBorderFlag"));
                       newRecord.put("documentid", documentid);

                       newRecord.put("type_s", "record");
                       newRecord.put("consumer",(String) record.getFirstValue("consumer"));
                       try {
                           String xmlString = (String) record.getFirstValue("primarycompany");
                           DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();
                           DocumentBuilder builder = builderFactory.newDocumentBuilder();
                           Document document = builder.newDocument();
                           byte[] buffer = xmlString.getBytes();
                           ByteArrayInputStream stream = new ByteArrayInputStream(buffer);
                           StreamSource source = new StreamSource(stream);
                           DOMResult result = new DOMResult(document);
                           TransformerFactory tFactory = TransformerFactory.newInstance();
                           Transformer transformer = tFactory.newTransformer();
                           transformer.transform(source, result);
                           final Element documentElement = document.getDocumentElement();

                           final NodeList companyNodes = documentElement.getElementsByTagName("pc");
                           int size = companyNodes.getLength();
                           for (int i = 0; i < size; i++) {
                               Record childRecord = new Record();
                               childRecord.put("recordid", record.getFirstValue("recordid"));
                               childRecord.put("referencenumber", record.getFirstValue("referencenumber"));
                               childRecord.put("intreferencenumber", record.getFirstValue("intreferencenumber"));
                               childRecord.put("documentid", documentid + "C" + i);
                               childRecord.put("type_s", "company");

                               final Element company = (Element) companyNodes.item(i);
                               childRecord.put("primarycompanyname", company.getElementsByTagName("name").item(0).getTextContent());
                               childRecord.put("primarycompanyaddr1", company.getElementsByTagName("address1").item(0).getTextContent());
                               childRecord.put("primarycompanyaddr2", company.getElementsByTagName("address2").item(0).getTextContent());
                               childRecord.put("primarycompanycity", company.getElementsByTagName("city").item(0).getTextContent());
                               childRecord.put("primarycompanystate", company.getElementsByTagName("state").item(0).getTextContent());
                               childRecord.put("primarycompanyzip", company.getElementsByTagName("zip").item(0).getTextContent());
                               childRecord.put("primarycompanycountry", company.getElementsByTagName("country").item(0).getTextContent());
                               childRecord.put("primarycompanyemail", company.getElementsByTagName("email").item(0).getTextContent());
                               childRecord.put("primarycompanyurl", company.getElementsByTagName("url").item(0).getTextContent());
                               childRecord.put("primarycompanycountrycode", company.getElementsByTagName("countrycode").item(0).getTextContent());
                               childRecord.put("primarycompanyareacode", company.getElementsByTagName("areacode").item(0).getTextContent());
                               childRecord.put("primarycompanyphonenumber", company.getElementsByTagName("phonenumber").item(0).getTextContent());
                               childRecord.put("primarycompanyphoneext", company.getElementsByTagName("phoneext").item(0).getTextContent());
                               childRecord.put("subjectid", company.getElementsByTagName("subjectid").item(0).getTextContent());
                               childRecord.put("subjectidtype", company.getElementsByTagName("subjectidtype").item(0).getTextContent());
                               childRecord.put("subjectidissuerstate", company.getElementsByTagName("subjectidissuerstate").item(0).getTextContent());
                               childRecord.put("subjectidissuercountry", company.getElementsByTagName("subjectidissuercountry").item(0).getTextContent());


                               newRecord.put("_loadSolr_childDocuments", childRecord);
                           }
                       } catch (Exception e) {
                           e.printStackTrace();
                       }

                       return child.process(newRecord);
                   """
               }
           }

           {
               java {
                   imports : """
                       import org.kitesdk.morphline.api.Record;
                       import org.w3c.dom.Document;
                       import org.w3c.dom.Element;
                       import org.w3c.dom.NodeList;
                       import javax.xml.parsers.DocumentBuilder;
                       import javax.xml.parsers.DocumentBuilderFactory;
                       import javax.xml.transform.Transformer;
                       import javax.xml.transform.TransformerFactory;
                       import javax.xml.transform.dom.DOMResult;
                       import javax.xml.transform.stream.StreamSource;
                       import java.io.ByteArrayInputStream;
                   """
                   code : """
                       String xmlString = (String) record.getFirstValue("acs");
                       record.removeAll("acs");
                       final String documentid = record.getFirstValue("documentid").toString();
                       try {
                           DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();
                           DocumentBuilder builder = builderFactory.newDocumentBuilder();
                           Document document = builder.newDocument();
                           byte[] buffer = xmlString.getBytes();
                           ByteArrayInputStream stream = new ByteArrayInputStream(buffer);
                           StreamSource source = new StreamSource(stream);
                           DOMResult result = new DOMResult(document);
                           TransformerFactory tFactory = TransformerFactory.newInstance();
                           Transformer transformer = tFactory.newTransformer();
                           transformer.transform(source, result);
                           final Element documentElement = document.getDocumentElement();

                           final NodeList consumerNodes = documentElement.getElementsByTagName("con");
                           int size = consumerNodes.getLength();
                           for (int i = 0; i < size; i++) {
                               Record childRecord = new Record();
                               childRecord.put("recordid", record.getFirstValue("recordid"));
                               childRecord.put("referencenumber", record.getFirstValue("referencenumber"));
                               childRecord.put("intreferencenumber", record.getFirstValue("intreferencenumber"));
                               childRecord.put("documentid", documentid + "Con" + i);
                               childRecord.put("type_s", "acs");

                               final Element acs = (Element) consumerNodes.item(i);
                               childRecord.put("associatedcompanyname", acs.getElementsByTagName("name").item(0).getTextContent());
                               childRecord.put("associatedcompanybasename", acs.getElementsByTagName("basename").item(0).getTextContent());
                               childRecord.put("associatedcompanytype", acs.getElementsByTagName("type").item(0).getTextContent());
                               childRecord.put("associatedcompanyaddr1", acs.getElementsByTagName("address1").item(0).getTextContent());
                               childRecord.put("associatedcompanyaddr2", acs.getElementsByTagName("address2").item(0).getTextContent());
                               childRecord.put("associatedcompanycity", acs.getElementsByTagName("city").item(0).getTextContent());
                               childRecord.put("associatedcompanystate", acs.getElementsByTagName("state").item(0).getTextContent());
                               childRecord.put("associatedcompanyzip", acs.getElementsByTagName("zip").item(0).getTextContent());
                               childRecord.put("associatedcompanycountry", acs.getElementsByTagName("country").item(0).getTextContent());
                               childRecord.put("associatedcompanyemail", acs.getElementsByTagName("email").item(0).getTextContent());
                               childRecord.put("associatedcompanyurl", acs.getElementsByTagName("url").item(0).getTextContent());
                               childRecord.put("associatedcompanyareacode", acs.getElementsByTagName("areacode").item(0).getTextContent());
                               childRecord.put("associatedcompanyphonenumber", acs.getElementsByTagName("phonenumber").item(0).getTextContent());
                               childRecord.put("associatedcompanyphoneext", acs.getElementsByTagName("phoneext").item(0).getTextContent());
                               childRecord.put("representativelname", acs.getElementsByTagName("replname").item(0).getTextContent());

                               record.put("_loadSolr_childDocuments", childRecord);
                           }
                       } catch (Exception e) {
                           e.printStackTrace();
                       }

                       return child.process(record);
                   """
               }
           }

           {
               java {
                   imports : """
                       import org.kitesdk.morphline.api.Record;
                       import org.w3c.dom.Document;
                       import org.w3c.dom.Element;
                       import org.w3c.dom.NodeList;
                       import javax.xml.parsers.DocumentBuilder;
                       import javax.xml.parsers.DocumentBuilderFactory;
                       import javax.xml.transform.Transformer;
                       import javax.xml.transform.TransformerFactory;
                       import javax.xml.transform.dom.DOMResult;
                       import javax.xml.transform.stream.StreamSource;
                       import java.io.ByteArrayInputStream;
                   """
                   code : """
                       String xmlString = (String) record.getFirstValue("consumer");
                       record.removeAll("consumer");
                       final String documentid = record.getFirstValue("documentid").toString();
                       try {
                           DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();
                           DocumentBuilder builder = builderFactory.newDocumentBuilder();
                           Document document = builder.newDocument();
                           byte[] buffer = xmlString.getBytes();
                           ByteArrayInputStream stream = new ByteArrayInputStream(buffer);
                           StreamSource source = new StreamSource(stream);
                           DOMResult result = new DOMResult(document);
                           TransformerFactory tFactory = TransformerFactory.newInstance();
                           Transformer transformer = tFactory.newTransformer();
                           transformer.transform(source, result);
                           final Element documentElement = document.getDocumentElement();

                           final NodeList consumerNodes = documentElement.getElementsByTagName("con");
                           int size = consumerNodes.getLength();
                           for (int i = 0; i < size; i++) {
                               Record childRecord = new Record();
                               childRecord.put("recordid", record.getFirstValue("recordid"));
                               childRecord.put("referencenumber", record.getFirstValue("referencenumber"));
                               childRecord.put("intreferencenumber", record.getFirstValue("intreferencenumber"));
                               childRecord.put("documentid", documentid + "Con" + i);
                               childRecord.put("type_s", "consumer");

                               final Element consumer = (Element) consumerNodes.item(i);
                               childRecord.put("consumerfname", consumer.getElementsByTagName("firtsname").item(0).getTextContent());
                               childRecord.put("consumerlname", consumer.getElementsByTagName("lastname").item(0).getTextContent());
                               childRecord.put("consumeremail", consumer.getElementsByTagName("email").item(0).getTextContent());
                               childRecord.put("consumeraddr1", consumer.getElementsByTagName("address1").item(0).getTextContent());
                               childRecord.put("consumeraddr2", consumer.getElementsByTagName("address2").item(0).getTextContent());
                               childRecord.put("consumercity", consumer.getElementsByTagName("city").item(0).getTextContent());
                               childRecord.put("consumerstate", consumer.getElementsByTagName("state").item(0).getTextContent());
                               childRecord.put("consumerzip", consumer.getElementsByTagName("zip").item(0).getTextContent());
                               childRecord.put("consumercountry", consumer.getElementsByTagName("country").item(0).getTextContent());
                               childRecord.put("consumerworkphone", consumer.getElementsByTagName("worknumber").item(0).getTextContent());
                               childRecord.put("consumercountrycode", consumer.getElementsByTagName("workcountrycode").item(0).getTextContent());
                               childRecord.put("consumerareacode", consumer.getElementsByTagName("workareacode").item(0).getTextContent());
                               childRecord.put("consumerworkphone", consumer.getElementsByTagName("workphonenumber").item(0).getTextContent());
                               childRecord.put("consumerworkphoneext", consumer.getElementsByTagName("workphoneextension").item(0).getTextContent());
                               childRecord.put("consumerfaxnumber", consumer.getElementsByTagName("faxnumber").item(0).getTextContent());
                               childRecord.put("consumerhomenumber", consumer.getElementsByTagName("homenumber").item(0).getTextContent());
                               childRecord.put("consumercellnumber", consumer.getElementsByTagName("cellnumber").item(0).getTextContent());
                               childRecord.put("consumeragerange", consumer.getElementsByTagName("agerange").item(0).getTextContent());
                               childRecord.put("militarybranch", consumer.getElementsByTagName("militarybranch").item(0).getTextContent());
                               childRecord.put("militarystatuscode", consumer.getElementsByTagName("militarystatus").item(0).getTextContent());
                               childRecord.put("militaryinstallationcode", consumer.getElementsByTagName("militaryinstallation").item(0).getTextContent());
                               childRecord.put("militarypaygradecode", consumer.getElementsByTagName("militarypaygrade").item(0).getTextContent());

                               record.put("_loadSolr_childDocuments", childRecord);
                           }
                       } catch (Exception e) {
                           e.printStackTrace();
                       }

                       return child.process(record);
                   """
               }
           }

          {
              loadSolr {
               solrLocator : ${SOLR_LOCATOR}
                   }
          }

           {
               java {
                   imports : """
                       import org.kitesdk.morphline.api.Record;
        import java.sql.Connection;
        import java.sql.DriverManager;
        import java.sql.ResultSet;
             import java.sql.Statement;
                   """
                   code : """
                       String documentid = (String) record.getFirstValue("documentid");
                       Connection conn = null;
        try {
                 Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            conn = DriverManager.getConnection("jdbc:sqlserver://ftcdevsql01.ppl.local:1433;database=cisbeta", "cis_fast_user", "cis4ftc");
            Statement statement = conn.createStatement();
            String queryString = "delete from dbo.FAST_CISMain_InitialLoad_01192016 where documentid = '" + documentid + "'";
            int value = statement.executeUpdate(queryString);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
                           if (conn != null) try {
                               conn.close();
                           } catch (Exception e) {
                               e.printStackTrace();
                           }
                       }
        return child.process(record);
                   """
               }
           }
       ]
   }
]