ZK_HOST : "ftcdevcdh05.lmbps.com:2181/solr"
#ZK_HOST : ${?ENV_ZK_HOST}

SOLR_LOCATOR : {
    # Name of solr collection
    collection : CIS2
    # ZooKeeper ensemble
    zkHost : ${ZK_HOST}
}

morphlines : [
    {
        id : morphline1
        importCommands : ["org.kitesdk.**", "org.apache.solr.**"]
    
        commands : [
            {
                readCSV {
                    separator : ","
                    columns : [associatedcompanyxml,AgencyContact,AmountPaid,AmountRequested,Comments,complaintagainstcreditbureau,complaintagainstcreditbureau45days,ComplaintDate,ComplaintResolutionFlag,ComplaintResolutionText,ContactType,consumerxml,CRADisputeResolved,CRADisputeResponded,createddate,CrossBorderFlag,DNCFlag,Docacl,documentid,enteredby,externalrefnumber,InitialContact,InitialResponse,InternetRelatedFlag,language,MailImageFileName,MilitaryMember,MoneyPaid,Organization,PaymentMethod,primarycompanyxml,ProdServiceDesc,quicksearchflag,recordid,referencenumber,representativefname,representativelname,RepresentativeTitle,agentxml,Source,Statute,Topic,TransactionDate,tsrrelatedflag,UpdatedBy,UpdatedDate,Violation,intreferencenumber,MilitaryMember]
                    charset : UTF-8
                    addEmptyStrings : false
                    quoteChar : "\""
                }
            }
            #{ logDebug { format : "output record b4 java: {}", args : ["@{}"] } }

            {
                java {
                    imports : """
                        import org.kitesdk.morphline.api.Record;
                        import csn.solr.morphline.MorphlineUtility;
                        import csn.solr.morphline.processor.Processor;
                    """
                    code : """
                        String mappingFile = "/mnt/cloudera/parcels/CDH-5.7.0-1.cdh5.7.0.p0.45/lib/flume-ng/conf/mapping.properties";
                        Record jsonRecord = MorphlineUtility.createRecord(record, mappingFile);

                        String processorFile = "/mnt/cloudera/parcels/CDH-5.7.0-1.cdh5.7.0.p0.45/lib/flume-ng/conf/processor.xml";
                        Processor processor = new Processor(processorFile);
                        processor.process(jsonRecord);

                        return child.process(jsonRecord);
                    """
                }
            }

            #{ logDebug { format : "output record after java: {}", args : ["@{}"] } }

            {
                loadSolr {
                    solrLocator : ${SOLR_LOCATOR}
                }
            }

            {
                java {
                    imports : """
                        import org.kitesdk.morphline.api.Record;
                        import java.sql.Connection;
                        import java.sql.DriverManager;
                        import java.sql.ResultSet;
                        import java.sql.Statement;
                    """
                    code : """
                        String documentid = (String) record.getFirstValue("documentid");
                        Connection conn = null;
                        try {
                            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                            conn = DriverManager.getConnection("jdbc:sqlserver://ftcdevsql01.ppl.local:1433;database=cisbeta", "cis_fast_user", "cis4ftc");
                            Statement statement = conn.createStatement();
                            String queryString = "delete from dbo.FAST_CISMain_InitialLoad_01192016 where documentid = '" + documentid + "'";
                            int value = statement.executeUpdate(queryString);
                            //System.out.println(new java.util.Date() + " value = " + value);
                        } catch (Exception e) {
                            e.printStackTrace();
                        } finally {
                            if (conn != null) try {
                                conn.close();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }
                        return child.process(record);
                    """
                }
            }
        ]
    }
]
